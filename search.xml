<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>爬取360图片链接</title>
      <link href="/archives/7399c5ba.html"/>
      <url>/archives/7399c5ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬取360图片链接"><a href="#爬取360图片链接" class="headerlink" title="爬取360图片链接"></a>爬取360图片链接</h1><p>最后用了最简单的 写的有别的版本也有,但是这个最简单(还能简化,没做，我也不用这种方式)，也不会出错，更没有复杂的检查等。 要求： python3(python3自带sqlite3)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 接口 http://wallpaper.apc.360.cn/index.php?c=WallPaper&amp;a=getAppsByCategory&amp;cid=【分类ID】&amp;start=【0开始】&amp;count=【加载数】&amp;from=360chrome</span></span><br><span class="line"><span class="comment"># http://wallpaper.apc.360.cn/index.php?c=WallPaper&amp;a=getAppsByCategory&amp;cid=10&amp;start=0&amp;count=1&amp;from=360chrome</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTables</span>():</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;360img.db&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 创建表</span></span><br><span class="line">    sql = <span class="string">&#x27;CREATE TABLE text10(mid integer PRIMARY KEY autoincrement, data TEXT)&#x27;</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 提交事物</span></span><br><span class="line">    conn.commit()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># createTables() #创建数据库时使用</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertTables</span>(<span class="params">d</span>):</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;360img.db&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    sql1 = <span class="string">&quot;INSERT INTO text10(data) VALUES(&#x27;&#123;&#125;&#x27;)&quot;</span></span><br><span class="line">    sql = sql1.<span class="built_in">format</span>(<span class="built_in">str</span>(d))</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 提交事物</span></span><br><span class="line">    conn.commit()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conUrl</span>():</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&quot;text10.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(f1):</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    payload = &#123;<span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;WallPaper&#x27;</span>, <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;getAppsByCategory&#x27;</span>, <span class="string">&#x27;cid&#x27;</span>: <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;start&#x27;</span>: start, <span class="string">&#x27;count&#x27;</span>: <span class="string">&#x27;200&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;360chrome&#x27;</span>&#125;</span><br><span class="line">    r = requests.get(<span class="string">&#x27;http://wallpaper.apc.360.cn/index.php&#x27;</span>, params=payload)</span><br><span class="line">    <span class="comment"># 获取json的data字段</span></span><br><span class="line">    jsData = r.json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;text10.txt&quot;</span>, <span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> jsData:</span><br><span class="line">        strS = <span class="built_in">str</span>(i).replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>)  <span class="comment"># 字符串转json</span></span><br><span class="line">        dictJson = json.loads(strS)  <span class="comment"># 字符串转字典</span></span><br><span class="line">        <span class="comment"># 字典获取所有 k,values</span></span><br><span class="line">        strI = <span class="built_in">str</span>(i) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> strI <span class="keyword">not</span> <span class="keyword">in</span> f.readline():</span><br><span class="line">            f.write(<span class="built_in">str</span>(i) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            insertTables(strS)</span><br><span class="line"> </span><br><span class="line">conUrl() <span class="comment">#用for循环先注释掉</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 定时执行 暂时取消  用 循环执行</span></span><br><span class="line"><span class="string">def timGo():</span></span><br><span class="line"><span class="string">    count = 0</span></span><br><span class="line"><span class="string">    for i in range(10):</span></span><br><span class="line"><span class="string">        count += 1</span></span><br><span class="line"><span class="string">        conUrl()</span></span><br><span class="line"><span class="string">        print(&quot;执行次数&quot; + str(count))</span></span><br><span class="line"><span class="string">        time.sleep(10)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">timGo()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python裁剪图片</title>
      <link href="/archives/dbc0c148.html"/>
      <url>/archives/dbc0c148.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python裁剪图片"><a href="#Python裁剪图片" class="headerlink" title="Python裁剪图片"></a>Python裁剪图片</h1><h2 id="个人适用版本"><a href="#个人适用版本" class="headerlink" title="个人适用版本"></a>个人适用版本</h2><p><strong>800x400 裁剪后符合大小</strong></p><p><strong>1920x400 裁剪后符合比例</strong></p><p><strong>配合imgbot 自动压缩无需处理压缩</strong></p><p><strong>cdn by jsdeliver</strong> </p><h4 id="待实现链接自动注入到文章"><a href="#待实现链接自动注入到文章" class="headerlink" title="待实现链接自动注入到文章"></a><strong>待实现链接自动注入到文章</strong></h4><p>链接url 分别放在 max.txt mid.txt min.txt</p><p>文件夹 max（原图） mid（比例为1920x400）  min（大小为800x400）</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mpath = os.getcwd()</span></span><br><span class="line"><span class="comment"># print(Mpath)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原来文件夹</span></span><br><span class="line">source_dirs = <span class="string">&#x27;./max&#x27;</span></span><br><span class="line"><span class="comment"># 目标文件夹</span></span><br><span class="line">target_dirs = <span class="string">&#x27;./mid&#x27;</span></span><br><span class="line"><span class="comment"># 目标文件夹2</span></span><br><span class="line">target_dirs2 = <span class="string">&#x27;./min&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到图片的链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getListFiles</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> os.path.isdir(path), <span class="string">&#x27;%s not exist.&#x27;</span> % path</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="comment"># 已经有的文件夹</span></span><br><span class="line">    has_dirs = []</span><br><span class="line">    <span class="comment"># 目录创建</span></span><br><span class="line">    <span class="comment"># 暂时有一个文件夹下多文件 读取问题没 解决 dirs files均为列表  已经解决</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="comment"># print(&#x27;%s, %s, %s&#x27; % (root, dirs, files))</span></span><br><span class="line">        <span class="comment"># print(&#x27;%s, %s&#x27; % (dirs,files))</span></span><br><span class="line">        s = <span class="string">&#x27;&#x27;</span>.join(root) + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(dirs)</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> has_dirs:</span><br><span class="line">            has_dirs.append(s)</span><br><span class="line">        <span class="keyword">if</span> path == source_dirs:</span><br><span class="line">            create_dirs(has_dirs)</span><br><span class="line">        <span class="keyword">for</span> filesPath <span class="keyword">in</span> files:</span><br><span class="line">            ret.append(os.path.join(root, filesPath))</span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建不存在文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dirs</span>(<span class="params">has_dirs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> has_dirs:</span><br><span class="line">        i = i.replace(source_dirs, target_dirs)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(i):</span><br><span class="line">            os.makedirs(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> has_dirs:</span><br><span class="line">        i = i.replace(source_dirs, target_dirs2)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(i):</span><br><span class="line">            os.makedirs(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩放</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scale</span>(<span class="params">i</span>):</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;&#x27;</span> + i)</span><br><span class="line">    <span class="comment"># 目标地址</span></span><br><span class="line">    bb = i.replace(source_dirs, target_dirs2)</span><br><span class="line">    bb = bb.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    width, height = img.size</span><br><span class="line">    w_s = <span class="built_in">int</span>(width / (width / <span class="number">800</span>))  <span class="comment"># 长宽缩小两倍</span></span><br><span class="line">    h_s = <span class="built_in">int</span>(height / (height / <span class="number">400</span>))  <span class="comment"># 长宽缩小两倍</span></span><br><span class="line">    img = img.resize((w_s, h_s), Image.ANTIALIAS)</span><br><span class="line">    blank = (w_s - h_s) / <span class="number">2</span></span><br><span class="line">    <span class="comment"># region = img.crop((0, -blank, w_s, w_s - blank))</span></span><br><span class="line">    region = img.crop((<span class="number">0</span>, <span class="number">0</span>, w_s, h_s))</span><br><span class="line">    region.save(bb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 裁剪</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span>(<span class="params">i</span>):</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;&#x27;</span> + i)</span><br><span class="line">    <span class="comment"># 目标地址</span></span><br><span class="line">    bb = i.replace(source_dirs, target_dirs)</span><br><span class="line">    bb = bb.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    width, height = img.size</span><br><span class="line">    he = (width * <span class="number">400</span>) / <span class="number">1920</span></span><br><span class="line">    wi = (height - he) / <span class="number">2</span></span><br><span class="line">    <span class="comment"># print(he)</span></span><br><span class="line">    <span class="comment"># print(width,height)</span></span><br><span class="line">    <span class="comment"># 前两个坐标点是左上角坐标</span></span><br><span class="line">    <span class="comment"># 后两个坐标点是右下角坐标</span></span><br><span class="line">    <span class="comment"># width在前， height在后</span></span><br><span class="line">    box = (<span class="number">0</span>, wi, width, he + wi)</span><br><span class="line">    region = img.crop(box)</span><br><span class="line">    <span class="comment"># cc=bb.replace(&#x27;\\&#x27;,&#x27;&#x27;)</span></span><br><span class="line">    <span class="comment"># if os.path.exists(cc):</span></span><br><span class="line">    <span class="comment"># os.makedirs(cc)</span></span><br><span class="line">    <span class="comment"># 因为保存裁剪后的文件要求文件夹要存在故单独处理</span></span><br><span class="line">    region.save(bb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接为链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_url</span>(<span class="params">utl_txt, lst</span>):</span></span><br><span class="line">    file = utl_txt</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        i = i.replace(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        i = i.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        i1 = i.replace(<span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;mid&#x27;</span>)</span><br><span class="line">        i2 = i.replace(<span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">                url = <span class="string">&#x27;https://cdn.jsdelivr.net/gh/runrab/cdn2@master/img&#x27;</span> + i + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> f1.readlines():</span><br><span class="line">                    f.write(url)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;mid.txt&quot;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;mid.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">                url = <span class="string">&#x27;https://cdn.jsdelivr.net/gh/runrab/cdn2@master/img&#x27;</span> + i2 + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> f1.readlines():</span><br><span class="line">                    f.write(url)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;min.txt&quot;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;min.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">                url = <span class="string">&#x27;https://cdn.jsdelivr.net/gh/runrab/cdn2@master/img&#x27;</span> + i2 + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> f1.readlines():</span><br><span class="line">                    f.write(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">declImg</span>():</span></span><br><span class="line">    a = getListFiles(source_dirs)</span><br><span class="line">    b = getListFiles(target_dirs)</span><br><span class="line">    c = getListFiles(target_dirs2)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> b:</span><br><span class="line">            b.append(i)</span><br><span class="line">            resize(i)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> c:</span><br><span class="line">            c.append(i)</span><br><span class="line">            scale(i)</span><br><span class="line">    join_url(<span class="string">r&quot;max.txt&quot;</span>, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">declImg()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#导出requirements.txt</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的网盘</title>
      <link href="/archives/855e324c.html"/>
      <url>/archives/855e324c.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于："><a href="#基于：" class="headerlink" title="基于："></a>基于：</h1><p><strong>onemanger +阿里云函数计算Fc</strong> </p><h1 id="demo"><a href="#demo" class="headerlink" title="demo:"></a>demo:</h1><h2 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url&#x3D;https:&#x2F;&#x2F;pan.runrab.com&#x2F;video&#x2F;%E4%B9%A6%E8%AE%B0%E8%88%9E.mp4&quot; &quot;pic&#x3D;https:&#x2F;&#x2F;xxxxxxx.jpg&quot; &quot;loop&#x3D;yes&quot; &quot;theme&#x3D;#FADFA3&quot; &quot;autoplay&#x3D;false&quot; &quot;token&#x3D;tokendemo&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="dplayer使用hexo-tag-dplayer"><a href="#dplayer使用hexo-tag-dplayer" class="headerlink" title="dplayer使用hexo-tag-dplayer"></a>dplayer使用hexo-tag-dplayer</h3><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"theme":"#FADFA3","loop":true,"video":{"url":"https://pan.runrab.com/video/%E4%B9%A6%E8%AE%B0%E8%88%9E.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      
      
      <categories>
          
          <category> me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单线程速度就一定慢吗</title>
      <link href="/archives/15ac44a2.html"/>
      <url>/archives/15ac44a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="单线程速度如何"><a href="#单线程速度如何" class="headerlink" title="单线程速度如何"></a>单线程速度如何</h1><p>多线程一般是会比单线程快的，但这不是绝对的<br>1 在以前的计算机都只有一个CPU，即使是多线程，也是依靠时间片完成的<br>2 现在的多核计算机，多线程速度是要快于单线程</p><h2 id="单线程快的一些例子"><a href="#单线程快的一些例子" class="headerlink" title="单线程快的一些例子"></a>单线程快的一些例子</h2><p>单线程的redis为什么这么快<br>(一)纯内存操作<br>(二)单线程操作，避免了频繁的上下文切换<br>(三)采用了非阻塞I/O多路复用机制</p><h3 id="为什么Nodejs单线程却能够支持高并发？"><a href="#为什么Nodejs单线程却能够支持高并发？" class="headerlink" title="为什么Nodejs单线程却能够支持高并发？"></a>为什么Nodejs单线程却能够支持高并发？</h3><p>Nodejs之所以单线程可以处理高并发的原因，得益于libuv层的事件循环机制，和底层线程池实现。<br>（1）前提：I/O密集型任务，如果是CPU密集型，也会产生阻塞。<br>（2）单线程的解释：主线程一个，底层工作线程多个。<br>（3）事件机制的底层依赖库：libuv、libeio、libev。</p><h3 id="单线程的好处："><a href="#单线程的好处：" class="headerlink" title="单线程的好处："></a>单线程的好处：</h3><p>（1）多线程占用内存高</p><p>（2）多线程间切换使得CPU开销大</p><p>（3）多线程由内存同步开销</p><p>（4）编写单线程程序简单</p><p>（5）线程安全</p><h3 id="单线程的劣势："><a href="#单线程的劣势：" class="headerlink" title="单线程的劣势："></a>单线程的劣势：</h3><p>（1）CPU密集型任务占用CPU时间长</p><p>（2）无法利用CPU的多核</p><p>（3）单线程抛出异常使得程序停止</p>]]></content>
      
      
      <categories>
          
          <category> 发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 发现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的图床</title>
      <link href="/archives/2e4464e.html"/>
      <url>/archives/2e4464e.html</url>
      
        <content type="html"><![CDATA[<h3 id="首先说明项目来源：https-github-com-XPoet-picx"><a href="#首先说明项目来源：https-github-com-XPoet-picx" class="headerlink" title="首先说明项目来源：https://github.com/XPoet/picx"></a>首先说明项目来源：<a href="https://github.com/XPoet/picx">https://github.com/XPoet/picx</a></h3><p>我clone了一份放在了我的另一个github上</p><p>部署基于vercel</p><p>cdn by jsdeliver 但是我只会少量使用，也不建议各位大量使用。jsdeliver官方禁止作为图床，可能会被封号,但我用上几十几百M应该不碍事吧。</p><p>cdn by vercel 官方给的一月好像是100G。主用。</p><p>存储 by Github 仓库大小限制(一般不会用到1G)</p><p>图片压缩 by imgBot  地址<a href="https://github.com/marketplace/imgbot">https://github.com/marketplace/imgbot</a> 选择的为免费计划 github push 后图片会被github action 自动压缩.</p><p>demo : jsdeliver:  <a href="https://cdn.jsdelivr.net/gh/hs-p/pic@main/001.5pa8cg96zfs0.jpg">https://cdn.jsdelivr.net/gh/hs-p/pic@main/001.5pa8cg96zfs0.jpg</a></p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/pic@main/001.5pa8cg96zfs0.jpg" alt="https://cdn.jsdelivr.net/gh/hs-p/pic@main/001.5pa8cg96zfs0.jpg"></p><p>vercel: <a href="https://img-plus.vercel.app/001.5pa8cg96zfs0.jpg">https://img-plus.vercel.app/001.5pa8cg96zfs0.jpg</a></p><p><img src="https://img-plus.vercel.app/001.5pa8cg96zfs0.jpg" alt="https://img-plus.vercel.app/001.5pa8cg96zfs0.jpg"></p><p>等我有时间再搞吧。</p><h1 id="搭建："><a href="#搭建：" class="headerlink" title="搭建："></a>搭建：</h1><p>fork 或者 clone <a href="https://github.com/XPoet/picx">https://github.com/XPoet/picx</a></p><p><strong>到你的github</strong>(别忘了给作者点一个start)</p><p>vercel 导入这个仓库 选择 <strong>vus.js</strong>  (目录是默认就dist不要改动)</p><p><strong>再创建一个****仓库</strong>存图片</p><p>作者给的教程 ：</p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/pic@main/Snipaste_2021-06-23_10-15-33.3wdz5f0tnb20.png" alt="Snipaste_2021-06-23_10-15-33"></p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/pic@main/Snipaste_2021-06-23_10-16-16.6nutemmkips0.png" alt="Snipaste_2021-06-23_10-16-16"></p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/pic@main/Snipaste_2021-06-23_10-16-40.2xgsd8rpm3a0.png" alt="Snipaste_2021-06-23_10-16-40"></p><p>图片压缩作者还没给可以用这个imgbot（选择你图片存储的仓库）</p><p>地址： <a href="https://github.com/marketplace/imgbot">https://github.com/marketplace/imgbot</a></p><p>实在太简单了。想看详细的话可以去看一下这个</p><p><a href="https://www.cnblogs.com/lfri/p/12257277.html">https://www.cnblogs.com/lfri/p/12257277.html</a></p>]]></content>
      
      
      <categories>
          
          <category> me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pixiv代理</title>
      <link href="/archives/df1b4fb9.html"/>
      <url>/archives/df1b4fb9.html</url>
      
        <content type="html"><![CDATA[<h1 id="pixiv代理"><a href="#pixiv代理" class="headerlink" title="pixiv代理"></a>pixiv代理</h1><h2 id="cloudfare-代理"><a href="#cloudfare-代理" class="headerlink" title="cloudfare 代理"></a>cloudfare 代理</h2><p>地址：https://<strong>i.pximg.net</strong>替换为 <a href="https://pixiv.runrab.workers.dev/">https://pixiv.runrab.workers.dev</a></p><p>例如 https://<strong>i.pximg.net</strong>/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg</p><p>换成</p><p><img src="https://pixiv.runrab.workers.dev/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg" alt="demo"></p><p>也可以用 <a href="https://i.pixiv.cat/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg">https://i.pixiv.cat/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg</a></p><p>来自：<a href="https://pixiv.cat/reverseproxy.html">https://pixiv.cat/reverseproxy.html</a></p><p>nginx 代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path &#x2F;path&#x2F;to&#x2F;cache levels&#x3D;1:2 keys_zone&#x3D;pximg:10m max_size&#x3D;10g inactive&#x3D;7d use_temp_path&#x3D;off;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;path&#x2F;to&#x2F;ssl_certificate.crt;</span><br><span class="line">    ssl_certificate_key &#x2F;path&#x2F;to&#x2F;ssl_certificate.key;</span><br><span class="line"></span><br><span class="line">    server_name i.pixiv.cat;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">    proxy_cache pximg;</span><br><span class="line">    proxy_pass https:&#x2F;&#x2F;i.pximg.net;</span><br><span class="line">    proxy_cache_revalidate on;</span><br><span class="line">    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;</span><br><span class="line">    proxy_cache_lock on;</span><br><span class="line">    add_header X-Cache-Status $upstream_cache_status;</span><br><span class="line">    proxy_set_header Host i.pximg.net;</span><br><span class="line">    proxy_set_header Referer &quot;https:&#x2F;&#x2F;www.pixiv.net&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">    proxy_cache_valid 200 7d;</span><br><span class="line">    proxy_cache_valid 404 5m;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cf代理设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&quot;fetch&quot;, event &#x3D;&gt; &#123;</span><br><span class="line">  let url &#x3D; new URL(event.request.url);</span><br><span class="line">  url.hostname &#x3D; &quot;i.pximg.net&quot;;</span><br><span class="line"></span><br><span class="line">  let request &#x3D; new Request(url, event.request);</span><br><span class="line">  event.respondWith(</span><br><span class="line">    fetch(request, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;www.pixiv.net&#x2F;&#39;,</span><br><span class="line">        &#39;User-Agent&#39;: &#39;Cloudflare Workers&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pixiv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟我学RabbitMq</title>
      <link href="/archives/64ed8929.html"/>
      <url>/archives/64ed8929.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-消息队列概述"><a href="#1-消息队列概述" class="headerlink" title="1. 消息队列概述"></a>1. 消息队列概述</h2><p><strong>目标</strong>：能够说出什么是消息队列；为什么使用消息队列；常见产品有哪些</p><p><strong>小结</strong>：</p><p>消息队列是应用程序之间的通信方法；无需即时返回的且耗时的操作进行异步处理从而提高系统的吞吐量；可以实现程序之间的解耦合。</p><ul><li>实现方式：AMQP，JMS</li><li>常见产品：activeMQ，zeroMQ，RabbitMQ，RocketMQ，kafka</li></ul><h2 id="2-安装及配置RabbitMQ"><a href="#2-安装及配置RabbitMQ" class="headerlink" title="2. 安装及配置RabbitMQ"></a>2. 安装及配置RabbitMQ</h2><p><strong>目标</strong>：按照文档在本机安装windows版本RabbitMQ，并配置其用户和Virtual Hosts</p><p><strong>分析</strong>：</p><ol><li>安装erlang；</li><li>安装rabbitMQ；</li><li>安装RabbitMQ的图形管理界面插件；</li><li>创建管理用户；</li><li>创建虚拟主机Virtual Hosts</li></ol><p><strong>小结</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">1[安装erlang] --&gt; 2[安装RabbitMQ]</span><br><span class="line">2 --&gt; 3[安装管理插件]</span><br><span class="line">3 --&gt; 4[创建用户]</span><br><span class="line">4 --&gt; 5[创建虚拟主机]</span><br></pre></td></tr></table></figure><blockquote><p>安装上述的组件时候都需要使用以管理员身份运行。</p></blockquote><h2 id="3-搭建RabbitMQ入门工程"><a href="#3-搭建RabbitMQ入门工程" class="headerlink" title="3. 搭建RabbitMQ入门工程"></a>3. 搭建RabbitMQ入门工程</h2><p><strong>目标</strong>：搭建RabbitMQ入门工程并配置对应的maven依赖</p><p><strong>分析</strong>：</p><p>创建heima-rabbitmq的工程；用于测试RabbitMQ的消息收发。添加用于操作RabbitMQ的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>小结</strong>：</p><p>使用IDEA创建maven工程；使用了jdk1.8。在工程中的pom.xml文件中添加了上述的依赖。</p><h2 id="4-入门工程-生产者"><a href="#4-入门工程-生产者" class="headerlink" title="4. 入门工程-生产者"></a>4. 入门工程-生产者</h2><p><strong>目标</strong>：编写消息生产者代码，发送消息到队列</p><p><strong>分析</strong>：</p><p>入门工程：生产者发送消息到RabbitMQ的队列（simple_queue）；消费者可以从队列中获取消息。可以使用RabbitMQ的简单模式（simple）。</p><p>生产者实现发送消息的步骤：</p><ol><li>创建连接工厂（设置RabbitMQ的连接参数）；</li><li>创建连接；</li><li>创建频道；</li><li>声明队列；</li><li>发送消息；</li><li>关闭资源</li></ol><p><strong>小结</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单模式：发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂（设置RabbitMQ的连接参数）；</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机；默认localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="comment">//连接端口；默认5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机；默认/</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名；默认guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line">        <span class="comment">//密码；默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建连接；</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//3. 创建频道；</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//4. 声明队列；</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列（消息会持久化保存在服务器上）</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候队列自动删除</span></span><br><span class="line"><span class="comment">         * 参数5：其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//5. 发送消息；</span></span><br><span class="line">        String message = <span class="string">&quot;你好！小兔纸。&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称；如果没有则指定空字符串（表示使用默认的交换机）</span></span><br><span class="line"><span class="comment">         * 参数2：路由key，简单模式中可以使用队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line">        <span class="comment">//6. 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在设置连接工厂的时候；如果没有指定连接的参数则会有默认值；可以去设置虚拟主机。</p></blockquote><h2 id="5-入门工程-消费者"><a href="#5-入门工程-消费者" class="headerlink" title="5. 入门工程-消费者"></a>5. 入门工程-消费者</h2><p><strong>目标</strong>：编写消息消费者代码，从队列中接收消息并消费</p><p><strong>分析</strong>：</p><p>从RabbitMQ中队列（与生产者发送消息时的队列一致；simple_queue）接收消息；</p><p>实现消费者步骤：</p><ol><li>创建连接工厂；</li><li>创建连接；（抽取一个获取连接的工具类）</li><li>创建频道；</li><li>声明队列；</li><li>创建消费者（接收消息并处理消息）；</li><li>监听队列</li></ol><p><strong>小结</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单模式；消费者接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂；</span></span><br><span class="line">        <span class="comment">//2. 创建连接；（抽取一个获取连接的工具类）</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">//3. 创建频道；</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//4. 声明队列；</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列（消息会持久化保存在服务器上）</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候队列自动删除</span></span><br><span class="line"><span class="comment">         * 参数5：其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//5. 创建消费者（接收消息并处理消息）；</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//接收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//6. 监听队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名</span></span><br><span class="line"><span class="comment">         * 参数2：是否要自动确认；设置为true表示消息接收到自动向MQ回复接收到了，MQ则会将消息从队列中删除；</span></span><br><span class="line"><span class="comment">         * 如果设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消费者</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需要持续监听队列消息，所以不要关闭资源</p></blockquote><h2 id="6-入门工程测试"><a href="#6-入门工程测试" class="headerlink" title="6. 入门工程测试"></a>6. 入门工程测试</h2><p><strong>目标</strong>：启动消费者和生产者，到RabbitMQ中查询队列并在消费者端IDEA控制台查看接收到的消息</p><p><strong>分析</strong>：</p><p>生产者：发送消息到RabbitMQ队列（simple_queue）</p><p>消费者：接收RabbitMQ队列消息</p><p><strong>小结</strong>：</p><p>简单模式：生产者发送消息到队列中，一个消费者从队列中接收消息。</p><blockquote><p>在RabbitMQ中消费者只能从队列接收消息。</p><p>如果接收消息的消费者在同一个队列中有两个或多个时；消息是如何分配的？</p></blockquote><h2 id="7-Work-queues工作队列模式"><a href="#7-Work-queues工作队列模式" class="headerlink" title="7. Work queues工作队列模式"></a>7. Work queues工作队列模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Work queues工作队列模式的特点</p><p><strong>分析</strong>：</p><p>工作队列模式：在同一个队列中可以有多个消费者，消费者之间对于消息的接收是竞争关系。</p><p>生产者：发送30个消息</p><p>消费者：创建两个消费者监听同一个队列，查看两个消费者的接收消息是否存在重复。</p><p><strong>小结</strong>：</p><p>工作队列模式：一个消息只能被一个消费者接收，其它消费者是不能接收到同一条消息的。</p><p>应用场景：可以在消费者端处理任务比较耗时的时候；添加对同一个队列的消费者来提高任务处理能力。</p><h2 id="8-订阅模式类型说明"><a href="#8-订阅模式类型说明" class="headerlink" title="8. 订阅模式类型说明"></a>8. 订阅模式类型说明</h2><p><strong>目标</strong>：说出订阅模式中的Exchange交换机作用以及交换机的三种类型</p><p><strong>小结</strong>：</p><p>订阅模式与前面的两种模式比较：多了一个角色Exchange交换机，接收生产者发送的消息并决定如何投递消息到其绑定的队列；消息的投递决定于交换机的类型。</p><p>交换机类型：广播（fanout）、定向（direct）、通配符（topic）</p><blockquote><p>交换机只做消息转发，自身不存储数据。</p></blockquote><h2 id="9-Publish-Subscribe发布与订阅模式"><a href="#9-Publish-Subscribe发布与订阅模式" class="headerlink" title="9. Publish/Subscribe发布与订阅模式"></a>9. Publish/Subscribe发布与订阅模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Publish/Subscribe发布与订阅模式的特点</p><p><strong>分析</strong>：</p><p>发布与订阅模式特点：一个消息可以被多个消费者接收；其实是使用了订阅模式，交换机类型为：fanout广播</p><ul><li>生产者（发送10个消息）<ol><li>创建连接；</li><li>创建频道；</li><li>声明交换机（fanout）；</li><li>声明队列；</li><li>队列绑定到交换机；</li><li>发送消息；</li><li>关闭资源</li></ol></li><li>消费者（至少两个消费者）<ol><li>创建连接；</li><li>创建频道；</li><li>声明交换机；</li><li>声明队列；</li><li>队列绑定到交换机；</li><li>创建消费者；</li><li>监听队列；</li></ol></li></ul><p><strong>小结</strong>：</p><p>发布与订阅模式：<strong>一个消息可以被多个消费者接收</strong>；一个消费者对于的队列，该队列只能被一个消费者监听。使用了订阅模式中交换机类型为：广播。</p><h2 id="10-Routing路由模式"><a href="#10-Routing路由模式" class="headerlink" title="10. Routing路由模式"></a>10. Routing路由模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Routing路由模式的特点</p><p><strong>分析</strong>：</p><p>生产者：发送两条消息（路由key分别为：insert、update）</p><p>消费者：创建两个消费者，监听的队列分别绑定路由key为：insert、update</p><ol><li>消息中路由key为insert的会被绑定路由key为insert的队列接收并被其监听的消费者接收、处理；</li><li>消息中路由key为update的会被绑定路由key为update的队列接收并被其监听的消费者接收、处理；</li></ol><p><strong>小结</strong>：</p><p>Routing 路面模式要求队列绑定到交换机的时候指定路由key；消费发送时候需要携带路由key；只有消息的路由key与队列路由key完全一致才能让该队列接收到消息。</p><h2 id="11-Topics通配符模式"><a href="#11-Topics通配符模式" class="headerlink" title="11. Topics通配符模式"></a>11. Topics通配符模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Topics通配符模式的特点</p><p><strong>分析</strong>：</p><ul><li>生产者：发送包含有item.insert、item.update，item.delete的3中路由key消息</li><li>消费者1：监听的队列绑定到交换机的路由key为：item.update，item.delete</li><li>消费者2：监听的队列绑定到交换机的路由key为：item.*</li></ul><p><strong>小结</strong>：</p><p>Topics通配符模式：可以根据路由key将消息传递到对应路由key的队列；队列绑定到交换机的路由key可以有多个；通配符模式中路由key可以使用 <code>*</code> 和 <code>#</code> ；使用了通配符模式之后对于路由Key的配置更加灵活。</p><h2 id="12-RabbitMQ模式总结"><a href="#12-RabbitMQ模式总结" class="headerlink" title="12. RabbitMQ模式总结"></a>12. RabbitMQ模式总结</h2><p><strong>目标</strong>：对比总结RabbitMQ的5种模式特征</p><p><strong>小结</strong>：</p><ul><li>不直接Exchange交换机（默认交换机）<ol><li>simple简单模式：一个生产者生产一个消息到一个队列被一个消费者接收</li><li>work工作队列模式：生产者发送消息到一个队列中，然后可以被多个消费者监听该队列；一个消息只能被一个消费者接收，消费者之间是竞争关系</li></ol></li><li>使用Exchange交换机；订阅模式（交换机：广播fanout、定向direct、通配符topic）<ol><li>发布与订阅模式：使用了fanout广播类型的交换机，可以将一个消息发送到所有绑定了该交换机的队列</li><li>路由模式：使用了direct定向类型的交换机，消费会携带路由key，交换机根据消息的路由key与队列的路由key进行对比，一致的话那么该队列可以接收到消息</li><li>通配符模式：使用了topic通配符类型的交换机，消费会携带路由key（*， #），交换机根据消息的路由key与队列的路由key进行对比，匹配的话那么该队列可以接收到消息</li></ol></li></ul><h2 id="13-创建SpringBoot整合RabbitMQ的两个工程"><a href="#13-创建SpringBoot整合RabbitMQ的两个工程" class="headerlink" title="13. 创建SpringBoot整合RabbitMQ的两个工程"></a>13. 创建SpringBoot整合RabbitMQ的两个工程</h2><p><strong>目标</strong>：创建springboot-rabbitmq-producer工程用于生产消息；创建springboot-rabbitmq-consumer工程用于接收消息</p><p><strong>分析</strong>：</p><p>Spring Boot提供了对于AMQP的整合；可以使用RabbitTemplate发送消息；可以使用@RabbitListener注解接收消息。</p><p><strong>生产者工程springboot-rabbitmq-producer</strong>：发送消息</p><ol><li>创建工程；</li><li>添加依赖（spring-boot-stater-amqp，spring-boot-starter-test）；</li><li>创建启动引导类；</li><li>添加配置文件application.yml</li></ol><p><strong>消费者工程springboot-rabbitmq-consumer</strong>：接收消息</p><ol><li>创建工程；</li><li>添加依赖（spring-boot-stater-amqp）；</li><li>创建启动引导类；</li><li>添加配置文件application.yml</li></ol><p><strong>小结</strong>：</p><blockquote><p>可以使用插件自动生产Spring Boot工程的启动引导类Application.java和配置文件application.yml</p></blockquote><h2 id="14-配置生产者工程"><a href="#14-配置生产者工程" class="headerlink" title="14. 配置生产者工程"></a>14. 配置生产者工程</h2><p><strong>目标</strong>：配置springboot-rabbitmq-producer工程的RabbitMQ，一个交换机、队列并绑定</p><p><strong>分析</strong>：</p><p>使用通配符模式：将队列绑定到交换机（topic）时需要指定路由key（item.#）</p><ol><li>配置RabbitMQ的连接参数：主机、连接端口、虚拟主机、用户名、密码；</li><li>声明交换机、队列并将队列绑定到交换机，指定的路由key（item.#）</li></ol><p><strong>小结</strong>：</p><ul><li>配置application.yml文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima</span></span><br></pre></td></tr></table></figure><ul><li>配置交换机、队列和绑定，创建一个配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_TOPIC_EXCHANGE = <span class="string">&quot;item_topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_QUEUE = <span class="string">&quot;item_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;itemTopicExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;itemQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">itemQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(ITEM_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将队列绑定到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">itemQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;itemQueue&quot;)</span> Queue queue,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@Qualifier(&quot;itemTopicExchange&quot;)</span>Exchange exchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;item.#&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15-配置消费者工程"><a href="#15-配置消费者工程" class="headerlink" title="15. 配置消费者工程"></a>15. 配置消费者工程</h2><p><strong>目标</strong>：配置springboot-rabbitmq-consumer工程的RabbitMQ，编写消息监听器接收消息</p><p><strong>分析</strong>：</p><ol><li>配置application.yml文件，设置RabbitMQ的连接参数；</li><li>编写消息监听器接收队列（item_queue）消息；可以使用注解@RabbitListener接收队列消息</li></ol><p><strong>小结</strong>：</p><ul><li>配置application.yml文件；与生产者工程一致</li><li>编写监听器类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收队列消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收到的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;item_queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListener1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>接收消息的队列名称要与生产者发送消息时的队列名称一致</p></blockquote><h2 id="16-测试消息发送和接收"><a href="#16-测试消息发送和接收" class="headerlink" title="16. 测试消息发送和接收"></a>16. 测试消息发送和接收</h2><p><strong>目标</strong>：生产者编写测试类RabbitMQTest发送消息到交换机和特定的路由（item.insert，item.update，item.delete）</p><p><strong>分析</strong>：</p><p>生产者：编写测试类RabbitMQTest，利用RabbitTemplate发送3条消息，这3条消息的路由key分别是item.insert，item.update，item.delete</p><p>消费者：在IDEA控制台查看是否能接收到符合路由key的消息</p><p><strong>小结</strong>：</p><p>编写测试类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;item.insert&quot;</span>, <span class="string">&quot;商品新增,路由Key为item.insert&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;item.update&quot;</span>, <span class="string">&quot;商品新增,路由Key为item.update&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;item.delete&quot;</span>, <span class="string">&quot;商品新增,路由Key为item.delete&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;a.item.delete&quot;</span>, <span class="string">&quot;商品新增,路由Key为a.item.delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>先启动测试类进行声明交换机、队列和绑定；之后再启动消费者工程接收消息。</p></blockquote><p><strong>来自黑马JavaEE</strong></p>]]></content>
      
      
      <categories>
          
          <category> 跟我学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudfare解决没有ipv4或ipv6</title>
      <link href="/archives/ba3f934f.html"/>
      <url>/archives/ba3f934f.html</url>
      
        <content type="html"><![CDATA[<p>cloudfare简介:</p><blockquote><p>Cloudflare是一家美国的跨国科技企业，总部位于旧金山，在英国伦敦亦设有办事处。Cloudflare以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务。通过基于反向代理的内容分发网络(CDN, Content Delivery Network)、任播(Anycast)技术 [1] 、基于nginx+lua架构的Web应用防火墙(WAF, Web Application Firewall) [2] 及分布式域名解析服务(Distributed Domain Name Server)等技术，Cloudflare可以帮助受保护站点抵御包括分布式拒绝服务攻击(DDoS, Distributed Denial of Service)在内的大多数网络攻击，确保该网站长期在线，同时提升网站的性能、访问速度以改善访客体验。–百度百科</p></blockquote><p>简单来说就是cdn提供商</p><p>用到方法;三种 </p><p>一：cname方式</p><p>直接canme到域名</p><p>二：AAAA到ipv6地址 </p><p>三：Argo Tunnel</p><p>正在更新 但是实测速度并不怎末样 我是用来nas ipv4访问的</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onePointApi文档</title>
      <link href="/archives/926fe736.html"/>
      <url>/archives/926fe736.html</url>
      
        <content type="html"><![CDATA[<h2 id="官网地址：https-vercel-com"><a href="#官网地址：https-vercel-com" class="headerlink" title="官网地址：https://vercel.com/"></a>官网地址：<a href="https://vercel.com/">https://vercel.com/</a></h2><h3 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h3><p>注册很简单，一般直接 github 登录就好了，但是有一点问题是我github账户绑定<em><strong>qq邮箱</strong></em>的时候是注册侧边的的。<br>换成gmail就可以了。</p><h3 id="2-安装CLI"><a href="#2-安装CLI" class="headerlink" title="2. 安装CLI"></a>2. 安装CLI</h3><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="- 安装nodejs"></a>- 安装nodejs</h4><p>Nodejs 官方地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>直接官网下exe安装即可，不多介绍了</p><h4 id="安装nowcli"><a href="#安装nowcli" class="headerlink" title="- 安装nowcli"></a>- 安装nowcli</h4><p>打开 cmd 或者 PowerShell 输入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g now</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="登录"><a href="#登录" class="headerlink" title="- 登录"></a>- 登录</h4><p>安装完后再输入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now login</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>按提示输入邮箱（github绑定的邮箱）<br>然后会有一份邮件发到你邮箱，点击确认就行了。</p><h3 id="3-安装onepoint"><a href="#3-安装onepoint" class="headerlink" title="3.安装onepoint"></a>3.安装onepoint</h3><ol><li>下载源码：<a href="https://github.com/ukuq/onepoint/archive/master.zip">https://github.com/ukuq/onepoint/archive/master.zip</a>   </li><li>github仓库 <a href="https://github.com/ukuq/onepoint">https://github.com/ukuq/onepoint</a> </li><li> 修改配置文件 </li><li> 原作者对配置文件的说明：<a href="https://www.onesrc.cn/p/details-of-onepoint-configjson-configuration.html">https://www.onesrc.cn/p/details-of-onepoint-configjson-configuration.html</a>  （说明已经过期但仍可用）</li></ol><h4 id="4-报错"><a href="#4-报错" class="headerlink" title="4.报错"></a>4.报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">发布npm包</span><br><span class="line">注册并在本机添加npm用户（已注册可忽略）</span><br><span class="line">完成了上面的步骤之后，我们接下来要在www.npmjs.com注册一个账号，这个账号会被添加到npm本地的配置中，下面命令行将会使用到。</span><br><span class="line">&#x2F;&#x2F;前提已完成npm用户的注册</span><br><span class="line">$ npm adduser</span><br><span class="line">Username: your name</span><br><span class="line">Password: your password</span><br><span class="line">Email: yourmail@gmail.com</span><br><span class="line">如果出现以下错误，可能是你的npm版本太低，通过sudo npm install -g npm升级一下。</span><br><span class="line">npm WARN adduser Incorrect username or password</span><br><span class="line">npm WARN adduser You can reset your account by visiting:</span><br><span class="line">npm WARN adduser</span><br><span class="line">npm WARN adduser     http:&#x2F;&#x2F;admin.npmjs.org&#x2F;reset</span><br><span class="line">npm WARN adduser</span><br><span class="line">npm ERR! Error: forbidden may not mix password_sha and pbkdf2</span><br><span class="line">npm ERR! You may need to upgrade your version of npm:</span><br><span class="line">npm ERR!   npm install npm -g</span><br><span class="line">npm ERR! Note that this may need to be run as root&#x2F;admin (sudo, etc.)</span><br><span class="line">成功之后，npm会把认证信息存储在~&#x2F;.npmrc中，并且可以通过以下命令查看npm当前使用的用户：</span><br><span class="line">$ npm whoami</span><br><span class="line">以上完成之后，我们终于可以发布自己包了。</span><br></pre></td></tr></table></figure><p>1.npm adduser报错解决</p><p>2.报错：Registry returned 409 for PUT on <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a> -/user/org.couchdb.user</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm登录的时候，报错409.</span><br><span class="line">原因：镜像源切到了淘宝源，需要将淘宝源切回到npm.</span><br><span class="line">解决方法：nrm use npm.  (需要安装nrm) (实测不可用(当你使用淘宝镜像时))</span><br><span class="line">或者： </span><br><span class="line">npm login --registry http:&#x2F;&#x2F;registry.npmjs.org (实测可用(当你使用淘宝镜像时))</span><br><span class="line">npm publish --registry http:&#x2F;&#x2F;registry.npmjs.org</span><br></pre></td></tr></table></figure><p>3.</p>]]></content>
      
      
      <categories>
          
          <category> 网盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json-server入门</title>
      <link href="/archives/3e8060c8.html"/>
      <url>/archives/3e8060c8.html</url>
      
        <content type="html"><![CDATA[<h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><p>这是一个npm 的第三方包，可以通过下载安装； json-server 模拟了一个简单的数据库， 可以进行基础的接口数据测试</p><h3 id="安装json-server"><a href="#安装json-server" class="headerlink" title="安装json-server"></a>安装json-server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><h3 id="创建-db-json-文件"><a href="#创建-db-json-文件" class="headerlink" title="创建 db.json 文件"></a>创建 db.json 文件</h3><p>db.json 文件 作为数据库存储数据使用； 是一个对象； 对象中的每个字段相当于数据库中的每个数据表， 字段对应的值 是数据表中的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;student&quot;: [</span><br><span class="line">   &#123;</span><br><span class="line">     &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">     &quot;age&quot;: 18,</span><br><span class="line">     &quot;book&quot;: &quot;假如给我三天光明&quot;,</span><br><span class="line">     &quot;id&quot;: 1</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">     &quot;age&quot;: 50,</span><br><span class="line">     &quot;book&quot;: &quot;水浒传&quot;,</span><br><span class="line">     &quot;id&quot;: 2</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">     &quot;age&quot;: 20,</span><br><span class="line">     &quot;book&quot;: &quot;水浒传&quot;,</span><br><span class="line">     &quot;id&quot;: 3</span><br><span class="line">   &#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;list&quot;: [</span><br><span class="line">   &#123;</span><br><span class="line">     &quot;title&quot;: &quot;信息&quot;,</span><br><span class="line">     &quot;id&quot;: 1</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-json-server-服务"><a href="#启动-json-server-服务" class="headerlink" title="启动 json-server 服务"></a>启动 json-server 服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server --watch db.json </span><br></pre></td></tr></table></figure><p>成功开启后，会生成接口请求地址 开启成功的显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Read error has been fixed :)</span><br><span class="line">db.json has changed, reloading...</span><br><span class="line"></span><br><span class="line">Loading db.json</span><br><span class="line">Done</span><br><span class="line"></span><br><span class="line">Resources</span><br><span class="line">http:&#x2F;&#x2F;localhost:3000&#x2F;student</span><br><span class="line">http:&#x2F;&#x2F;localhost:3000&#x2F;list</span><br><span class="line"></span><br><span class="line">Home</span><br><span class="line">http:&#x2F;&#x2F;localhost:3000</span><br></pre></td></tr></table></figure><p>结果解析<br>// 这就是生成的请求接口地址<br> <a href="http://localhost:3000/student">http://localhost:3000/student</a><br> <a href="http://localhost:3000/list">http://localhost:3000/list</a><br>通过 psotman 进行模拟数据的请求操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; get 请求</span><br><span class="line">localhost:3000&#x2F;student  全部信息</span><br><span class="line">localhost:3000&#x2F;student&#x2F;id  单一一个信息</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; post请求</span><br><span class="line">localhost:3000&#x2F;student</span><br><span class="line">&#x2F;&#x2F; 添加body参数</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; put请求 更新全部数据(覆盖)</span><br><span class="line">localhost:3000&#x2F;student&#x2F;:id</span><br><span class="line">&#x2F;&#x2F; 添加body参数</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; patch请求 更新局部数据(更新具体的某个字段)</span><br><span class="line">localhost:3000&#x2F;student&#x2F;:id</span><br><span class="line">&#x2F;&#x2F; 添加body参数</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; delete请求</span><br><span class="line">localhost:3000&#x2F;student&#x2F;:id</span><br></pre></td></tr></table></figure><h3 id="其他高级用法"><a href="#其他高级用法" class="headerlink" title="其他高级用法"></a>其他高级用法</h3><p>json-server本身就是依赖express开发而来，可以进行深度定制。细节就不展开，具体详情请参考官网。</p><h4 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const jsonServer &#x3D; require(&#39;json-server&#39;)</span><br><span class="line">const server &#x3D; jsonServer.create()</span><br><span class="line">const router &#x3D; jsonServer.router(&#39;db.json&#39;)</span><br><span class="line">const middlewares &#x3D; jsonServer.defaults()</span><br><span class="line"></span><br><span class="line">server.use(middlewares)</span><br><span class="line"></span><br><span class="line">server.get(&#39;&#x2F;echo&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  res.jsonp(req.query)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.use(jsonServer.bodyParser)</span><br><span class="line">server.use((req, res, next) &#x3D;&gt; &#123;</span><br><span class="line">  if (req.method &#x3D;&#x3D;&#x3D; &#39;POST&#39;) &#123;</span><br><span class="line">    req.body.createdAt &#x3D; Date.now()</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.use(router)</span><br><span class="line">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;JSON Server is running&#39;)</span><br><span class="line">&#125;)</span><br><span class="line">自定义输出内容</span><br><span class="line">router.render &#x3D; (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  res.jsonp(&#123;</span><br><span class="line">    body: res.locals.data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 自定义用户校验 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const jsonServer &#x3D; require(&#39;json-server&#39;)</span><br><span class="line">const server &#x3D; jsonServer.create()</span><br><span class="line">const router &#x3D; jsonServer.router(&#39;db.json&#39;)</span><br><span class="line">const middlewares &#x3D; jsonServer.defaults()</span><br><span class="line"></span><br><span class="line">server.use(middlewares)</span><br><span class="line">server.use((req, res, next) &#x3D;&gt; &#123;</span><br><span class="line"> if (isAuthorized(req)) &#123; &#x2F;&#x2F; add your authorization logic here</span><br><span class="line">   next() &#x2F;&#x2F; continue to JSON Server router</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">   res.sendStatus(401)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.use(router)</span><br><span class="line">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;JSON Server is running&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql笔记</title>
      <link href="/archives/cff900a3.html"/>
      <url>/archives/cff900a3.html</url>
      
        <content type="html"><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h1><ol><li>数据库的基本概念</li></ol><ol start="2"><li><p>MySQL数据库软件</p><ol><li>安装</li><li>卸载</li><li>配置</li></ol></li><li><p>SQL</p></li></ol><h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><pre><code>1. 数据库的英文单词： DataBase 简称 ： DB2. 什么数据库？    * 用于存储和管理数据的仓库。3. 数据库的特点：    1. 持久化存储数据的。其实数据库就是一个文件系统    2. 方便存储和管理数据    3. 使用了统一的方式操作数据库 -- SQL</code></pre><p>​<br>​    4. 常见的数据库软件<br>​        * 参见《MySQL基础.pdf》</p><h1 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h1><pre><code>1. 安装    * 参见《MySQL基础.pdf》2. 卸载    1. 去mysql的安装目录找到my.ini文件        * 复制 datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;    2. 卸载MySQL    3. 删除C:/ProgramData目录下的MySQL文件夹。    3. 配置    * MySQL服务启动        1. 手动。        2. cmd--&gt; services.msc 打开服务的窗口        3. 使用管理员打开cmd            * net start mysql : 启动mysql的服务            * net stop mysql:关闭mysql服务    * MySQL登录        1. mysql -uroot -p密码        2. mysql -hip -uroot -p连接目标的密码        3. mysql --host=ip --user=root --password=连接目标的密码    * MySQL退出        1. exit        2. quit    * MySQL目录结构        1. MySQL安装目录：basedir=&quot;D:/develop/MySQL/&quot;            * 配置文件 my.ini        2. MySQL数据目录：datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;            * 几个概念                * 数据库：文件夹                * 表：文件                * 数据：数据</code></pre><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><pre><code>1.什么是SQL？    Structured Query Language：结构化查询语言    其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。    2.SQL通用语法    1. SQL 语句可以单行或多行书写，以分号结尾。    2. 可使用空格和缩进来增强语句的可读性。    3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。    4. 3 种注释        * 单行注释: -- 注释内容 或 # 注释内容(mysql 特有)         * 多行注释: /* 注释 */    3. SQL分类    1) DDL(Data Definition Language)数据定义语言        用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等    2) DML(Data Manipulation Language)数据操作语言        用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等    3) DQL(Data Query Language)数据查询语言        用来查询数据库中表的记录(数据)。关键字：select, where 等    4) DCL(Data Control Language)数据控制语言(了解)        用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</code></pre><h2 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h2><pre><code>1. 操作数据库：CRUD    1. C(Create):创建        * 创建数据库：            * create database 数据库名称;        * 创建数据库，判断不存在，再创建：            * create database if not exists 数据库名称;        * 创建数据库，并指定字符集            * create database 数据库名称 character set 字符集名;        * 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk            * create database if not exists db4 character set gbk;    2. R(Retrieve)：查询        * 查询所有数据库的名称:            * show databases;        * 查询某个数据库的字符集:查询某个数据库的创建语句            * show create database 数据库名称;    3. U(Update):修改        * 修改数据库的字符集            * alter database 数据库名称 character set 字符集名称;    4. D(Delete):删除        * 删除数据库            * drop database 数据库名称;        * 判断数据库存在，存在再删除            * drop database if exists 数据库名称;    5. 使用数据库        * 查询当前正在使用的数据库名称            * select database();        * 使用数据库            * use 数据库名称;2. 操作表    1. C(Create):创建        1. 语法：            create table 表名(                列名1 数据类型1,                列名2 数据类型2,                ....                列名n 数据类型n            );            * 注意：最后一列，不需要加逗号（,）            * 数据库类型：                1. int：整数类型                    * age int,                2. double:小数类型                    * score double(5,2)                3. date:日期，只包含年月日，yyyy-MM-dd                4. datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss                5. timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss                        * 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值                6. varchar：字符串                    * name varchar(20):姓名最大20个字符                    * zhangsan 8个字符  张三 2个字符        * 创建表            create table student(                id int,                name varchar(32),                age int ,                score double(4,1),                birthday date,                insert_time timestamp            );        * 复制表：            * create table 表名 like 被复制的表名;              2. R(Retrieve)：查询        * 查询某个数据库中所有的表名称            * show tables;        * 查询表结构            * desc 表名;    3. U(Update):修改        1. 修改表名            alter table 表名 rename to 新的表名;        2. 修改表的字符集            alter table 表名 character set 字符集名称;        3. 添加一列            alter table 表名 add 列名 数据类型;        4. 修改列名称 类型            alter table 表名 change 列名 新列别 新数据类型;            alter table 表名 modify 列名 新数据类型;        5. 删除列            alter table 表名 drop 列名;    4. D(Delete):删除        * drop table 表名;        * drop table  if exists 表名 ;</code></pre><ul><li>客户端图形化工具：SQLYog</li></ul><h2 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h2><pre><code>1. 添加数据：    * 语法：        * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);    * 注意：        1. 列名和值要一一对应。        2. 如果表名后，不定义列名，则默认给所有列添加值            insert into 表名 values(值1,值2,...值n);        3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来2. 删除数据：    * 语法：        * delete from 表名 [where 条件]    * 注意：        1. 如果不加条件，则删除表中所有记录。        2. 如果要删除所有记录            1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作            2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。3. 修改数据：    * 语法：        * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];    * 注意：        1. 如果不加任何条件，则会将表中所有记录全部修改。</code></pre><h2 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h2><pre><code>* select * from 表名;1. 语法：    select        字段列表    from        表名列表    where        条件列表    group by        分组字段    having        分组之后的条件    order by        排序    limit        分页限定2. 基础查询    1. 多个字段的查询        select 字段名1，字段名2... from 表名；        * 注意：            * 如果查询所有字段，则可以使用*来替代字段列表。    2. 去除重复：        * distinct    3. 计算列        * 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）        * ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null            * 表达式1：哪个字段需要判断是否为null            * 如果该字段为null后的替换值。    4. 起别名：        * as：as也可以省略3. 条件查询    1. where子句后跟条件    2. 运算符        * &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;        * BETWEEN...AND          * IN( 集合)         * LIKE：模糊查询            * 占位符：                * _:单个任意字符                * %：多个任意字符        * IS NULL          * and  或 &amp;&amp;        * or  或 ||         * not  或 !                    -- 查询年龄大于20岁            SELECT * FROM student WHERE age &gt; 20;                        SELECT * FROM student WHERE age &gt;= 20;                        -- 查询年龄等于20岁            SELECT * FROM student WHERE age = 20;                        -- 查询年龄不等于20岁            SELECT * FROM student WHERE age != 20;            SELECT * FROM student WHERE age &lt;&gt; 20;                        -- 查询年龄大于等于20 小于等于30                        SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;            SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;            SELECT * FROM student WHERE age BETWEEN 20 AND 30;                        -- 查询年龄22岁，18岁，25岁的信息            SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25            SELECT * FROM student WHERE age IN (22,18,25);                        -- 查询英语成绩为null            SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断                        SELECT * FROM student WHERE english IS NULL;                        -- 查询英语成绩不为null            SELECT * FROM student WHERE english  IS NOT NULL;            -- 查询姓马的有哪些？ like            SELECT * FROM student WHERE NAME LIKE &#39;马%&#39;;            -- 查询姓名第二个字是化的人                        SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;                        -- 查询姓名是3个字的人            SELECT * FROM student WHERE NAME LIKE &#39;___&#39;;</code></pre><p>​<br>​                – 查询姓名中包含德的人<br>​                SELECT * FROM student WHERE NAME LIKE ‘%德%’;</p><h1 id="今日内容-1"><a href="#今日内容-1" class="headerlink" title="今日内容"></a>今日内容</h1><pre><code>1. DQL:查询语句    1. 排序查询    2. 聚合函数    3. 分组查询    4. 分页查询2. 约束3. 多表之间的关系4. 范式5. 数据库的备份和还原</code></pre><h1 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h1><pre><code>1. 排序查询    * 语法：order by 子句        * order by 排序字段1 排序方式1 ，  排序字段2 排序方式2...    * 排序方式：        * ASC：升序，默认的。        * DESC：降序。    * 注意：        * 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。2. 聚合函数：将一列数据作为一个整体，进行纵向的计算。    1. count：计算个数        1. 一般选择非空的列：主键        2. count(*)    2. max：计算最大值    3. min：计算最小值    4. sum：计算和    5. avg：计算平均值    * 注意：聚合函数的计算，排除null值。        解决方案：            1. 选择不包含非空的列进行计算            2. IFNULL函数3. 分组查询:    1. 语法：group by 分组字段；    2. 注意：        1. 分组之后查询的字段：分组字段、聚合函数        2. where 和 having 的区别？            1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来            2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。        -- 按照性别分组。分别查询男、女同学的平均分        SELECT sex , AVG(math) FROM student GROUP BY sex;                -- 按照性别分组。分别查询男、女同学的平均分,人数                SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;                --  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组        SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;                --  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人        SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;                SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</code></pre><p>​<br>​    4. 分页查询<br>​        1. 语法：limit 开始的索引,每页查询的条数;<br>​        2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数<br>​            – 每页显示3条记录<br>​<br>​            SELECT * FROM student LIMIT 0,3; – 第1页<br>​<br>​            SELECT * FROM student LIMIT 3,3; – 第2页<br>​<br>​            SELECT * FROM student LIMIT 6,3; – 第3页<br>​<br>​        3. limit 是一个MySQL”方言”</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><pre><code>* 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    * 分类：    1. 主键约束：primary key    2. 非空约束：not null    3. 唯一约束：unique    4. 外键约束：foreign key* 非空约束：not null，某一列的值不能为null    1. 创建表时添加约束        CREATE TABLE stu(            id INT,            NAME VARCHAR(20) NOT NULL -- name为非空        );    2. 创建表完后，添加非空约束        ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;    3. 删除name的非空约束        ALTER TABLE stu MODIFY NAME VARCHAR(20);* 唯一约束：unique，某一列的值不能重复    1. 注意：        * 唯一约束可以有NULL值，但是只能有一条记录为null    2. 在创建表时，添加唯一约束        CREATE TABLE stu(            id INT,            phone_number VARCHAR(20) UNIQUE -- 手机号        );    3. 删除唯一约束        ALTER TABLE stu DROP INDEX phone_number;    4. 在表创建完后，添加唯一约束        ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;* 主键约束：primary key。    1. 注意：        1. 含义：非空且唯一        2. 一张表只能有一个字段为主键        3. 主键就是表中记录的唯一标识    2. 在创建表时，添加主键约束        create table stu(            id int primary key,-- 给id添加主键约束            name varchar(20)        );    3. 删除主键        -- 错误 alter table stu modify id int ;        ALTER TABLE stu DROP PRIMARY KEY;    4. 创建完表后，添加主键        ALTER TABLE stu MODIFY id INT PRIMARY KEY;    5. 自动增长：        1.  概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长        2. 在创建表时，添加主键约束，并且完成主键自增长        create table stu(            id int primary key auto_increment,-- 给id添加主键约束            name varchar(20)        );</code></pre><p>​<br>​            3. 删除自动增长<br>​            ALTER TABLE stu MODIFY id INT;<br>​            4. 添加自动增长<br>​            ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</p><pre><code>* 外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。    1. 在创建表时，可以添加外键        * 语法：            create table 表名(                ....                外键列                constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)            );    2. 删除外键        ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;    3. 创建表之后，添加外键        ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</code></pre><p>​<br>​        4. 级联操作<br>​            1. 添加级联操作<br>​                语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称<br>​                        FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;<br>​            2. 分类：<br>​                1. 级联更新：ON UPDATE CASCADE<br>​                2. 级联删除：ON DELETE CASCADE </p><h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><pre><code>1. 多表之间的关系    1. 分类：        1. 一对一(了解)：            * 如：人和身份证            * 分析：一个人只有一个身份证，一个身份证只能对应一个人        2. 一对多(多对一)：            * 如：部门和员工            * 分析：一个部门有多个员工，一个员工只能对应一个部门        3. 多对多：            * 如：学生和课程            * 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择    2. 实现关系：        1. 一对多(多对一)：            * 如：部门和员工            * 实现方式：在多的一方建立外键，指向一的一方的主键。        2. 多对多：            * 如：学生和课程            * 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键        3. 一对一(了解)：            * 如：人和身份证            * 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。    3. 案例        -- 创建旅游线路分类表 tab_category        -- cid 旅游线路分类主键，自动增长        -- cname 旅游线路分类名称非空，唯一，字符串 100        CREATE TABLE tab_category (            cid INT PRIMARY KEY AUTO_INCREMENT,            cname VARCHAR(100) NOT NULL UNIQUE        );                -- 创建旅游线路表 tab_route        /*        rid 旅游线路主键，自动增长        rname 旅游线路名称非空，唯一，字符串 100        price 价格        rdate 上架时间，日期类型        cid 外键，所属分类        */        CREATE TABLE tab_route(            rid INT PRIMARY KEY AUTO_INCREMENT,            rname VARCHAR(100) NOT NULL UNIQUE,            price DOUBLE,            rdate DATE,            cid INT,            FOREIGN KEY (cid) REFERENCES tab_category(cid)        );                /*创建用户表 tab_user        uid 用户主键，自增长        username 用户名长度 100，唯一，非空        password 密码长度 30，非空        name 真实姓名长度 100        birthday 生日        sex 性别，定长字符串 1        telephone 手机号，字符串 11        email 邮箱，字符串长度 100        */        CREATE TABLE tab_user (            uid INT PRIMARY KEY AUTO_INCREMENT,            username VARCHAR(100) UNIQUE NOT NULL,            PASSWORD VARCHAR(30) NOT NULL,            NAME VARCHAR(100),            birthday DATE,            sex CHAR(1) DEFAULT &#39;男&#39;,            telephone VARCHAR(11),            email VARCHAR(100)        );                /*        创建收藏表 tab_favorite        rid 旅游线路 id，外键        date 收藏时间        uid 用户 id，外键        rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次        */        CREATE TABLE tab_favorite (            rid INT, -- 线路id            DATE DATETIME,            uid INT, -- 用户id            -- 创建复合主键            PRIMARY KEY(rid,uid), -- 联合主键            FOREIGN KEY (rid) REFERENCES tab_route(rid),            FOREIGN KEY(uid) REFERENCES tab_user(uid)        );</code></pre><p>​<br>​    2. 数据库设计的范式<br>​        * 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求<br>​<br>​            设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。<br>​            目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。<br>​<br>​        * 分类：<br>​            1. 第一范式（1NF）：每一列都是不可分割的原子数据项<br>​            2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）<br>​                * 几个概念：<br>​                    1. 函数依赖：A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A<br>​                        例如：学号–&gt;姓名。  （学号，课程名称） –&gt; 分数<br>​                    2. 完全函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。<br>​                        例如：（学号，课程名称） –&gt; 分数<br>​                    3. 部分函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。<br>​                        例如：（学号，课程名称） – &gt; 姓名<br>​                    4. 传递函数依赖：A–&gt;B, B – &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A<br>​                        例如：学号–&gt;系名，系名–&gt;系主任<br>​                    5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码<br>​                        例如：该表中码为：（学号，课程名称）<br>​                        * 主属性：码属性组中的所有属性<br>​                        * 非主属性：除过码属性组的属性<br>​<br>​            3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</p><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><pre><code>1. 命令行：    * 语法：        * 备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径        * 还原：            1. 登录数据库            2. 创建数据库            3. 使用数据库            4. 执行文件。source 文件路径2. 图形化工具：</code></pre><h1 id="今日内容-2"><a href="#今日内容-2" class="headerlink" title="今日内容"></a>今日内容</h1><pre><code>1. 多表查询2. 事务3. DCL</code></pre><h2 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h2><pre><code>* 查询语法：    select        列名列表    from        表名列表    where....* 准备sql    # 创建部门表    CREATE TABLE dept(        id INT PRIMARY KEY AUTO_INCREMENT,        NAME VARCHAR(20)    );    INSERT INTO dept (NAME) VALUES (&#39;开发部&#39;),(&#39;市场部&#39;),(&#39;财务部&#39;);    # 创建员工表    CREATE TABLE emp (        id INT PRIMARY KEY AUTO_INCREMENT,        NAME VARCHAR(10),        gender CHAR(1), -- 性别        salary DOUBLE, -- 工资        join_date DATE, -- 入职日期        dept_id INT,        FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)    );    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;唐僧&#39;,&#39;男&#39;,9000,&#39;2008-08-08&#39;,2);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-07&#39;,3);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-14&#39;,1);* 笛卡尔积：    * 有两个集合A,B .取这两个集合的所有组成情况。    * 要完成多表查询，需要消除无用的数据* 多表查询的分类：    1. 内连接查询：        1. 隐式内连接：使用where条件消除无用数据            * 例子：            -- 查询所有员工信息和对应的部门信息            SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;                        -- 查询员工表的名称，性别。部门表的名称            SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.`dept_id` = dept.`id`;                        SELECT                 t1.name, -- 员工表的姓名                t1.gender,-- 员工表的性别                t2.name -- 部门表的名称            FROM                emp t1,                dept t2            WHERE                 t1.`dept_id` = t2.`id`;</code></pre><p>​<br>​            2. 显式内连接：<br>​                * 语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件<br>​                * 例如：<br>​                    * SELECT * FROM emp INNER JOIN dept ON emp.<code>dept_id</code> = dept.<code>id</code>;<br>​                    * SELECT * FROM emp JOIN dept ON emp.<code>dept_id</code> = dept.<code>id</code>;<br>​<br>​            3. 内连接查询：<br>​                1. 从哪些表中查询数据<br>​                2. 条件是什么<br>​                3. 查询哪些字段<br>​        2. 外链接查询：<br>​            1. 左外连接：<br>​                * 语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；<br>​                * 查询的是左表所有数据以及其交集部分。<br>​                * 例子：<br>​                    – 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称<br>​                    SELECT     t1.*,t2.<code>name</code> FROM emp t1 LEFT JOIN dept t2 ON t1.<code>dept_id</code> = t2.<code>id</code>;<br>​            2. 右外连接：<br>​                * 语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；<br>​                * 查询的是右表所有数据以及其交集部分。<br>​                * 例子：<br>​                    SELECT     * FROM dept t2 RIGHT JOIN emp t1 ON t1.<code>dept_id</code> = t2.<code>id</code>;<br>​        3. 子查询：<br>​            * 概念：查询中嵌套查询，称嵌套查询为子查询。<br>​                – 查询工资最高的员工信息<br>​                – 1 查询最高的工资是多少 9000<br>​                SELECT MAX(salary) FROM emp;<br>​<br>​                – 2 查询员工信息，并且工资等于9000的<br>​                SELECT * FROM emp WHERE emp.<code>salary</code> = 9000;<br>​<br>​                – 一条sql就完成这个操作。子查询<br>​                SELECT * FROM emp WHERE emp.<code>salary</code> = (SELECT MAX(salary) FROM emp);<br>​<br>​            * 子查询不同情况<br>​                1. 子查询的结果是单行单列的：<br>​                    * 子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =<br>​                    *<br>​                    – 查询员工工资小于平均工资的人<br>​                    SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);<br>​                2. 子查询的结果是多行单列的：<br>​                    * 子查询可以作为条件，使用运算符in来判断<br>​                    – 查询’财务部’和’市场部’所有的员工信息<br>​                    SELECT id FROM dept WHERE NAME = ‘财务部’ OR NAME = ‘市场部’;<br>​                    SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;<br>​                    – 子查询<br>​                    SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = ‘财务部’ OR NAME = ‘市场部’);<br>​<br>                3. 子查询的结果是多行多列的：<br>                    * 子查询可以作为一张虚拟表参与查询<br>                    – 查询员工入职日期是2011-11-11日之后的员工信息和部门信息<br>                    – 子查询<br>                    SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.<code>join_date</code> &gt; ‘2011-11-11’) t2<br>                    WHERE t1.id = t2.dept_id;</p><pre><code>                -- 普通内连接                SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` &gt;  &#39;2011-11-11&#39;    * 多表查询练习            -- 部门表            CREATE TABLE dept (              id INT PRIMARY KEY PRIMARY KEY, -- 部门id              dname VARCHAR(50), -- 部门名称              loc VARCHAR(50) -- 部门所在地            );                        -- 添加4个部门            INSERT INTO dept(id,dname,loc) VALUES             (10,&#39;教研部&#39;,&#39;北京&#39;),            (20,&#39;学工部&#39;,&#39;上海&#39;),            (30,&#39;销售部&#39;,&#39;广州&#39;),            (40,&#39;财务部&#39;,&#39;深圳&#39;);</code></pre><p>​<br>​<br>​                – 职务表，职务名称，职务描述<br>​                CREATE TABLE job (<br>​                  id INT PRIMARY KEY,<br>​                  jname VARCHAR(20),<br>​                  description VARCHAR(50)<br>​                );<br>​<br>​                – 添加4个职务<br>​                INSERT INTO job (id, jname, description) VALUES<br>​                (1, ‘董事长’, ‘管理整个公司，接单’),<br>​                (2, ‘经理’, ‘管理部门员工’),<br>​                (3, ‘销售员’, ‘向客人推销产品’),<br>​                (4, ‘文员’, ‘使用办公软件’);</p><p>​<br>​<br>​                – 员工表<br>​                CREATE TABLE emp (<br>​                  id INT PRIMARY KEY, – 员工id<br>​                  ename VARCHAR(50), – 员工姓名<br>​                  job_id INT, – 职务id<br>​                  mgr INT , – 上级领导<br>​                  joindate DATE, – 入职日期<br>​                  salary DECIMAL(7,2), – 工资<br>​                  bonus DECIMAL(7,2), – 奖金<br>​                  dept_id INT, – 所在部门编号<br>​                  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),<br>​                  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)<br>​                );<br>​<br>​                – 添加员工<br>​                INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES<br>​                (1001,’孙悟空’,4,1004,’2000-12-17’,’8000.00’,NULL,20),<br>​                (1002,’卢俊义’,3,1006,’2001-02-20’,’16000.00’,’3000.00’,30),<br>​                (1003,’林冲’,3,1006,’2001-02-22’,’12500.00’,’5000.00’,30),<br>​                (1004,’唐僧’,2,1009,’2001-04-02’,’29750.00’,NULL,20),<br>​                (1005,’李逵’,4,1006,’2001-09-28’,’12500.00’,’14000.00’,30),<br>​                (1006,’宋江’,2,1009,’2001-05-01’,’28500.00’,NULL,30),<br>​                (1007,’刘备’,2,1009,’2001-09-01’,’24500.00’,NULL,10),<br>​                (1008,’猪八戒’,4,1004,’2007-04-19’,’30000.00’,NULL,20),<br>​                (1009,’罗贯中’,1,NULL,’2001-11-17’,’50000.00’,NULL,10),<br>​                (1010,’吴用’,3,1006,’2001-09-08’,’15000.00’,’0.00’,30),<br>​                (1011,’沙僧’,4,1004,’2007-05-23’,’11000.00’,NULL,20),<br>​                (1012,’李逵’,4,1006,’2001-12-03’,’9500.00’,NULL,30),<br>​                (1013,’小白龙’,4,1004,’2001-12-03’,’30000.00’,NULL,20),<br>​                (1014,’关羽’,4,1007,’2002-01-23’,’13000.00’,NULL,10);</p><p>​<br>​<br>​                – 工资等级表<br>​                CREATE TABLE salarygrade (<br>​                  grade INT PRIMARY KEY,   – 级别<br>​                  losalary INT,  – 最低工资<br>​                  hisalary INT – 最高工资<br>​                );<br>​<br>​                – 添加5个工资等级<br>​                INSERT INTO salarygrade(grade,losalary,hisalary) VALUES<br>​                (1,7000,12000),<br>​                (2,12010,14000),<br>​                (3,14010,20000),<br>​                (4,20010,30000),<br>​                (5,30010,99990);<br>​<br>​                – 需求：<br>​<br>​                – 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述<br>​                /*<br>​                    分析：<br>​                        1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表<br>​                        2.查询条件 emp.job_id = job.id<br>​<br>​                */<br>​                SELECT<br>​                    t1.<code>id</code>, – 员工编号<br>​                    t1.<code>ename</code>, – 员工姓名<br>​                    t1.<code>salary</code>,– 工资<br>​                    t2.<code>jname</code>, – 职务名称<br>​                    t2.<code>description</code> – 职务描述<br>​                FROM<br>​                    emp t1, job t2<br>​                WHERE<br>​                    t1.<code>job_id</code> = t2.<code>id</code>;</p><p>​<br>​<br>​                – 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置<br>​                /*<br>​                    分析：<br>​                        1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept<br>​                        2. 条件： emp.job_id = job.id and emp.dept_id = dept.id<br>​                <em>/<br>​<br>​                SELECT<br>​                    t1.<code>id</code>, – 员工编号<br>​                    t1.<code>ename</code>, – 员工姓名<br>​                    t1.<code>salary</code>,– 工资<br>​                    t2.<code>jname</code>, – 职务名称<br>​                    t2.<code>description</code>, – 职务描述<br>​                    t3.<code>dname</code>, – 部门名称<br>​                    t3.<code>loc</code> – 部门位置<br>​                FROM<br>​                    emp t1, job t2,dept t3<br>​                WHERE<br>​                    t1.<code>job_id</code> = t2.<code>id</code> AND t1.<code>dept_id</code> = t3.<code>id</code>;<br>​<br>​                – 3.查询员工姓名，工资，工资等级<br>​                /</em><br>​                    分析：<br>​                        1.员工姓名，工资 emp  工资等级 salarygrade<br>​                        2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary<br>​                            emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary<br>​                <em>/<br>​                SELECT<br>​                    t1.ename ,<br>​                    t1.<code>salary</code>,<br>​                    t2.</em><br>​                FROM emp t1, salarygrade t2<br>​                WHERE t1.<code>salary</code> BETWEEN t2.<code>losalary</code> AND t2.<code>hisalary</code>;</p><p>​<br>​<br>​                – 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级<br>​                /*<br>​                    分析：<br>​                        1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade<br>​                        2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary<br>​<br>​                */<br>​                SELECT<br>​                    t1.<code>ename</code>,<br>​                    t1.<code>salary</code>,<br>​                    t2.<code>jname</code>,<br>​                    t2.<code>description</code>,<br>​                    t3.<code>dname</code>,<br>​                    t3.<code>loc</code>,<br>​                    t4.<code>grade</code><br>​                FROM<br>​                    emp t1,job t2,dept t3,salarygrade t4<br>​                WHERE<br>​                    t1.<code>job_id</code> = t2.<code>id</code><br>​                    AND t1.<code>dept_id</code> = t3.<code>id</code><br>​                    AND t1.<code>salary</code> BETWEEN t4.<code>losalary</code> AND t4.<code>hisalary</code>;</p><p>​<br>​<br>​                – 5.查询出部门编号、部门名称、部门位置、部门人数<br>​<br>​                /*<br>​                    分析：<br>​                        1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表<br>​                        2.使用分组查询。按照emp.dept_id完成分组，查询count(id)<br>​                        3.使用子查询将第2步的查询结果和dept表进行关联查询<br>​<br>​                */<br>​                SELECT<br>​                    t1.<code>id</code>,t1.<code>dname</code>,t1.<code>loc</code> , t2.total<br>​                FROM<br>​                    dept t1,<br>​                    (SELECT<br>​                        dept_id,COUNT(id) total<br>​                    FROM<br>​                        emp<br>​                    GROUP BY dept_id) t2<br>​                WHERE t1.<code>id</code> = t2.dept_id;</p><p>​<br>​                – 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询<br>​<br>​                /*<br>​                    分析：<br>​                        1.姓名 emp， 直接上级的姓名 emp<br>​                            * emp表的id 和 mgr 是自关联<br>​                        2.条件 emp.id = emp.mgr<br>​                        3.查询左表的所有数据，和 交集数据<br>​                            * 使用左外连接查询<br>​<br>​                <em>/<br>​                /</em><br>​                select<br>​                    t1.ename,<br>​                    t1.mgr,<br>​                    t2.<code>id</code>,<br>​                    t2.ename<br>​                from emp t1, emp t2<br>​                where t1.mgr = t2.<code>id</code>;<br>​<br>​                */<br>​<br>​                SELECT<br>​                    t1.ename,<br>​                    t1.mgr,<br>​                    t2.<code>id</code>,<br>​                    t2.<code>ename</code><br>​                FROM emp t1<br>​                LEFT JOIN emp t2<br>​                ON t1.<code>mgr</code> = t2.<code>id</code>;</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><pre><code>1. 事务的基本介绍    1. 概念：        *  如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。            2. 操作：        1. 开启事务： start transaction;        2. 回滚：rollback;        3. 提交：commit;    3. 例子：        CREATE TABLE account (            id INT PRIMARY KEY AUTO_INCREMENT,            NAME VARCHAR(10),            balance DOUBLE        );        -- 添加数据        INSERT INTO account (NAME, balance) VALUES (&#39;zhangsan&#39;, 1000), (&#39;lisi&#39;, 1000);</code></pre><p>​<br>​            SELECT * FROM account;<br>​            UPDATE account SET balance = 1000;<br>​            – 张三给李四转账 500 元<br>​<br>​            – 0. 开启事务<br>​            START TRANSACTION;<br>​            – 1. 张三账户 -500<br>​<br>​            UPDATE account SET balance = balance - 500 WHERE NAME = ‘zhangsan’;<br>​            – 2. 李四账户 +500<br>​            – 出错了…<br>​            UPDATE account SET balance = balance + 500 WHERE NAME = ‘lisi’;<br>​<br>​            – 发现执行没有问题，提交事务<br>​            COMMIT;<br>​<br>​            – 发现出问题了，回滚事务<br>​            ROLLBACK;<br>​        4. MySQL数据库中事务默认自动提交<br>​<br>            * 事务提交的两种方式：<br>                * 自动提交：<br>                    * mysql就是自动提交的<br>                    * 一条DML(增删改)语句会自动提交一次事务。<br>                * 手动提交：<br>                    * Oracle 数据库默认是手动提交事务<br>                    * 需要先开启事务，再提交<br>            * 修改事务的默认提交方式：<br>                * 查看事务的默认提交方式：SELECT @@autocommit; – 1 代表自动提交  0 代表手动提交<br>                * 修改默认提交方式： set @@autocommit = 0;</p><pre><code>2. 事务的四大特征：    1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。    2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。    3. 隔离性：多个事务之间。相互独立。    4. 一致性：事务操作前后，数据总量不变3. 事务的隔离级别（了解）    * 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。    * 存在问题：        1. 脏读：一个事务，读取到另一个事务中没有提交的数据        2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。        3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。    * 隔离级别：        1. read uncommitted：读未提交            * 产生的问题：脏读、不可重复读、幻读        2. read committed：读已提交 （Oracle）            * 产生的问题：不可重复读、幻读        3. repeatable read：可重复读 （MySQL默认）            * 产生的问题：幻读        4. serializable：串行化            * 可以解决所有的问题        * 注意：隔离级别从小到大安全性越来越高，但是效率越来越低        * 数据库查询隔离级别：            * select @@tx_isolation;        * 数据库设置隔离级别：            * set global transaction isolation level  级别字符串;    * 演示：        set global transaction isolation level read uncommitted;        start transaction;        -- 转账操作        update account set balance = balance - 500 where id = 1;        update account set balance = balance + 500 where id = 2;</code></pre><h2 id="DCL："><a href="#DCL：" class="headerlink" title="DCL："></a>DCL：</h2><pre><code>* SQL分类：    1. DDL：操作数据库和表    2. DML：增删改表中数据    3. DQL：查询表中数据    4. DCL：管理用户，授权* DBA：数据库管理员* DCL：管理用户，授权    1. 管理用户        1. 添加用户：            * 语法：CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;        2. 删除用户：            * 语法：DROP USER &#39;用户名&#39;@&#39;主机名&#39;;        3. 修改用户密码：                        UPDATE USER SET PASSWORD = PASSWORD(&#39;新密码&#39;) WHERE USER = &#39;用户名&#39;;            UPDATE USER SET PASSWORD = PASSWORD(&#39;abc&#39;) WHERE USER = &#39;lisi&#39;;                        SET PASSWORD FOR &#39;用户名&#39;@&#39;主机名&#39; = PASSWORD(&#39;新密码&#39;);            SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;123&#39;);            * mysql中忘记了root用户的密码？                1. cmd -- &gt; net stop mysql 停止mysql服务                    * 需要管理员运行该cmd                2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables                3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功                4. use mysql;                5. update user set password = password(&#39;你的新密码&#39;) where user = &#39;root&#39;;                6. 关闭两个窗口                7. 打开任务管理器，手动结束mysqld.exe 的进程                8. 启动mysql服务                9. 使用新密码登录。        4. 查询用户：            -- 1. 切换到mysql数据库            USE myql;            -- 2. 查询user表            SELECT * FROM USER;                        * 通配符： % 表示可以在任意主机使用用户登录数据库    2. 权限管理：        1. 查询权限：            -- 查询权限            SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;            SHOW GRANTS FOR &#39;lisi&#39;@&#39;%&#39;;        2. 授予权限：            -- 授予权限            grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;            -- 给张三用户授予所有权限，在任意数据库任意表上                        GRANT ALL ON *.* TO &#39;zhangsan&#39;@&#39;localhost&#39;;        3. 撤销权限：            -- 撤销权限：            revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;            REVOKE UPDATE ON db3.`account` FROM &#39;lisi&#39;@&#39;%&#39;;</code></pre><p>​                </p><h1 id="今日内容-3"><a href="#今日内容-3" class="headerlink" title="今日内容"></a>今日内容</h1><pre><code>1. JDBC基本概念2. 快速入门3. 对JDBC中各个接口和类详解</code></pre><h2 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h2><pre><code>1. 概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库    * JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。2. 快速入门：    * 步骤：        1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar            1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下            2.右键--&gt;Add As Library        2. 注册驱动        3. 获取数据库连接对象 Connection        4. 定义sql        5. 获取执行sql语句的对象 Statement        6. 执行sql，接受返回结果        7. 处理结果        8. 释放资源    * 代码实现：          //1. 导入驱动jar包        //2.注册驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //3.获取数据库连接对象        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db3&quot;, &quot;root&quot;, &quot;root&quot;);        //4.定义sql语句        String sql = &quot;update account set balance = 500 where id = 1&quot;;        //5.获取执行sql的对象 Statement        Statement stmt = conn.createStatement();        //6.执行sql        int count = stmt.executeUpdate(sql);        //7.处理结果        System.out.println(count);        //8.释放资源        stmt.close();        conn.close();3. 详解各个对象：    1. DriverManager：驱动管理对象        * 功能：            1. 注册驱动：告诉程序该使用哪一个数据库驱动jar                static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。                 写代码使用：  Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块                 static &#123;                        try &#123;                            java.sql.DriverManager.registerDriver(new Driver());                        &#125; catch (SQLException E) &#123;                            throw new RuntimeException(&quot;Can&#39;t register driver!&quot;);                        &#125;                    &#125;                注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。            2. 获取数据库连接：                * 方法：static Connection getConnection(String url, String user, String password)                 * 参数：                    * url：指定连接的路径                        * 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称                        * 例子：jdbc:mysql://localhost:3306/db3                        * 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称                    * user：用户名                    * password：密码     2. Connection：数据库连接对象        1. 功能：            1. 获取执行sql 的对象                * Statement createStatement()                * PreparedStatement prepareStatement(String sql)              2. 管理事务：                * 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务                * 提交事务：commit()                 * 回滚事务：rollback()     3. Statement：执行sql的对象        1. 执行sql            1. boolean execute(String sql) ：可以执行任意的sql 了解             2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句                * 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。            3. ResultSet executeQuery(String sql)  ：执行DQL（select)语句        2. 练习：            1. account表 添加一条记录            2. account表 修改记录            3. account表 删除一条记录            代码：                Statement stmt = null;                Connection conn = null;                try &#123;                    //1. 注册驱动                    Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                    //2. 定义sql                    String sql = &quot;insert into account values(null,&#39;王五&#39;,3000)&quot;;                    //3.获取Connection对象                    conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;, &quot;root&quot;, &quot;root&quot;);                    //4.获取执行sql的对象 Statement                    stmt = conn.createStatement();                    //5.执行sql                    int count = stmt.executeUpdate(sql);//影响的行数                    //6.处理结果                    System.out.println(count);                    if(count &gt; 0)&#123;                        System.out.println(&quot;添加成功！&quot;);                    &#125;else&#123;                        System.out.println(&quot;添加失败！&quot;);                    &#125;                        &#125; catch (ClassNotFoundException e) &#123;                    e.printStackTrace();                &#125; catch (SQLException e) &#123;                    e.printStackTrace();                &#125;finally &#123;                    //stmt.close();                    //7. 释放资源                    //避免空指针异常                    if(stmt != null)&#123;                        try &#123;                            stmt.close();                        &#125; catch (SQLException e) &#123;                            e.printStackTrace();                        &#125;                    &#125;                            if(conn != null)&#123;                        try &#123;                            conn.close();                        &#125; catch (SQLException e) &#123;                            e.printStackTrace();                        &#125;                    &#125;                &#125;                4. ResultSet：结果集对象,封装查询结果        * boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true        * getXxx(参数):获取数据            * Xxx：代表数据类型   如： int getInt() ,    String getString()            * 参数：                1. int：代表列的编号,从1开始   如： getString(1)                2. String：代表列名称。 如： getDouble(&quot;balance&quot;)                * 注意：            * 使用步骤：                1. 游标向下移动一行                2. 判断是否有数据                3. 获取数据               //循环判断游标是否是最后一行末尾。                while(rs.next())&#123;                    //获取数据                    //6.2 获取数据                    int id = rs.getInt(1);                    String name = rs.getString(&quot;name&quot;);                    double balance = rs.getDouble(3);                        System.out.println(id + &quot;---&quot; + name + &quot;---&quot; + balance);                &#125;        * 练习：            * 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。                1. 定义Emp类                2. 定义方法 public List&lt;Emp&gt; findAll()&#123;&#125;                3. 实现方法 select * from emp;                        5. PreparedStatement：执行sql的对象        1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题            1. 输入用户随便，输入密码：a&#39; or &#39;a&#39; = &#39;a            2. sql：select * from user where username = &#39;fhdsjkf&#39; and password = &#39;a&#39; or &#39;a&#39; = &#39;a&#39;         2. 解决sql注入问题：使用PreparedStatement对象来解决        3. 预编译的SQL：参数使用?作为占位符        4. 步骤：            1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar            2. 注册驱动            3. 获取数据库连接对象 Connection            4. 定义sql                * 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;            5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql)             6. 给？赋值：                * 方法： setXxx(参数1,参数2)                    * 参数1：？的位置编号 从1 开始                    * 参数2：？的值            7. 执行sql，接受返回结果，不需要传递sql语句            8. 处理结果            9. 释放资源        5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作            1. 可以防止SQL注入            2. 效率更高</code></pre><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><pre><code>* 目的：简化书写* 分析：    1. 注册驱动也抽取    2. 抽取一个方法获取连接对象        * 需求：不想传递参数（麻烦），还得保证工具类的通用性。        * 解决：配置文件            jdbc.properties                url=                user=                password=    3. 抽取一个方法释放资源* 代码实现：    public class JDBCUtils &#123;    private static String url;    private static String user;    private static String password;    private static String driver;    /**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */    static&#123;        //读取资源文件，获取值。        try &#123;            //1. 创建Properties集合类。            Properties pro = new Properties();            //获取src路径下的文件的方式---&gt;ClassLoader 类加载器            ClassLoader classLoader = JDBCUtils.class.getClassLoader();            URL res  = classLoader.getResource(&quot;jdbc.properties&quot;);            String path = res.getPath();            System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties            //2. 加载文件           // pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));            pro.load(new FileReader(path));            //3. 获取数据，赋值            url = pro.getProperty(&quot;url&quot;);            user = pro.getProperty(&quot;user&quot;);            password = pro.getProperty(&quot;password&quot;);            driver = pro.getProperty(&quot;driver&quot;);            //4. 注册驱动            Class.forName(driver);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;</code></pre><p>​<br>​        /**<br>​         * 获取连接<br>​         * @return 连接对象<br>​         <em>/<br>​        public static Connection getConnection() throws SQLException {<br>​<br>​            return DriverManager.getConnection(url, user, password);<br>​        }<br>​<br>​        /</em>*<br>​         * 释放资源<br>​         * @param stmt<br>​         * @param conn<br>​         */<br>​        public static void close(Statement stmt,Connection conn){<br>​            if( stmt != null){<br>​                try {<br>​                    stmt.close();<br>​                } catch (SQLException e) {<br>​                    e.printStackTrace();<br>​                }<br>​            }<br>​<br>​            if( conn != null){<br>​                try {<br>​                    conn.close();<br>​                } catch (SQLException e) {<br>​                    e.printStackTrace();<br>​                }<br>​            }<br>​        }</p><p>​<br>​        /**<br>​         * 释放资源<br>​         * @param stmt<br>​         * @param conn<br>​         */<br>​        public static void close(ResultSet rs,Statement stmt, Connection conn){<br>​            if( rs != null){<br>​                try {<br>​                    rs.close();<br>​                } catch (SQLException e) {<br>​                    e.printStackTrace();<br>​                }<br>​            }<br>​<br>​            if( stmt != null){<br>​                try {<br>​                    stmt.close();<br>​                } catch (SQLException e) {<br>​                    e.printStackTrace();<br>​                }<br>​            }<br>​<br>​            if( conn != null){<br>​                try {<br>​                    conn.close();<br>​                } catch (SQLException e) {<br>​                    e.printStackTrace();<br>​                }<br>​            }<br>​        }<br>​<br>​    }<br>​<br>​    * 练习：<br>​        * 需求：<br>​            1. 通过键盘录入用户名和密码<br>​            2. 判断用户是否登录成功<br>​                * select * from user where username = “” and password = “”;<br>​                * 如果这个sql有查询结果，则成功，反之，则失败<br>​<br>        * 步骤：<br>            1. 创建数据库表 user<br>                CREATE TABLE USER(<br>                    id INT PRIMARY KEY AUTO_INCREMENT,<br>                    username VARCHAR(32),<br>                    PASSWORD VARCHAR(32)</p><pre><code>            );            INSERT INTO USER VALUES(NULL,&#39;zhangsan&#39;,&#39;123&#39;);            INSERT INTO USER VALUES(NULL,&#39;lisi&#39;,&#39;234&#39;);        2. 代码实现：            public class JDBCDemo9 &#123;                public static void main(String[] args) &#123;                    //1.键盘录入，接受用户名和密码                    Scanner sc = new Scanner(System.in);                    System.out.println(&quot;请输入用户名：&quot;);                    String username = sc.nextLine();                    System.out.println(&quot;请输入密码：&quot;);                    String password = sc.nextLine();                    //2.调用方法                    boolean flag = new JDBCDemo9().login(username, password);                    //3.判断结果，输出不同语句                    if(flag)&#123;                        //登录成功                        System.out.println(&quot;登录成功！&quot;);                    &#125;else&#123;                        System.out.println(&quot;用户名或密码错误！&quot;);                    &#125;</code></pre><p>​<br>​                    }</p><p>​<br>​<br>​                    /**<br>​                     * 登录方法<br>​                     <em>/<br>​                    public boolean login(String username ,String password){<br>​                        if(username == null || password == null){<br>​                            return false;<br>​                        }<br>​                        //连接数据库判断是否登录成功<br>​                        Connection conn = null;<br>​                        Statement stmt =  null;<br>​                        ResultSet rs = null;<br>​                        //1.获取连接<br>​                        try {<br>​                            conn =  JDBCUtils.getConnection();<br>​                            //2.定义sql<br>​                            String sql = “select * from user where username = ‘“+username+”‘ and password = ‘“+password+”‘ “;<br>​                            //3.获取执行sql的对象<br>​                            stmt = conn.createStatement();<br>​                            //4.执行查询<br>​                            rs = stmt.executeQuery(sql);<br>​                            //5.判断<br>​                           /</em> if(rs.next()){//如果有下一行，则返回true<br>​                                return true;<br>​                            }else{<br>​                                return false;<br>​                            }*/<br>​                           return rs.next();//如果有下一行，则返回true<br>​<br>​                        } catch (SQLException e) {<br>​                            e.printStackTrace();<br>​                        }finally {<br>​                            JDBCUtils.close(rs,stmt,conn);<br>​                        }</p><p>​<br>​                        return false;<br>​                    }<br>​                }</p><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><pre><code>1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。2. 操作：    1. 开启事务    2. 提交事务    3. 回滚事务3. 使用Connection对象来管理事务    * 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务        * 在执行sql之前开启事务    * 提交事务：commit()         * 当所有sql都执行完提交事务    * 回滚事务：rollback()         * 在catch中回滚事务4. 代码：    public class JDBCDemo10 &#123;        public static void main(String[] args) &#123;            Connection conn = null;            PreparedStatement pstmt1 = null;            PreparedStatement pstmt2 = null;                try &#123;                //1.获取连接                conn = JDBCUtils.getConnection();                //开启事务                conn.setAutoCommit(false);                    //2.定义sql                //2.1 张三 - 500                String sql1 = &quot;update account set balance = balance - ? where id = ?&quot;;                //2.2 李四 + 500                String sql2 = &quot;update account set balance = balance + ? where id = ?&quot;;                //3.获取执行sql对象                pstmt1 = conn.prepareStatement(sql1);                pstmt2 = conn.prepareStatement(sql2);                //4. 设置参数                pstmt1.setDouble(1,500);                pstmt1.setInt(2,1);                    pstmt2.setDouble(1,500);                pstmt2.setInt(2,2);                //5.执行sql                pstmt1.executeUpdate();                // 手动制造异常                int i = 3/0;                    pstmt2.executeUpdate();                //提交事务                conn.commit();            &#125; catch (Exception e) &#123;                //事务回滚                try &#123;                    if(conn != null) &#123;                        conn.rollback();                    &#125;                &#125; catch (SQLException e1) &#123;                    e1.printStackTrace();                &#125;                e.printStackTrace();            &#125;finally &#123;                JDBCUtils.close(pstmt1,conn);                JDBCUtils.close(pstmt2,null);            &#125;</code></pre><p>​<br>​            }<br>​<br>​        }</p><h1 id="今日内容-4"><a href="#今日内容-4" class="headerlink" title="今日内容"></a>今日内容</h1><pre><code>1. 数据库连接池2. Spring JDBC : JDBC Template</code></pre><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><pre><code>1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。        当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。2. 好处：    1. 节约资源    2. 用户访问高效3. 实现：    1. 标准接口：DataSource   javax.sql包下的        1. 方法：            * 获取连接：getConnection()            * 归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接    2. 一般我们不去实现它，有数据库厂商来实现        1. C3P0：数据库连接池技术        2. Druid：数据库连接池实现技术，由阿里巴巴提供的4. C3P0：数据库连接池技术    * 步骤：        1. 导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，            * 不要忘记导入数据库驱动jar包        2. 定义配置文件：            * 名称： c3p0.properties 或者 c3p0-config.xml            * 路径：直接将文件放在src目录下即可。        3. 创建核心对象 数据库连接池对象 ComboPooledDataSource        4. 获取连接： getConnection    * 代码：         //1.创建数据库连接池对象        DataSource ds  = new ComboPooledDataSource();        //2. 获取连接对象        Connection conn = ds.getConnection();5. Druid：数据库连接池实现技术，由阿里巴巴提供的    1. 步骤：        1. 导入jar包 druid-1.0.9.jar        2. 定义配置文件：            * 是properties形式的            * 可以叫任意名称，可以放在任意目录下        3. 加载配置文件。Properties        4. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory        5. 获取连接：getConnection    * 代码：         //3.加载配置文件        Properties pro = new Properties();        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);        pro.load(is);        //4.获取连接池对象        DataSource ds = DruidDataSourceFactory.createDataSource(pro);        //5.获取连接        Connection conn = ds.getConnection();    2. 定义工具类        1. 定义一个类 JDBCUtils        2. 提供静态代码块加载配置文件，初始化连接池对象        3. 提供方法            1. 获取连接方法：通过数据库连接池获取连接            2. 释放资源            3. 获取连接池的方法    * 代码：        public class JDBCUtils &#123;            //1.定义成员变量 DataSource            private static DataSource ds ;                    static&#123;                try &#123;                    //1.加载配置文件                    Properties pro = new Properties();                    pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));                    //2.获取DataSource                    ds = DruidDataSourceFactory.createDataSource(pro);                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125; catch (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;                    /**             * 获取连接             */            public static Connection getConnection() throws SQLException &#123;                return ds.getConnection();            &#125;                    /**             * 释放资源             */            public static void close(Statement stmt,Connection conn)&#123;               /* if(stmt != null)&#123;                    try &#123;                        stmt.close();                    &#125; catch (SQLException e) &#123;                        e.printStackTrace();                    &#125;                &#125;                        if(conn != null)&#123;                    try &#123;                        conn.close();//归还连接                    &#125; catch (SQLException e) &#123;                        e.printStackTrace();                    &#125;                &#125;*/                       close(null,stmt,conn);            &#125;</code></pre><p>​<br>​                public static void close(ResultSet rs , Statement stmt, Connection conn){</p><p>​<br>​                    if(rs != null){<br>​                        try {<br>​                            rs.close();<br>​                        } catch (SQLException e) {<br>​                            e.printStackTrace();<br>​                        }<br>​                    }</p><p>​<br>​                    if(stmt != null){<br>​                        try {<br>​                            stmt.close();<br>​                        } catch (SQLException e) {<br>​                            e.printStackTrace();<br>​                        }<br>​                    }<br>​<br>​                    if(conn != null){<br>​                        try {<br>​                            conn.close();//归还连接<br>​                        } catch (SQLException e) {<br>​                            e.printStackTrace();<br>​                        }<br>​                    }<br>​                }<br>​<br>​                /**<br>​                 * 获取连接池方法<br>​                 */<br>​<br>​                public static DataSource getDataSource(){<br>​                    return  ds;<br>​                }<br>​<br>​            }</p><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><pre><code>* Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发* 步骤：    1. 导入jar包    2. 创建JdbcTemplate对象。依赖于数据源DataSource        * JdbcTemplate template = new JdbcTemplate(ds);    3. 调用JdbcTemplate的方法来完成CRUD的操作        * update():执行DML语句。增、删、改语句        * queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合            * 注意：这个方法查询的结果集长度只能是1        * queryForList():查询结果将结果集封装为list集合            * 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中        * query():查询结果，将结果封装为JavaBean对象            * query的参数：RowMapper                * 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)        * queryForObject：查询结果，将结果封装为对象            * 一般用于聚合函数的查询    4. 练习：        * 需求：            1. 修改1号数据的 salary 为 10000            2. 添加一条记录            3. 删除刚才添加的记录            4. 查询id为1的记录，将其封装为Map集合            5. 查询所有记录，将其封装为List            6. 查询所有记录，将其封装为Emp对象的List集合            7. 查询总记录数        * 代码：                        import cn.itcast.domain.Emp;            import cn.itcast.utils.JDBCUtils;            import org.junit.Test;            import org.springframework.jdbc.core.BeanPropertyRowMapper;            import org.springframework.jdbc.core.JdbcTemplate;            import org.springframework.jdbc.core.RowMapper;                        import java.sql.Date;            import java.sql.ResultSet;            import java.sql.SQLException;            import java.util.List;            import java.util.Map;                        public class JdbcTemplateDemo2 &#123;                            //Junit单元测试，可以让方法独立执行</code></pre><p>​<br>​                    //1. 获取JDBCTemplate对象<br>​                    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());<br>​                    /**<br>​                     * 1. 修改1号数据的 salary 为 10000<br>​                     <em>/<br>​                    @Test<br>​                    public void test1(){<br>​<br>​                        //2. 定义sql<br>​                        String sql = “update emp set salary = 10000 where id = 1001”;<br>​                        //3. 执行sql<br>​                        int count = template.update(sql);<br>​                        System.out.println(count);<br>​                    }<br>​<br>​                    /</em>*<br>​                     * 2. 添加一条记录<br>​                     <em>/<br>​                    @Test<br>​                    public void test2(){<br>​                        String sql = “insert into emp(id,ename,dept_id) values(?,?,?)”;<br>​                        int count = template.update(sql, 1015, “郭靖”, 10);<br>​                        System.out.println(count);<br>​<br>​                    }<br>​<br>​                    /</em>*<br>​                     * 3.删除刚才添加的记录<br>​                     <em>/<br>​                    @Test<br>​                    public void test3(){<br>​                        String sql = “delete from emp where id = ?”;<br>​                        int count = template.update(sql, 1015);<br>​                        System.out.println(count);<br>​                    }<br>​<br>                    /</em>*<br>                     * 4.查询id为1001的记录，将其封装为Map集合<br>                     * 注意：这个方法查询的结果集长度只能是1<br>                     */<br>                    @Test<br>                    public void test4(){<br>                        String sql = “select * from emp where id = ? or id = ?”;<br>                        Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002);<br>                        System.out.println(map);<br>                        //{id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20}</p><pre><code>                &#125;                            /**                 * 5. 查询所有记录，将其封装为List                 */                @Test                public void test5()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);                                for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;                        System.out.println(stringObjectMap);                    &#125;                &#125;                            /**                 * 6. 查询所有记录，将其封装为Emp对象的List集合                 */                            @Test                public void test6()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() &#123;                                    @Override                        public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;                            Emp emp = new Emp();                            int id = rs.getInt(&quot;id&quot;);                            String ename = rs.getString(&quot;ename&quot;);                            int job_id = rs.getInt(&quot;job_id&quot;);                            int mgr = rs.getInt(&quot;mgr&quot;);                            Date joindate = rs.getDate(&quot;joindate&quot;);                            double salary = rs.getDouble(&quot;salary&quot;);                            double bonus = rs.getDouble(&quot;bonus&quot;);                            int dept_id = rs.getInt(&quot;dept_id&quot;);                                        emp.setId(id);                            emp.setEname(ename);                            emp.setJob_id(job_id);                            emp.setMgr(mgr);                            emp.setJoindate(joindate);                            emp.setSalary(salary);                            emp.setBonus(bonus);                            emp.setDept_id(dept_id);                                        return emp;                        &#125;                    &#125;);</code></pre><p>​<br>​                        for (Emp emp : list) {<br>​                            System.out.println(emp);<br>​                        }<br>​                    }<br>​<br>​                    /**<br>​                     * 6. 查询所有记录，将其封装为Emp对象的List集合<br>​                     <em>/<br>​<br>​                    @Test<br>​                    public void test6_2(){<br>​                        String sql = “select * from emp”;<br>​                        List<Emp> list = template.query(sql, new BeanPropertyRowMapper<Emp>(Emp.class));<br>​                        for (Emp emp : list) {<br>​                            System.out.println(emp);<br>​                        }<br>​                    }<br>​<br>​                    /</em>*<br>​                     * 7. 查询总记录数<br>​                     */<br>​<br>​                    @Test<br>​                    public void test7(){<br>​                        String sql = “select count(id) from emp”;<br>​                        Long total = template.queryForObject(sql, Long.class);<br>​                        System.out.println(total);<br>​                    }<br>​<br>                }</p><p>​<br>​<br>​    </p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vmvare安装黑群晖</title>
      <link href="/archives/129c0639.html"/>
      <url>/archives/129c0639.html</url>
      
        <content type="html"><![CDATA[<p>原文来自日新博客 链接：<a href="https://www.rixin.info/a/4655.html">https://www.rixin.info/a/4655.html</a><br>现在电脑换代是一件很平常的事情，最近家里的老电脑太卡了，自己花钱在京东买了配件自己组装了一台新电脑，旧电脑又舍不得丢掉。我以前买过蜗牛星际主机安装了黑群晖，那么能不能使用那台旧电脑安装群晖NAS服务器呢？</p><p>因为自己的旧电脑的配置远远比蜗牛星际主机高，就是电脑的功耗会比蜗牛星际主机高很多，如果边用电脑边用群晖不是一举两得的事情吗？那么说干就干，行动起来！</p><p>虚拟机配置与服务器启动<br>首先，从我提供的网盘（<a href="http://vdisk.weibo.com/lc/39f7KFwkkWbuBEuil3P">http://vdisk.weibo.com/lc/39f7KFwkkWbuBEuil3P</a>  密码：T38Q ）中下载资料备用，几个文件的用途在稍后会进行说明：</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>选择打开刚刚下载的文件中的虚拟机文件，这里我使用的版本是Vmware14，运行在Windows10 1803系统上，理论来说12以上都可以安装。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>如果下载的文件没有问题，就可以成功安装Vmware软件，我打开Vmware后，点击“编辑虚拟机设置”。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>先进行虚拟机的硬件设置，在这里，将内存设置为2GB或者更高（我的旧电脑内存不是很高，以后增加一根内存条），处理器建议设置为双核。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>网络适配器设置为桥接模式，如果不设置为这个模式，那么同一路由器下的其他设备可能找不到该设备。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>点击下方的“添加”按钮，选择添加硬盘并按“下一步”。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>虚拟磁盘类型设置为SATA，方便系统识别，磁盘选择创建新的虚拟磁盘，如果你是作为真正的黑群晖来使用而不是体验，那么可以选择使用物理磁盘，这样能直接对磁盘进行读写访问，硬盘的容量还是很大的，我想大家都无所谓的，但是你的群晖的读写速度也是很重要的。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>硬盘容量以自己的想法进行设置，该磁盘将作为黑群晖的数据存储盘。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>完成设置后，还需要在菜单栏的“编辑”菜单下选择虚拟网络编辑器，设置桥接模式并且手动选择网卡，如果里面没有出现VMnet0，请检查目前是否是管理员权限运行Vmware，或者在Windows的网络连接中是否有禁用。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>启动虚拟机，到这里虚拟机设置和启动就结束，接下来，可以在浏览器中输入 find.synology.com来进入到黑群晖系统的管理界面。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>DSM系统安装和操作<br>使用任意较新版本的浏览器，输入find.synology.com以搜索目前网络环境下的群晖操作系统，如果找到，将出现这一界面，如果没有找到，尝试使用下一章节中所描述的Synology Assistant（群晖助手）软件。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>点击联机，跳转到DSM安装界面，点击手动安装，不可选择立即安装。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>手动安装系统文件选择先前下载的压缩包中的DSM_DS3617xs_15284这一个文件。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>需要注意的是，安装系统的时候，将清空所有的硬盘，但因为我们是虚拟磁盘所以没有关系。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>开始进行DSM的安装，时间需要2-3分钟。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>安装完成后，系统将自动重新启动，等待1-2分钟即可刷新浏览器尝试进入到DSM界面。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>如果成功的进入到DSM界面中，即可进行下一部分的操作。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>首先需要建立管理员账户，用于在操作DSM时候限制和授权一部分动作。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>一定要记住管理员账号，以后一直会用到，不要设置太简单了。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>更新维护这部分，选择手动安装，全程切记不要选择任何自动更新（后面会有说明）。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>QuickConnect是基于群晖官方服务器的一个功能，我们的群晖还未洗白因此无法使用，点击最下方的“跳过此步骤”。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>完成后点击“前往”即可进入到DSM界面中。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>现在，可以看到桌面了，点击“以后提醒我”。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>在初次运行的时候，会提示各个部分功能的用途，群晖DSM是一个十分强大的操作系统，值得慢慢去品味。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>我们要对磁盘进行初始化操作，这样才可以下一部使用，点击操作界面的左上角，选择“存储空间管理员”，打开界面后，点击“RAID Group”选项卡。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>因为我们只设置了一个虚拟硬盘，所以选择第一项“用于单个卷的RAID Group”，点击下一步。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>在存储空间类型这边选择Basic，这样磁盘将不做任何RAID阵列或者数据冗余操作。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>将左侧的硬盘标识使用鼠标拖动到右侧，即可建立RAID Group。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>完成后，即可看到当前已经建立了一个只有一块硬盘的RAID组。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>点击存储空间选项卡，建立存储空间。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>文件系统选择ext4，相比较Btrfs来说，ext4更为成熟并且在兼容性这一块也更好。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>点击DSM界面，桌面上的File Station，可以看到目前没有任何文件夹，我们需要手动配置一个文件夹用于文件共享。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>设置新的文件夹的基本信息，其他部分没有特殊需要直接点下一步即可。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>最后可以看到我们配置的文件夹的相关资讯，点击应用，文件建立就成功了。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>到这里，DSM这边的基本配置结束，可以进行愉快的探索体验了。</p><p>群晖助手的使用<br>群晖助手是配套的PC端的管理软件，在提供的压缩包内有这一个文件的安装包，安装过程这一块不做详述。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>打开该软件，将自动对当前网络下的NAS进行搜索，相比较网页搜索来说，群晖助手的搜索效果会有效，但是耗时也更长一点。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>搜索到目标后，我们可以看到当前配置的这一台NAS的名称，网卡MAC，DSM版本，IP地址等基本信息。如果使用群晖助手都没有搜索到NAS，暂时就没有其他办法了。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>右键或者Ctrl+D可以进入映射网络硬盘到当前电脑的操作，打开后输入先前设置的账户名和密码。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>如果正常，就可以看到先前配置的文件夹。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>设置映射的磁盘的盘符。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>完成后即可在电脑上看到该磁盘，相比较在资源管理器中使用添加网络驱动器功能来说，群晖助手添加的磁盘能显示盘符和当前容量，更接近本地磁盘体验。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>使用群晖助手，也可以登录到NAS。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>为什么不能更新<br>如果不小心点击更新到最新的DSM系统。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>首先，会进入到一般更新流程。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>之后，正常的进行重启。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>重启完毕后，打开浏览器，搜索当前网络下的群晖系统。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>结果就是找不到，所以不是正版最好不要升级。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>即使在群晖助手中也找不到相关的资讯。</p><p>旧电脑使用虚拟机，简单几步打造万元群晖NAS</p><p>因此，万万不可以点击更新。我们以后使用群晖的时候，也要时不时进行数据备份，建立快照，也能减少一些因为误操作导致的问题。</p><p>群晖对于我来说用途还是很多的，现在使用它来备份照片，存放电影音乐文件，有时候也用它来下载电影，然后在电视上看。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 群晖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaGC</title>
      <link href="/archives/eb5344dd.html"/>
      <url>/archives/eb5344dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaGC"><a href="#JavaGC" class="headerlink" title="JavaGC"></a>JavaGC</h1><p><strong>关键词：</strong><em>分代算法</em>* <strong>Minor GC</strong> <strong>Major GC</strong> <strong>Full GC   永久代 新生代 老年代   伊甸园（Eden）<br> 幸存者乐园（Survivor）终身颐养园（Tenured）</strong> <strong>System.gc()  Runtime.getRuntime().gc()</strong> </p><p> <strong>堆 等</strong></p><h2 id="1，内存是如何分配的；"><a href="#1，内存是如何分配的；" class="headerlink" title="1，内存是如何分配的；"></a>1，内存是如何分配的；</h2><p>在Java运行时的数据区里，JVM管理的内存区域分为几个模块：<br> 1，<strong>程序计数器</strong>（Program Counter Register）：程序计数器是一个比较小的内存区域，用于指示当前线程所执行的字节码执行到了第几行，可以理解为是当前线程的行号指示器。字节码解释器在工作时，会通过改变这个计数器的值来取下一条语句指令。<br> 每个程序计数器只用来记录一个线程的行号，所以它是线程私有（一个线程就有一个程序计数器）的。<br>  如果程序执行的是一个Java方法，则计数器记录的是正在执行的虚拟机字节码指令地址；如果正在执行的是一个本地（native，由C语言编写 完成）方法，则计数器的值为Undefined，由于程序计数器只是记录当前指令地址，所以不存在内存溢出的情况，因此，程序计数器也是所有JVM内存区 域中唯一一个没有定义OutOfMemoryError的区域。</p><p> 2，<strong>虚拟机栈</strong>（JVM Stack）：一个线程的每个方法在执行的同时，都会创建一个栈帧（Statck Frame），栈帧中存储的有局部变量表、操作站、动态链接、方法出口等，当方法被调用时，栈帧在JVM栈中入栈，当方法执行完成时，栈帧出栈。<br>  局部变量表中存储着方法的相关局部变量，包括各种基本数据类型，对象的引用，返回地址等。在局部变量表中，只有long和double类型会占用2个局部变量空间（Slot，对于32位机器，一个Slot就是32个bit），其它都是1个Slot。需要注意的是，局部变量表是在编译时就已经确定 好的，方法运行所需要分配的空间在栈帧中是完全确定的，在方法的生命周期内都不会改变。<br>  虚拟机栈中定义了两种异常，如果线程调用的栈深度大于虚拟机允许的最大深度，则抛出StatckOverFlowError（栈溢出）；不过多 数Java虚拟机都允许动态扩展虚拟机栈的大小(有少部分是固定长度的)，所以线程可以一直申请栈，知道内存不足，此时，会抛出 OutOfMemoryError（内存溢出）。<br>  每个线程对应着一个虚拟机栈，因此虚拟机栈也是线程私有的。</p><p> 3，<strong>本地方法栈</strong>（Native Method Statck）：本地方法栈在作用，运行机制，异常类型等方面都与虚拟机栈相同，唯一的区别是：虚拟机栈是执行Java方法的，而本地方法栈是用来执行native方法的，在很多虚拟机中（如Sun的JDK默认的HotSpot虚拟机），会将本地方法栈与虚拟机栈放在一起使用。<br> 本地方法栈也是线程私有的。</p><p> 4，<strong>堆区</strong>（Heap）：堆区是理解Java GC机制最重要的区域，没有之一。在JVM所管理的内存中，堆区是最大的一块，堆区也是Java GC机制所管理的主要内存区域，堆区由所有线程共享，在虚拟机启动时创建。堆区的存在是为了存储对象实例，原则上讲，所有的对象都在堆区上分配内存（不过现代技术里，也不是这么绝对的，也有栈上直接分配的）。<br> 一般的，根据Java虚拟机规范规定，堆内存需要在逻辑上是连续的（在物理上不需要），在实现时，可以是固定大小的，也可以是可扩展的，目前主流的虚拟机堆区都是可扩展的。如果在执行垃圾回收之后，仍没有足够的内存分配，也不能再扩展，将会抛出OutOfMemoryError:Java heap space异常。<br>  “Java内存分配机制”。</p><p> 5，<strong>方法区</strong>（Method Area）：在Java虚拟机规范中，将方法区作为堆的一个逻辑部分来对待，但事实上，方法区并不是堆（Non-Heap）；另外，不少人的博客中，将Java GC的分代收集机制分为3个代：青年代，老年代，永久代，这些作者将方法区定义为“永久代”，这是因为，对于之前的HotSpot Java虚拟机的实现方式中，将分代收集的思想扩展到了方法区，并将方法区设计成了永久代。不过，除HotSpot之外的多数虚拟机，并不将方法区当做永久代，HotSpot本身，也计划取消永久代。本文中，由于笔者主要使用Oracle JDK6.0，因此仍将使用永久代一词。<br> 方法区是各个线程共享的区域，用于存储已经被虚拟机加载的类信息（即加载类时需要加载的信息，包括版本、field、方法、接口等信息）、final常量、静态变量、编译器即时编译的代码等。<br> 方法区在物理上也不需要是连续的，可以选择固定大小或可扩展大小，并且方法区比堆还多了一个限制：可以选择是否执行垃圾收集。一般的，方法区上 执行的垃圾收集是很少的，这也是方法区被称为永久代的原因之一（HotSpot），但这也不代表着在方法区上完全没有垃圾收集，其上的垃圾收集主要是针对常量池的内存回收和对已加载类的卸载。<br> 在方法区上进行垃圾收集，条件苛刻而且相当困难，效果也不令人满意，所以一般不做太多考虑，可以留作以后进一步深入研究时使用。<br> 在方法区上定义了OutOfMemoryError:PermGen space异常，在内存不足时抛出。<br> 运行时常量池（Runtime Constant Pool）是方法区的一部分，用于存储编译期就生成的字面常量、符号引用、翻译出来的直接引用（符号引用就是编码是用字符串表示某个变量、接口的位置，直接引用就是根据符号引用翻译出来的地址，将在类链接阶段完成翻译）；运行时常量池除了存储编译期常量外，也可以存储在运行时间产生的常量（比如String类的intern()方法，作用是String维护了一个常量池，如果调用的字符“abc”已经在常量池中，则返回池中的字符串地址，否则，新建一个常量加入池中，并返回地址）。</p><p> 6，<strong>直接内存</strong>（Direct Memory）：直接内存并不是JVM管理的内存，可以这样理解，直接内存，就是 JVM以外的机器内存，比如，你有4G的内存，JVM占用了1G，则其余的3G就是直接内存，JDK中有一种基于通道（Channel）和缓冲区 （Buffer）的内存分配方式，将由C语言实现的native函数库分配在直接内存中，用存储在JVM堆中的DirectByteBuffer来引用。 由于直接内存收到本机器内存的限制，所以也可能出现OutOfMemoryError的异常。</p><h2 id="2，如何保证内存不被错误回收（即：哪些内存需要回收）；"><a href="#2，如何保证内存不被错误回收（即：哪些内存需要回收）；" class="headerlink" title="2，如何保证内存不被错误回收（即：哪些内存需要回收）；"></a>2，如何保证内存不被错误回收（即：哪些内存需要回收）；</h2><h2 id="3，在什么情况下执行GC以及执行GC的方式；"><a href="#3，在什么情况下执行GC以及执行GC的方式；" class="headerlink" title="3，在什么情况下执行GC以及执行GC的方式；"></a>3，在什么情况下执行GC以及执行GC的方式；</h2><h2 id="4，如何监控和优化GC机制。"><a href="#4，如何监控和优化GC机制。" class="headerlink" title="4，如何监控和优化GC机制。"></a>4，如何监控和优化GC机制。</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节缓冲流</title>
      <link href="/archives/2121e4d1.html"/>
      <url>/archives/2121e4d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-字节缓冲流"><a href="#1-字节缓冲流" class="headerlink" title="1.字节缓冲流"></a>1.字节缓冲流</h2><h3 id="1-1字节缓冲流构造方法【应用】"><a href="#1-1字节缓冲流构造方法【应用】" class="headerlink" title="1.1字节缓冲流构造方法【应用】"></a>1.1字节缓冲流构造方法【应用】</h3><ul><li><p>字节缓冲流介绍</p><ul><li><p>BufferOutputStream：该类实现缓冲输出流。 通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p></li><li><p>BufferedInputStream：创建BufferedInputStream将创建一个内部缓冲区数组。 当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p></li></ul></li><li><p>构造方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>BufferedOutputStream(OutputStream out)</td><td>创建字节缓冲输出流对象</td></tr><tr><td>BufferedInputStream(InputStream in)</td><td>创建字节缓冲输入流对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//字节缓冲输出流：BufferedOutputStream(OutputStream out)</span></span><br><span class="line"> </span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span>                                        FileOutputStream(<span class="string">&quot;myByteStream\\bos.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        bos.write(<span class="string">&quot;hello\r\n&quot;</span>.getBytes());</span><br><span class="line">        bos.write(<span class="string">&quot;world\r\n&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="comment">//字节缓冲输入流：BufferedInputStream(InputStream in)</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span>                                                          FileInputStream(<span class="string">&quot;myByteStream\\bos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节数据</span></span><br><span class="line"><span class="comment">//        int by;</span></span><br><span class="line"><span class="comment">//        while ((by=bis.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)by);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节数组数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2字节流复制视频【应用】"><a href="#1-2字节流复制视频【应用】" class="headerlink" title="1.2字节流复制视频【应用】"></a>1.2字节流复制视频【应用】</h3><ul><li><p>案例需求</p><p>把“E:\itcast\字节流复制图片.avi”复制到模块目录下的“字节流复制图片.avi”</p></li><li><p>实现步骤</p><ul><li><p>根据数据源创建字节输入流对象</p></li><li><p>根据目的地创建字节输出流对象</p></li><li><p>读写数据，复制视频</p></li><li><p>释放资源</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyAviDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制视频</span></span><br><span class="line"><span class="comment">//        method1();</span></span><br><span class="line"><span class="comment">//        method2();</span></span><br><span class="line"><span class="comment">//        method3();</span></span><br><span class="line">        method4();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span> + (endTime - startTime) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流一次读写一个字节数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流一次读写一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=bis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本字节流一次读写一个字节数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//E:\\itcast\\字节流复制图片.avi</span></span><br><span class="line">        <span class="comment">//模块目录下的 字节流复制图片.avi</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本字节流一次读写一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//E:\\itcast\\字节流复制图片.avi</span></span><br><span class="line">        <span class="comment">//模块目录下的 字节流复制图片.avi</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-字符流"><a href="#2-字符流" class="headerlink" title="2.字符流"></a>2.字符流</h2><h3 id="2-1为什么会出现字符流【理解】"><a href="#2-1为什么会出现字符流【理解】" class="headerlink" title="2.1为什么会出现字符流【理解】"></a>2.1为什么会出现字符流【理解】</h3><ul><li><p>字符流的介绍</p><p>由于字节流操作中文不是特别的方便，所以Java就提供字符流</p><p>字符流 = 字节流 + 编码表</p></li><li><p>中文的字节存储方式</p><p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p><p>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</p></li></ul><h3 id="2-2编码表【理解】"><a href="#2-2编码表【理解】" class="headerlink" title="2.2编码表【理解】"></a>2.2编码表【理解】</h3><ul><li><p>什么是字符集</p><p>是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等</p><p>l计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBXXX字符集、Unicode字符集等</p></li><li><p>常见的字符集</p><ul><li><p>ASCII字符集：</p><p>lASCII：是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符(回车键、退格、换行键等)和可显示字符(英文大小写字符、阿拉伯数字和西文符号) </p><p>基本的ASCII字符集，使用7位表示一个字符，共128字符。ASCII的扩展字符集使用8位表示一个字符，共256字符，方便支持欧洲常用字符。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等</p></li><li><p>GBXXX字符集：</p><p>GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等</p></li><li><p>Unicode字符集：</p><p>UTF-8编码：可以用来表示Unicode标准中任意字符，它是电子邮件、网页及其他存储或传送文字的应用 中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。它使用一至四个字节为每个字符编码</p><p>编码规则： </p><p>  128个US-ASCII字符，只需一个字节编码</p><p>  拉丁文等字符，需要二个字节编码</p><p>  大部分常用字（含中文），使用三个字节编码</p><p>  其他极少使用的Unicode辅助字符，使用四字节编码</p></li></ul></li></ul><h3 id="2-3字符串中的编码解码问题【应用】"><a href="#2-3字符串中的编码解码问题【应用】" class="headerlink" title="2.3字符串中的编码解码问题【应用】"></a>2.3字符串中的编码解码问题【应用】</h3><ul><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>byte[] getBytes()</td><td>使用平台的默认字符集将该 String编码为一系列字节</td></tr><tr><td>byte[] getBytes(String charsetName)</td><td>使用指定的字符集将该 String编码为一系列字节</td></tr><tr><td>String(byte[] bytes)</td><td>使用平台的默认字符集解码指定的字节数组来创建字符串</td></tr><tr><td>String(byte[] bytes, String charsetName)</td><td>通过指定的字符集解码指定的字节数组来创建字符串</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串</span></span><br><span class="line">        String s = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//byte[] bys = s.getBytes(); //[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="comment">//byte[] bys = s.getBytes(&quot;UTF-8&quot;); //[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = s.getBytes(<span class="string">&quot;GBK&quot;</span>); <span class="comment">//[-42, -48, -71, -6]</span></span><br><span class="line">        System.out.println(Arrays.toString(bys));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String ss = new String(bys);</span></span><br><span class="line">        <span class="comment">//String ss = new String(bys,&quot;UTF-8&quot;);</span></span><br><span class="line">        String ss = <span class="keyword">new</span> String(bys,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4字符流中的编码解码问题【应用】"><a href="#2-4字符流中的编码解码问题【应用】" class="headerlink" title="2.4字符流中的编码解码问题【应用】"></a>2.4字符流中的编码解码问题【应用】</h3><ul><li><p>字符流中和编码解码问题相关的两个类</p><ul><li><p>InputStreamReader：是从字节流到字符流的桥梁</p><p>​    它读取字节，并使用指定的编码将其解码为字符</p><p>​    它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</p></li><li><p>OutputStreamWriter：是从字符流到字节流的桥梁</p><p>​    是从字符流到字节流的桥梁，使用指定的编码将写入的字符编码为字节</p><p>​    它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</p></li></ul></li><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>InputStreamReader(InputStream in)</td><td>使用默认字符编码创建InputStreamReader对象</td></tr><tr><td>InputStreamReader(InputStream in,String chatset)</td><td>使用指定的字符编码创建InputStreamReader对象</td></tr><tr><td>OutputStreamWriter(OutputStream out)</td><td>使用默认字符编码创建OutputStreamWriter对象</td></tr><tr><td>OutputStreamWriter(OutputStream out,String charset)</td><td>使用指定的字符编码创建OutputStreamWriter对象</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConversionStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//OutputStreamWriter osw = new OutputStreamWriter(new                                             FileOutputStream(&quot;myCharStream\\osw.txt&quot;));</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span>                                              FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        osw.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new                                          FileInputStream(&quot;myCharStream\\osw.txt&quot;));</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span>                                                 FileInputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5字符流写数据的5种方式【应用】"><a href="#2-5字符流写数据的5种方式【应用】" class="headerlink" title="2.5字符流写数据的5种方式【应用】"></a>2.5字符流写数据的5种方式【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void   write(int c)</td><td>写一个字符</td></tr><tr><td>void   write(char[] cbuf)</td><td>写入一个字符数组</td></tr><tr><td>void write(char[] cbuf, int off, int len)</td><td>写入字符数组的一部分</td></tr><tr><td>void write(String str)</td><td>写一个字符串</td></tr><tr><td>void write(String str, int off, int len)</td><td>写一个字符串的一部分</td></tr></tbody></table></li><li><p>刷新和关闭的方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>flush()</td><td>刷新流，之后还可以继续写数据</td></tr><tr><td>close()</td><td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int c)：写一个字符</span></span><br><span class="line"><span class="comment">//        osw.write(97);</span></span><br><span class="line"><span class="comment">//        osw.write(98);</span></span><br><span class="line"><span class="comment">//        osw.write(99);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writ(char[] cbuf)：写入一个字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//        osw.write(chs);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(char[] cbuf, int off, int len)：写入字符数组的一部分</span></span><br><span class="line"><span class="comment">//        osw.write(chs, 0, chs.length);</span></span><br><span class="line"><span class="comment">//        osw.write(chs, 1, 3);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str)：写一个字符串</span></span><br><span class="line"><span class="comment">//        osw.write(&quot;abcde&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str, int off, int len)：写一个字符串的一部分</span></span><br><span class="line"><span class="comment">//        osw.write(&quot;abcde&quot;, 0, &quot;abcde&quot;.length());</span></span><br><span class="line">        osw.write(<span class="string">&quot;abcde&quot;</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6字符流读数据的2种方式【应用】"><a href="#2-6字符流读数据的2种方式【应用】" class="headerlink" title="2.6字符流读数据的2种方式【应用】"></a>2.6字符流读数据的2种方式【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>int read()</td><td>一次读一个字符数据</td></tr><tr><td>int read(char[] cbuf)</td><td>一次读一个字符数组数据</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   </span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read()：一次读一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=isr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read(char[] cbuf)：一次读一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-7字符流复制Java文件【应用】"><a href="#2-7字符流复制Java文件【应用】" class="headerlink" title="2.7字符流复制Java文件【应用】"></a>2.7字符流复制Java文件【应用】</h3><ul><li><p>案例需求</p><p>把模块目录下的“ConversionStreamDemo.java” 复制到模块目录下的“Copy.java”</p></li><li><p>实现步骤</p><ul><li>根据数据源创建字符输入流对象</li><li>根据目的地创建字符输出流对象</li><li>读写数据，复制文件</li><li>释放资源</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//一次读写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=isr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            osw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            osw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-8字符流复制Java文件改进版【应用】"><a href="#2-8字符流复制Java文件改进版【应用】" class="headerlink" title="2.8字符流复制Java文件改进版【应用】"></a>2.8字符流复制Java文件改进版【应用】</h3><ul><li><p>案例需求</p><p>使用便捷流对象，把模块目录下的“ConversionStreamDemo.java” 复制到模块目录下的“Copy.java”</p></li><li><p>实现步骤</p><ul><li><p>根据数据源创建字符输入流对象</p></li><li><p>根据目的地创建字符输出流对象</p></li><li><p>读写数据，复制文件</p></li><li><p>释放资源</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=fr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            fw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fr.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-9字符缓冲流【应用】"><a href="#2-9字符缓冲流【应用】" class="headerlink" title="2.9字符缓冲流【应用】"></a>2.9字符缓冲流【应用】</h3><ul><li><p>字符缓冲流介绍</p><ul><li><p>BufferedWriter：将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途</p></li><li><p>BufferedReader：从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。 默认值足够大，可用于大多数用途</p></li></ul></li><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>BufferedWriter(Writer out)</td><td>创建字符缓冲输出流对象</td></tr><tr><td>BufferedReader(Reader in)</td><td>创建字符缓冲输入流对象</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//BufferedWriter(Writer out)</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span>                                                            FileWriter(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line">        bw.write(<span class="string">&quot;hello\r\n&quot;</span>);</span><br><span class="line">        bw.write(<span class="string">&quot;world\r\n&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BufferedReader(Reader in)</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span>                                                           FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=br.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-10字符缓冲流复制Java文件【应用】"><a href="#2-10字符缓冲流复制Java文件【应用】" class="headerlink" title="2.10字符缓冲流复制Java文件【应用】"></a>2.10字符缓冲流复制Java文件【应用】</h3><ul><li><p>案例需求</p><p>把模块目录下的ConversionStreamDemo.java 复制到模块目录下的 Copy.java</p></li><li><p>实现步骤</p><ul><li>根据数据源创建字符缓冲输入流对象</li><li>根据目的地创建字符缓冲输出流对象</li><li>读写数据，复制文件，使用字符缓冲流特有功能实现</li><li>释放资源</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//一次读写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=br.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            bw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-11字符缓冲流特有功能【应用】"><a href="#2-11字符缓冲流特有功能【应用】" class="headerlink" title="2.11字符缓冲流特有功能【应用】"></a>2.11字符缓冲流特有功能【应用】</h3><ul><li><p>方法介绍</p><p>BufferedWriter：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void newLine()</td><td>写一行行分隔符，行分隔符字符串由系统属性定义</td></tr></tbody></table><p>BufferedReader:</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>String readLine()</td><td>读一行文字。 结果包含行的内容的字符串，不包括任何行终止字符如果流的结尾已经到达，则为null</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span>                                                          FileWriter(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;hello&quot;</span> + i);</span><br><span class="line">            <span class="comment">//bw.write(&quot;\r\n&quot;);</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span>                                                          FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-12字符缓冲流特有功能复制Java文件【应用】"><a href="#2-12字符缓冲流特有功能复制Java文件【应用】" class="headerlink" title="2.12字符缓冲流特有功能复制Java文件【应用】"></a>2.12字符缓冲流特有功能复制Java文件【应用】</h3><ul><li><p>案例需求</p><p>使用特有功能把模块目录下的ConversionStreamDemo.java 复制到模块目录下的 Copy.java</p></li><li><p>实现步骤</p><ul><li>根据数据源创建字符缓冲输入流对象</li><li>根据目的地创建字符缓冲输出流对象</li><li>读写数据，复制文件，使用字符缓冲流特有功能实现</li><li>释放资源</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//使用字符缓冲流特有功能实现</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-13IO流小结【理解】"><a href="#2-13IO流小结【理解】" class="headerlink" title="2.13IO流小结【理解】"></a>2.13IO流小结【理解】</h3><ul><li><p>字节流</p><p><img src="https://p.pstatp.com/origin/ffc700030716807bcccb" alt="IO小结字符流.jpg"></p></li><li><p>字符流</p><p><img src="https://p.pstatp.com/origin/ffc700030716807bcccb" alt="IO小结字符流.jpg"></p></li></ul><h3 id="3练习案例"><a href="#3练习案例" class="headerlink" title="3练习案例"></a>3练习案例</h3><h3 id="3-1集合到文件【应用】"><a href="#3-1集合到文件【应用】" class="headerlink" title="3.1集合到文件【应用】"></a>3.1集合到文件【应用】</h3><ul><li><p>案例需求</p><p>把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据是一个集合元素</p></li><li><p>实现步骤</p><ul><li>创建字符缓冲输入流对象</li><li>创建ArrayList集合对象</li><li>调用字符缓冲输入流对象的方法读数据</li><li>把读取到的字符串数据存储到集合中</li><li>释放资源</li><li>遍历集合</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxtToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据存储到集合中</span></span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(String s : array) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2文件到集合【应用】"><a href="#3-2文件到集合【应用】" class="headerlink" title="3.2文件到集合【应用】"></a>3.2文件到集合【应用】</h3><ul><li><p>案例需求</p><p>把ArrayList集合中的字符串数据写入到文本文件。要求：每一个字符串元素作为文件中的一行数据</p></li><li><p>实现步骤</p><ul><li>创建ArrayList集合</li><li>往集合中存储字符串元素</li><li>创建字符缓冲输出流对象</li><li>遍历集合，得到每一个字符串数据</li><li>调用字符缓冲输出流对象的方法写数据</li><li>释放资源</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中存储字符串元素</span></span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个字符串数据</span></span><br><span class="line">        <span class="keyword">for</span>(String s : array) &#123;</span><br><span class="line">            <span class="comment">//调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(s);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3点名器【应用】"><a href="#3-3点名器【应用】" class="headerlink" title="3.3点名器【应用】"></a>3.3点名器【应用】</h3><ul><li><p>案例需求</p><p>我有一个文件里面存储了班级同学的姓名，每一个姓名占一行，要求通过程序实现随点名器</p></li><li><p>实现步骤</p><ul><li>创建字符缓冲输入流对象</li><li>创建ArrayList集合对象</li><li>调用字符缓冲输入流对象的方法读数据</li><li>把读取到的字符串数据存储到集合中</li><li>释放资源</li><li>使用Random产生一个随机数，随机数的范围在：[0,集合的长度)</li><li>把第6步产生的随机数作为索引到ArrayList集合中获取值</li><li>把第7步得到的数据输出在控制台</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallNameDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\names.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据存储到集合中</span></span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Random产生一个随机数，随机数的范围在：[0,集合的长度)</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> index = r.nextInt(array.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第6步产生的随机数作为索引到ArrayList集合中获取值</span></span><br><span class="line">        String name = array.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第7步得到的数据输出在控制台</span></span><br><span class="line">        System.out.println(<span class="string">&quot;幸运者是：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-4集合到文件改进版【应用】"><a href="#3-4集合到文件改进版【应用】" class="headerlink" title="3.4集合到文件改进版【应用】"></a>3.4集合到文件改进版【应用】</h3><ul><li><p>案例需求</p><p>把ArrayList集合中的学生数据写入到文本文件。要求：每一个学生对象的数据作为文件中的一行数据<br>​        格式：学号,姓名,年龄,居住地    举例：itheima001,林青霞,30,西安</p></li><li><p>实现步骤</p><ul><li>定义学生类</li><li>创建ArrayList集合</li><li>创建学生对象</li><li>把学生对象添加到集合中</li><li>创建字符缓冲输出流对象</li><li>遍历集合，得到每一个学生对象</li><li>把学生对象的数据拼接成指定格式的字符串</li><li>调用字符缓冲输出流对象的方法写数据</li><li>释放资源</li></ul></li><li><p>代码实现</p><ul><li><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String sid, String name, <span class="keyword">int</span> age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(String sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>, <span class="string">&quot;武汉&quot;</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生对象添加到集合中</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\students.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            <span class="comment">//把学生对象的数据拼接成指定格式的字符串</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getSid()).append(<span class="string">&quot;,&quot;</span>).append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getAge()).append(<span class="string">&quot;,&quot;</span>).append(s.getAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-5文件到集合改进版【应用】"><a href="#3-5文件到集合改进版【应用】" class="headerlink" title="3.5文件到集合改进版【应用】"></a>3.5文件到集合改进版【应用】</h3><ul><li><p>案例需求</p><p>把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据是一个学生对象的成员变量值<br> 举例：itheima001,林青霞,30,西安</p></li><li><p>实现步骤</p><ul><li>定义学生类</li><li>创建字符缓冲输入流对象</li><li>创建ArrayList集合对象</li><li>调用字符缓冲输入流对象的方法读数据</li><li>把读取到的字符串数据用split()进行分割，得到一个字符串数组</li><li>创建学生对象</li><li>把字符串数组中的每一个元素取出来对应的赋值给学生对象的成员变量值</li><li>把学生对象添加到集合</li><li>释放资源</li><li>遍历集合</li></ul></li><li><p>代码实现</p><ul><li><p>学生类</p><p>​    同上</p></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\students.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据用split()进行分割，得到一个字符串数组</span></span><br><span class="line">            String[] strArray = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建学生对象</span></span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//把字符串数组中的每一个元素取出来对应的赋值给学生对象的成员变量值</span></span><br><span class="line">            <span class="comment">//itheima001,林青霞,30,西安</span></span><br><span class="line">            s.setSid(strArray[<span class="number">0</span>]);</span><br><span class="line">            s.setName(strArray[<span class="number">1</span>]);</span><br><span class="line">            s.setAge(Integer.parseInt(strArray[<span class="number">2</span>]));</span><br><span class="line">            s.setAddress(strArray[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把学生对象添加到集合</span></span><br><span class="line">            array.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            System.out.println(s.getSid() + <span class="string">&quot;,&quot;</span> + s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge() + <span class="string">&quot;,&quot;</span> + s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly官方安装文档和魔改教程</title>
      <link href="/archives/b45332b4.html"/>
      <url>/archives/b45332b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="魔改教程"><a href="#魔改教程" class="headerlink" title="魔改教程"></a>魔改教程</h1><h3 id="基于Butterfly主题的分类磁贴（未用）"><a href="#基于Butterfly主题的分类磁贴（未用）" class="headerlink" title="基于Butterfly主题的分类磁贴（未用）"></a>基于Butterfly主题的分类磁贴（未用）</h3><p><a href="https://akilar.top/posts/a9131002/">https://akilar.top/posts/a9131002/</a></p><h3 id="给博客添加B站同款动态banner（放弃版本兼容性不好）"><a href="#给博客添加B站同款动态banner（放弃版本兼容性不好）" class="headerlink" title="给博客添加B站同款动态banner（放弃版本兼容性不好）"></a>给博客添加B站同款动态banner（放弃版本兼容性不好）</h3><p><a href="https://akilar.top/posts/780a2cea/">https://akilar.top/posts/780a2cea/</a></p><h3 id="基于swiper的首页置顶轮播图-hexo-butterfly-swiper"><a href="#基于swiper的首页置顶轮播图-hexo-butterfly-swiper" class="headerlink" title="基于swiper的首页置顶轮播图 hexo-butterfly-swiper"></a>基于swiper的首页置顶轮播图 hexo-butterfly-swiper</h3><p><a href="https://akilar.top/posts/8e1264d1/">https://akilar.top/posts/8e1264d1/</a></p><h2 id="乐特无源码修改-（使用）"><a href="#乐特无源码修改-（使用）" class="headerlink" title="乐特无源码修改 （使用）"></a>乐特无源码修改 （使用）</h2><p><a href="https://butterfly.lete114.top/article/Butterfly-config.html">https://butterfly.lete114.top/article/Butterfly-config.html</a></p><h3 id="Hexo引入阿里矢量图标库（未做）"><a href="#Hexo引入阿里矢量图标库（未做）" class="headerlink" title="Hexo引入阿里矢量图标库（未做）"></a>Hexo引入阿里矢量图标库（未做）</h3><p><a href="https://akilar.top/posts/d2ebecef/">https://akilar.top/posts/d2ebecef/</a></p><h3 id="hls视频流"><a href="#hls视频流" class="headerlink" title="hls视频流"></a>hls视频流</h3><p><a href="https://butterfly.lete114.top/article/jsdelivr-video.html">https://butterfly.lete114.top/article/jsdelivr-video.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;hls.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;video id&#x3D;&quot;video&quot; preload muted loop autoplay style&#x3D;&quot;height: 100%;width: 100%;object-fit: cover;&quot;&gt;</span><br><span class="line">&lt;&#x2F;video&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var video &#x3D; document.getElementById(&#39;video&#39;);</span><br><span class="line">  var videoSrc &#x3D; &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;lete114&#x2F;CDN2&#x2F;video&#x2F;4.m3u8&#39;;</span><br><span class="line">  if (Hls.isSupported()) &#123;</span><br><span class="line">    var hls &#x3D; new Hls();</span><br><span class="line">    hls.loadSource(videoSrc);</span><br><span class="line">    hls.attachMedia(video);</span><br><span class="line">    hls.on(Hls.Events.MANIFEST_PARSED, function() &#123;</span><br><span class="line">      video.play();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><script src="https://cdn.jsdelivr.net/npm/hls.js"></script><video id="video" preload muted loop autoplay style="height: 100%;width: 100%;object-fit: cover;"></video><script>  var video = document.getElementById('video');  var videoSrc = 'https://cdn.jsdelivr.net/gh/lete114/CDN2/video/4.m3u8';  if (Hls.isSupported()) {    var hls = new Hls();    hls.loadSource(videoSrc);    hls.attachMedia(video);    hls.on(Hls.Events.MANIFEST_PARSED, function() {      video.play();    });  }</script><h1 id="hexo-插件"><a href="#hexo-插件" class="headerlink" title="hexo 插件"></a>hexo 插件</h1><h4 id="官方文档链接："><a href="#官方文档链接：" class="headerlink" title="官方文档链接："></a>官方文档链接：</h4><p><a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D">https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D</a></p><h4 id="魔改教程链接："><a href="#魔改教程链接：" class="headerlink" title="魔改教程链接："></a>魔改教程链接：</h4><p><a href="https://www.antmoe.com/posts/a811d614/index.html">https://www.antmoe.com/posts/a811d614/index.html</a></p><h4 id="live2d看板娘："><a href="#live2d看板娘：" class="headerlink" title="live2d看板娘："></a>live2d看板娘：</h4><p><a href="https://blog.csdn.net/qq_36239569/article/details/104104894">https://blog.csdn.net/qq_36239569/article/details/104104894</a></p><h4 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h4><p>1.安装douban(豆瓣)插件的话，hexo d 不能用来发布，应该用hexo deploy(deploy 和douban重复了)<br>2.常见hexo s报错很可能是yml语法不和规矩。可以通过YAML，YML在线编辑（校验）器 <a href="http://www.bejson.com/validators/yaml_editor/">http://www.bejson.com/validators/yaml_editor/</a> 检查一下<br>3。导航栏图标显示不全 对于Font Awesome 可以搜索inject: 在bottom: 下添加<br>    Font Awesome图标库引入js</p><pre><code>- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;&gt;</code></pre><p>原因：fa前缀在5.x版本中已弃用。新的默认设置是实心的fas样式和品牌的fab样式。<br>官网：<a href="https://fontawesome.dashgame.com/">https://fontawesome.dashgame.com/</a></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java抓取图片api</title>
      <link href="/archives/59e78b9c.html"/>
      <url>/archives/59e78b9c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HttpsURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://api.mtyqx.cn/api/random.php（二次元动漫）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//https://api.mtyqx.cn/tapi/random.php（二次元动漫）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getImg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入开始-----换行输入&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> ifDownload=<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入0选择位置下载&quot;</span>);</span><br><span class="line">        ifDownload=scan.nextInt();<span class="comment">//输入0选择位置下载</span></span><br><span class="line">        String inUrl;</span><br><span class="line">        String inImgFilTmpPath;</span><br><span class="line">        String inImgFilPath;</span><br><span class="line">        String downPath;</span><br><span class="line">        <span class="keyword">int</span> inNumber;</span><br><span class="line">        <span class="keyword">if</span>(ifDownload!=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;随机url api地址:&quot;</span>+<span class="string">&quot;https://api.ixiaowai.cn/mcapi/mcapi.php&quot;</span>); inUrl=<span class="string">&quot;https://tools.pursuewind.com/acgPic&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;随机url 存放地址:&quot;</span>+<span class="string">&quot;D:\\tmp\\img\\img-tmp.txt&quot;</span>);       inImgFilTmpPath=<span class="string">&quot;D:\\tmp\\img\\img-tmp.txt&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;随机url 去重存放地址:&quot;</span>+<span class="string">&quot;D:\\tmp\\img\\img.txt&quot;</span>);        inImgFilPath=<span class="string">&quot;D:\\tmp\\img\\img.txt&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;随机url 本地下载位置:&quot;</span>+<span class="string">&quot;D:\\\\tmp\\\\img\\\\acg&quot;</span>);      downPath=<span class="string">&quot;D:\\\\tmp\\\\img\\\\acg&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;下载数量&quot;</span>+<span class="string">&quot;50&quot;</span>);                                      inNumber=<span class="number">50</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;随机url api地址:&quot;</span>);      inUrl = scan.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;随机url 存放地址:&quot;</span>);      inImgFilTmpPath = scan.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;随机url 去重存放地址:&quot;</span>);   inImgFilPath = scan.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;随机url 本地下载位置:&quot;</span>);   downPath = scan.nextLine(); <span class="comment">//下载位置</span></span><br><span class="line">            System.out.print(<span class="string">&quot;下载数量&quot;</span>);               inNumber=scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;是否下载,默认不下载0，输入1下载:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> down_or=<span class="number">0</span>;</span><br><span class="line">        down_or=scan.nextInt();</span><br><span class="line">        <span class="comment">// FileOutputStream fos = new FileOutputStream(file,true);</span></span><br><span class="line">        <span class="comment">//void write(int b)：将指定的字节写入此文件输出流</span></span><br><span class="line">        <span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//existFile(inImgFilTmpPath,inImgFilPath,downPath);    //文件存在判断</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取链接开始&quot;</span>);</span><br><span class="line">        <span class="comment">//路径存在判断</span></span><br><span class="line">        existFile(inImgFilTmpPath,inImgFilPath,downPath);</span><br><span class="line">        <span class="comment">//得到图片链接</span></span><br><span class="line">        getImgUrl(inUrl,inImgFilTmpPath,inNumber);</span><br><span class="line">        delete(inImgFilTmpPath,inImgFilPath);<span class="comment">//去重</span></span><br><span class="line">        returnImg(inImgFilTmpPath,inImgFilPath );<span class="comment">//回写</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         if(down_or==1)&#123;</span></span><br><span class="line"><span class="comment">         download(downPath,inImgFilPath); //下载</span></span><br><span class="line"><span class="comment">         &#125;else&#123;</span></span><br><span class="line"><span class="comment">         System.out.println(&quot;本次未下载&quot;);</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        <span class="comment">//download(downPath,inImgFilPath);</span></span><br><span class="line">        newDownload(downPath,inImgFilPath);</span><br><span class="line">        <span class="keyword">long</span> end=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间:&quot;</span>+(end-start)/<span class="number">1000</span>+<span class="string">&quot;秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">( String inImgFilTmpPath,String inImgFilPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file=<span class="keyword">new</span> File(inImgFilPath);</span><br><span class="line">        FileOutputStream out1=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">false</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        FileReader reader = <span class="keyword">null</span>;</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//去重后数量</span></span><br><span class="line">        <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//去重数量</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        Set&lt;String&gt; e_types = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;本地去重开始&quot;</span>);</span><br><span class="line">        reader = <span class="keyword">new</span> FileReader(inImgFilTmpPath);<span class="comment">//必须是https协议</span></span><br><span class="line">        br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">        <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(e_types.add(str)) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bys = (str+<span class="string">&quot;\n&quot;</span>).getBytes();</span><br><span class="line">                out1.write(bys);</span><br><span class="line">                count ++;</span><br><span class="line">                <span class="comment">//System.err.println(str);</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        out1.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;本地去重完成 共 &quot;</span>+count+<span class="string">&quot;个&quot;</span>+<span class="string">&quot;去重 &quot;</span> +sum+<span class="string">&quot; 个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到图片链接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">getImgUrl</span><span class="params">(String inUrl,String inImgFilTmpPath,<span class="keyword">int</span> inNumber)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(inImgFilTmpPath);</span><br><span class="line">        <span class="keyword">int</span> badsum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=inNumber;i++) &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line">            String url1=inUrl;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(url1);</span><br><span class="line">                HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line">                <span class="comment">//解决403请求</span></span><br><span class="line">                conn.addRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/4.76&quot;</span>);</span><br><span class="line">                conn.setRequestMethod(<span class="string">&quot;GET&quot;</span>);<span class="comment">//请求方式</span></span><br><span class="line">                conn.setConnectTimeout(<span class="number">5</span>*<span class="number">1000</span>);<span class="comment">//连结过时时间</span></span><br><span class="line">                <span class="comment">//connection.setReadTimeout(5000); // 5秒 从主机读取数据的超时时间（单位：毫秒）</span></span><br><span class="line">                InputStream in = conn.getInputStream();</span><br><span class="line">                <span class="comment">//得到真实连接</span></span><br><span class="line">                <span class="comment">//System.out.println(conn.getURL());</span></span><br><span class="line">                <span class="comment">/**方法一</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                <span class="comment">//得到真实连接</span></span><br><span class="line">                String s=conn.getURL().toString()+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="comment">//转换byte[]写入</span></span><br><span class="line">                <span class="keyword">byte</span>[] bys = s.getBytes();</span><br><span class="line">                fos.write(bys);</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">                <span class="comment">//e.printStackTrace(); //可注释掉本行不显示错误信息</span></span><br><span class="line">                badsum++;</span><br><span class="line">                <span class="comment">//break;//错误时终止循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;bad链接 &quot;</span>+badsum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">returnImg</span><span class="params">(String inImgFilTmpPath,String inImgFilPath )</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//File file=new File(&quot;resource\\图片链接\\demo\\acg.txt&quot;);</span></span><br><span class="line">        <span class="comment">//FileInputStream fishuixie = new FileInputStream(file);</span></span><br><span class="line">        <span class="comment">//FileOutputStream foshuixie=new FileOutputStream(&quot;resource\\图片链接\\demo\\acg-tmp.txt&quot;,false);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;回写开始&quot;</span>);</span><br><span class="line">        File f =<span class="keyword">new</span> File(inImgFilPath);</span><br><span class="line">        BufferedReader lineNumberReader = <span class="keyword">null</span>;</span><br><span class="line">        StringBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lineNumberReader= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(f));</span><br><span class="line">            buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String  temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((temp=lineNumberReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                buffer.append(temp).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//System.out.println(buffer.toString());</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lineNumberReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        file =<span class="keyword">new</span> File(inImgFilTmpPath);</span><br><span class="line">        FileOutputStream fos =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            fos.write(buffer.toString().getBytes());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace(); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;回写完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件存在判断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">existFile</span><span class="params">( String inImgFilTmpPath,String inImgFilPath,String downPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file1=<span class="keyword">new</span> File(inImgFilTmpPath);</span><br><span class="line">        File file2=<span class="keyword">new</span> File(inImgFilPath);</span><br><span class="line">        File file3=<span class="keyword">new</span> File(downPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( file1.exists()&amp;&amp;file1.isFile())&#123;</span><br><span class="line">            <span class="comment">//System.out.println(&quot;文件已经存在---正常&quot;);</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件不存在---帮你创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( file2.exists()&amp;&amp;file2.isFile())&#123;</span><br><span class="line">            <span class="comment">//System.out.println(&quot;url存放文件已经存在---正常&quot;);</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            file2.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;url存放文件不存在---帮你创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( file3.exists()&amp;&amp;file3.isDirectory())&#123;</span><br><span class="line">            <span class="comment">//System.out.println(&quot;下载目录已经存在---正常&quot;);</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            file3.mkdirs();</span><br><span class="line">            System.out.println(<span class="string">&quot;下载目录不存在---帮你创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//图片下载时不下载已经存在的</span></span><br><span class="line">    <span class="comment">//默认值不用手动输入</span></span><br><span class="line">    <span class="comment">//下载进度条</span></span><br><span class="line">    <span class="comment">// 进度条粒度</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getNChar</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            builder.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">progressBar</span><span class="params">()</span><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        String finish;</span><br><span class="line">        String unFinish;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PROGRESS_SIZE = <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">int</span> BITE = <span class="number">2</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;Progress:&quot;</span>);</span><br><span class="line">        finish = getNChar(index / BITE, <span class="string">&#x27;█&#x27;</span>);</span><br><span class="line">        unFinish = getNChar(PROGRESS_SIZE - index / BITE, <span class="string">&#x27;─&#x27;</span>);</span><br><span class="line">        String target = String.format(<span class="string">&quot;%3d%%[%s%s]&quot;</span>, index, finish, unFinish);</span><br><span class="line">        System.out.print(target);</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            finish = getNChar(index / BITE, <span class="string">&#x27;█&#x27;</span>);</span><br><span class="line">            unFinish = getNChar(PROGRESS_SIZE - index / BITE, <span class="string">&#x27;─&#x27;</span>);</span><br><span class="line">            target = String.format(<span class="string">&quot;%3d%%├%s%s┤&quot;</span>, index, finish, unFinish);</span><br><span class="line">            System.out.print(getNChar(PROGRESS_SIZE + <span class="number">6</span>, <span class="string">&#x27;\b&#x27;</span>));</span><br><span class="line">            System.out.print(target);</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新的下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newDownload</span><span class="params">(String downPath,String inImgFilPath)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下载开始&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> sum_img_url=<span class="number">0</span>;<span class="comment">//本地已经有的图片 重复不用下载数量</span></span><br><span class="line">        <span class="comment">//int barNum=0;//进度条终点</span></span><br><span class="line">        <span class="comment">//int start_num=1;//实时进度 防止取0错误</span></span><br><span class="line">        <span class="comment">//int posNum=0;//百分进度判断位置</span></span><br><span class="line">        <span class="comment">//int hang=1;//当前行数</span></span><br><span class="line">        Path path = Paths.get(inImgFilPath);<span class="comment">//JDK7引入path</span></span><br><span class="line">        Charset charset = Charset.forName(<span class="string">&quot;US-ASCII&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader reader = Files.newBufferedReader(path, charset)) &#123;</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//System.out.println(line);</span></span><br><span class="line">                <span class="comment">//hang++;</span></span><br><span class="line">                DownloadNewFile(downPath,line);</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 start_num=(int) ((100*hang)/getFileLineNum(inImgFilPath));</span></span><br><span class="line"><span class="comment">                 if(start_num&lt;1)&#123;start_num=1;</span></span><br><span class="line"><span class="comment">                 &#125;else&#123; start_num=(int) ((100*hang)/getFileLineNum(inImgFilPath));</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">//bar_progress(start_num);//进度数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">            System.err.format(<span class="string">&quot;IOException: %s%n&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(int) ((100*hang)/getFileLineNum(inImgFilPath))</span></span><br><span class="line">        <span class="comment">// progressBar();</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//Java获取文件的行数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getFileLineNum</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Files.lines(Paths.get(filePath)).count();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//   新的实际下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DownloadNewFile</span><span class="params">(String filePath,String sImgUrl)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(sImgUrl); <span class="comment">//获取图片URL</span></span><br><span class="line">        URLConnection connection = url.openConnection(); <span class="comment">//获得连接</span></span><br><span class="line">        <span class="comment">//截取图片文件名</span></span><br><span class="line">        String fileName = sImgUrl.substring(sImgUrl.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>, sImgUrl.length());</span><br><span class="line">        <span class="comment">// 文件名里面可能有中文或者空格，所以这里要进行处理。但空格又会被URLEncoder转义为加号</span></span><br><span class="line">        String urlTail = URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">// 因此要将加号转化为UTF-8格式的%20</span></span><br><span class="line">        <span class="comment">//如果没图片格式是 文件名前缀</span></span><br><span class="line">        sImgUrl = sImgUrl.substring(<span class="number">0</span>, sImgUrl.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>) + urlTail.replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;\\%20&quot;</span>);</span><br><span class="line">        String suffix=connection.getContentType();<span class="comment">//文件名后缀</span></span><br><span class="line">        <span class="comment">//System.out.println(sImgUrl);</span></span><br><span class="line">        <span class="comment">//写出路径</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath + File.separator + fileName);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            <span class="comment">//System.out.println(&quot;文件存在&quot;);</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//URL url = new URL(sImgUrl); //获取图片URL</span></span><br><span class="line">                <span class="comment">//URLConnection connection = url.openConnection(); //获得连接</span></span><br><span class="line">                connection.setConnectTimeout(<span class="number">5</span> * <span class="number">1000</span>); <span class="comment">//设置5秒的响应时间</span></span><br><span class="line">                connection.addRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/4.76&quot;</span>);<span class="comment">//解决403请求</span></span><br><span class="line">                <span class="comment">//connection.getContentType();//获取文件类型</span></span><br><span class="line">                <span class="comment">//System.out.println(connection.getContentType());</span></span><br><span class="line">                InputStream in = connection.getInputStream();            <span class="comment">//获得输入流</span></span><br><span class="line">                BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(file));<span class="comment">//获得输出流</span></span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];<span class="comment">//1024改为8192 //构建缓冲区</span></span><br><span class="line">                <span class="keyword">int</span> size;</span><br><span class="line">                <span class="comment">//写入到文件</span></span><br><span class="line">                <span class="keyword">while</span> (-<span class="number">1</span> != (size = in.read(buf))) &#123; out.write(buf, <span class="number">0</span>, size);&#125;</span><br><span class="line">                out.close(); in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//数字bar</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bar_progress</span><span class="params">(<span class="keyword">int</span> start_num)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Progress:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (;start_num &lt;= <span class="number">100</span>; start_num++) &#123;</span><br><span class="line">            System.out.print(start_num + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">            <span class="comment">//Thread.sleep(50);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= String.valueOf(start_num).length(); j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\b&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**java 读取文本行数</span></span><br><span class="line"><span class="comment"> public static long getFileLineNum(String filePath) &#123;</span></span><br><span class="line"><span class="comment"> try &#123;</span></span><br><span class="line"><span class="comment"> return Files.lines(Paths.get(filePath)).count();</span></span><br><span class="line"><span class="comment"> &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment"> return -1;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">//下载图片  //https://blog.csdn.net/milletguo/article/details/80144290  这个方法好</span></span><br><span class="line"><span class="comment">public static void  download(String downPath,String inImgFilPath) throws IOException, InterruptedException &#123;</span></span><br><span class="line"><span class="comment">    System.out.println(&quot;下载开始&quot;);</span></span><br><span class="line"><span class="comment">    int sum_img_url=0;//本地已经有的图片 重复不用下载数量</span></span><br><span class="line"><span class="comment">    int barNum=0;//进度条终点</span></span><br><span class="line"><span class="comment">    //File file = new File(&quot;D:\\新建文本文档.txt&quot;);// Text文件</span></span><br><span class="line"><span class="comment">    FileReader file=new FileReader(inImgFilPath);//获取文件流</span></span><br><span class="line"><span class="comment">    BufferedReader br = new BufferedReader(file);// 构造一个BufferedReader类来读取文件</span></span><br><span class="line"><span class="comment">    //图片下载时不下载已经存在的</span></span><br><span class="line"><span class="comment">    //File downloadedpath=new File(downPath);</span></span><br><span class="line"><span class="comment">    //File[] array = downloadedpath.listFiles(); //图片下载时不下载已经存在的</span></span><br><span class="line"><span class="comment">    String  sImgUrl=null;</span></span><br><span class="line"><span class="comment">    while ((sImgUrl = br.readLine()) != null) &#123;// 使用readLine方法，一次读一行</span></span><br><span class="line"><span class="comment">        downImages(downPath,sImgUrl);//图片链接不存在下载</span></span><br><span class="line"><span class="comment">        //barNum++;//进度条长度</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    br.close();;</span></span><br><span class="line"><span class="comment">    progressBar();</span></span><br><span class="line"><span class="comment">    System.out.println(&quot;本地下载结束-重复不用下载数量:&quot;+sum_img_url);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    //实际下载图片方法 此处的 sImgUrl 为从文件读取出来的 此处的downPath 对应downPath</span></span><br><span class="line"><span class="comment">    private static void downImages(String filePath, String sImgUrl) &#123;</span></span><br><span class="line"><span class="comment">        //截取图片文件名</span></span><br><span class="line"><span class="comment">        String fileName=sImgUrl.substring(sImgUrl.lastIndexOf(&#x27;/&#x27;)+1,sImgUrl.length());</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            // 文件名里面可能有中文或者空格，所以这里要进行处理。但空格又会被URLEncoder转义为加号</span></span><br><span class="line"><span class="comment">            String urlTail = URLEncoder.encode(fileName, &quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">            // 因此要将加号转化为UTF-8格式的%20</span></span><br><span class="line"><span class="comment">            sImgUrl = sImgUrl.substring(0, sImgUrl.lastIndexOf(&#x27;/&#x27;) + 1) + urlTail.replaceAll(&quot;\\+&quot;, &quot;\\%20&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (UnsupportedEncodingException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //写出路径</span></span><br><span class="line"><span class="comment">        File file=new File(filePath+File.separator+fileName);</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            //获取图片URL</span></span><br><span class="line"><span class="comment">            URL url=new URL(sImgUrl);</span></span><br><span class="line"><span class="comment">            //获得连接</span></span><br><span class="line"><span class="comment">            URLConnection connection=url.openConnection();</span></span><br><span class="line"><span class="comment">            //设置5秒的响应时间</span></span><br><span class="line"><span class="comment">            connection.setConnectTimeout(5*1000);</span></span><br><span class="line"><span class="comment">            //解决403请求</span></span><br><span class="line"><span class="comment">            connection.addRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/4.76&quot;);</span></span><br><span class="line"><span class="comment">            //获得输入流</span></span><br><span class="line"><span class="comment">            InputStream in=connection.getInputStream();</span></span><br><span class="line"><span class="comment">            //获得输出流</span></span><br><span class="line"><span class="comment">            BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(file));</span></span><br><span class="line"><span class="comment">            //构建缓冲区</span></span><br><span class="line"><span class="comment">            byte[] buf=new byte[8192];//1024改为8192</span></span><br><span class="line"><span class="comment">            int size;</span></span><br><span class="line"><span class="comment">            //写入到文件</span></span><br><span class="line"><span class="comment">            while (-1!=(size=in.read(buf))) &#123;</span></span><br><span class="line"><span class="comment">                out.write(buf,0,size);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            out.close();</span></span><br><span class="line"><span class="comment">            in.close();</span></span><br><span class="line"><span class="comment">        &#125;  catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读取目录下的所有文件</title>
      <link href="/archives/a7831c90.html"/>
      <url>/archives/a7831c90.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python读取目录下的所有文件"><a href="#Python读取目录下的所有文件" class="headerlink" title="Python读取目录下的所有文件"></a>Python读取目录下的所有文件</h1><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">path &#x3D; &quot;D:&#x2F;DATA&quot; #文件夹目录</span><br><span class="line">files&#x3D; os.listdir(path) #得到文件夹下的所有文件名称</span><br><span class="line">s &#x3D; []</span><br><span class="line">for file in files: #遍历文件夹</span><br><span class="line">    if not os.path.isdir(file): #判断是否是文件夹，不是文件夹才打开</span><br><span class="line">        f &#x3D; open(path+&quot;&#x2F;&quot;+file); #打开文件</span><br><span class="line">        iter_f &#x3D; iter(f); #创建迭代器</span><br><span class="line">        str &#x3D; &quot;&quot;</span><br><span class="line">        for line in iter_f: #遍历文件，一行行遍历，读取文本</span><br><span class="line">            str &#x3D; str + line</span><br><span class="line">        s.append(str) #每个文件的文本存到list中</span><br><span class="line">print(s) #打印结果</span><br></pre></td></tr></table></figure><p>]()</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH安装</title>
      <link href="/archives/7de3978f.html"/>
      <url>/archives/7de3978f.html</url>
      
        <content type="html"><![CDATA[<h1 id="CDH安装脚本"><a href="#CDH安装脚本" class="headerlink" title="CDH安装脚本"></a>CDH安装脚本</h1><ul><li><a href="https://gitee.com/hcsystem/cdh_install">脚本来源</a></li></ul><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>CDH安装 集群/单机 安装脚本</li><li>系统： CentOS-7.7 最小化安装</li><li>脚本依赖软件包 perl, expect psmisc(需要联网安装或挂载完整光盘镜像配置本地安装源)</li><li>JDK MySQL 为二进制方式安装</li></ul><h4 id="单机安装教程"><a href="#单机安装教程" class="headerlink" title="单机安装教程"></a>单机安装教程</h4><p>1.配置主机信息 host:主机名 ip:安装集群节点IP 一一对应</p><pre><code>host=node01ip=192.168.0.71</code></pre><p>2.配置 hosts 解析</p><pre><code>echo &quot;$ip    $host&quot;  &gt;&gt; /etc/hosts</code></pre><p>3.更改主机名</p><pre><code>hostnamectl set-hostname $host</code></pre><p>4.配置秘钥登录(替换 $root_pass 为节点root密码)</p><pre><code>bash &lt;(curl -sSL https://gitee.com/hcsystem/cdh_install/raw/master/ssh_key_copy.sh) &quot;$ip&quot; root $root_pass</code></pre><p>5.安装</p><pre><code>bash &lt;(curl -sSL https://gitee.com/hcsystem/cdh_install/raw/master/install_cdh.sh) server</code></pre><h4 id="集群安装教程"><a href="#集群安装教程" class="headerlink" title="集群安装教程"></a>集群安装教程</h4><ul><li>步骤 1, 2, 3, 4, 在所有节点执行</li><li>步骤 5 在 server 节点执行</li><li>步骤 6 在 agent 节点执行 </li></ul><p>1.配置主机信息 host:主机名 ip:安装集群节点IP 一一对应</p><pre><code>ip=(192.168.0.71 192.168.0.72 192.168.0.73)host=(node01 node02 node03)</code></pre><p>2.配置 hosts 解析</p><pre><code># 获取本机IPhost_if=$(ip route | grep default | cut -d&#39; &#39; -f5)host_ip=$(ip a | grep &quot;$host_if$&quot; | awk &#39;&#123;print $2&#125;&#39; | cut -d&#39;/&#39; -f1)# 配置集群 hosts 解析let SER_LEN=$&#123;#ip[@]&#125;-1if [ &quot;$(echo $&#123;ip[@]&#125; | grep $host_ip)&quot; ]; then    sed -i &#39;3,$d&#39; /etc/hosts    echo -e &quot;\n# cdh cluster&quot; &gt;&gt; /etc/hosts    for ((i=0;i&lt;=$SER_LEN;i++)); do        echo &quot;$&#123;ip[i]&#125;  $&#123;host[i]&#125;&quot; &gt;&gt; /etc/hosts    donefi</code></pre><p>3.更改主机名</p><pre><code>for ((i=0;i&lt;=$SER_LEN;i++)); do    if [ &quot;$&#123;ip[i]&#125;&quot; == &quot;$host_ip&quot; ]; then        hostnamectl set-hostname $&#123;host[i]&#125;    fidone</code></pre><p>4.配置秘钥登录(替换 $root_pass 为节点root密码)</p><pre><code>SERVERS=&quot;$&#123;ip[@]&#125;&quot;bash &lt;(curl -sSL https://gitee.com/hcsystem/cdh_install/raw/master/ssh_key_copy.sh) &quot;$SERVERS&quot; root $root_pass</code></pre><p>5.server 节点安装</p><pre><code>bash &lt;(curl -sSL https://gitee.com/hcsystem/cdh_install/raw/master/install_cdh.sh) server</code></pre><p>6.agent 节点安装(192.168.0.71 为 server 节点IP)</p><pre><code>bash &lt;(curl -sSL https://gitee.com/hcsystem/cdh_install/raw/master/install_cdh.sh) agent 192.168.0.71</code></pre><h4 id="配置服务管理"><a href="#配置服务管理" class="headerlink" title="配置服务管理"></a>配置服务管理</h4><blockquote><p>cloudera-scm-server</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">cat &gt; /usr/lib/systemd/system/cloudera-scm-server.service  &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=cloudera-scm-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutSec=10</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/cloudera-manager/cm-5.16.1/etc/init.d/cloudera-scm-server start</span><br><span class="line">Environment=&quot;JAVA_HOME=$JAVA_HOME&quot; &quot;JRE_HOME=$JRE_HOME&quot;</span><br><span class="line">ExecStop=/opt/cloudera-manager/cm-5.16.1/etc/init.d/cloudera-scm-server stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 跟随系统启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable cloudera-scm-server.service</span><br></pre></td></tr></table></figure><blockquote><p>cloudera-scm-agent</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">cat &gt; /usr/lib/systemd/system/cloudera-scm-agent.service  &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=cloudera-scm-agent</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutSec=10</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/cloudera-manager/cm-5.16.1/etc/init.d/cloudera-scm-agent start</span><br><span class="line">Environment=&quot;JAVA_HOME=$JAVA_HOME&quot; &quot;JRE_HOME=$JRE_HOME&quot;</span><br><span class="line">ExecStop=/opt/cloudera-manager/cm-5.16.1/etc/init.d/cloudera-scm-agent stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 跟随系统启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable cloudera-scm-agent.service</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/yy3b2007com/p/9962099.html">CDH 安装</a></li><li><a href="https://www.cnblogs.com/gxc2015/p/9273301.html">Cloudera Management Service 各个角色迁移</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流-Properties集合</title>
      <link href="/archives/609ba213.html"/>
      <url>/archives/609ba213.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-IO流案例"><a href="#1-IO流案例" class="headerlink" title="1.IO流案例"></a>1.IO流案例</h2><h3 id="1-1集合到文件数据排序改进版【应用】"><a href="#1-1集合到文件数据排序改进版【应用】" class="headerlink" title="1.1集合到文件数据排序改进版【应用】"></a>1.1集合到文件数据排序改进版【应用】</h3><h4 id="1-1-1案例需求"><a href="#1-1-1案例需求" class="headerlink" title="1.1.1案例需求"></a>1.1.1案例需求</h4><ul><li>键盘录入5个学生信息(姓名,语文成绩,数学成绩,英语成绩)。要求按照成绩总分从高到低写入文本文件</li><li>格式：姓名,语文成绩,数学成绩,英语成绩  举例：林青霞,98,99,100</li></ul><h4 id="1-1-2分析步骤"><a href="#1-1-2分析步骤" class="headerlink" title="1.1.2分析步骤"></a>1.1.2分析步骤</h4><ol><li>定义学生类</li><li>创建TreeSet集合，通过比较器排序进行排序</li><li>键盘录入学生数据</li><li>创建学生对象，把键盘录入的数据对应赋值给学生对象的成员变量</li><li>把学生对象添加到TreeSet集合</li><li>创建字符缓冲输出流对象</li><li>遍历集合，得到每一个学生对象</li><li>把学生对象的数据拼接成指定格式的字符串</li><li>调用字符缓冲输出流对象的方法写数据</li><li>释放资源</li></ol><h4 id="1-1-3代码实现"><a href="#1-1-3代码实现" class="headerlink" title="1.1.3代码实现"></a>1.1.3代码实现</h4><ul><li><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 语文成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chinese;</span><br><span class="line">    <span class="comment">// 数学成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> math;</span><br><span class="line">    <span class="comment">// 英语成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> chinese, <span class="keyword">int</span> math, <span class="keyword">int</span> english)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">        <span class="keyword">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChinese</span><span class="params">(<span class="keyword">int</span> chinese)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnglish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnglish</span><span class="params">(<span class="keyword">int</span> english)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.chinese + <span class="keyword">this</span>.math + <span class="keyword">this</span>.english;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetToFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合，通过比较器排序进行排序</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//成绩总分从高到低</span></span><br><span class="line">                <span class="keyword">int</span> num = s2.getSum() - s1.getSum();</span><br><span class="line">                <span class="comment">//次要条件</span></span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getChinese() - s2.getChinese() : num;</span><br><span class="line">                <span class="keyword">int</span> num3 = num2 == <span class="number">0</span> ? s1.getMath() - s2.getMath() : num2;</span><br><span class="line">                <span class="keyword">int</span> num4 = num3 == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num3;</span><br><span class="line">                <span class="keyword">return</span> num4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入学生数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个学生信息：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;语文成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> chinese = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;数学成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> math = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;英语成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> english = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建学生对象，把键盘录入的数据对应赋值给学生对象的成员变量</span></span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setChinese(chinese);</span><br><span class="line">            s.setMath(math);</span><br><span class="line">            s.setEnglish(english);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把学生对象添加到TreeSet集合</span></span><br><span class="line">            ts.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\ts.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            <span class="comment">//把学生对象的数据拼接成指定格式的字符串</span></span><br><span class="line">            <span class="comment">//格式：姓名,语文成绩,数学成绩,英语成绩</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getChinese()).append(<span class="string">&quot;,&quot;</span>).append(s.getMath()).append(<span class="string">&quot;,&quot;</span>).append(s.getEnglish()).append(<span class="string">&quot;,&quot;</span>).append(s.getSum());</span><br><span class="line"></span><br><span class="line"><span class="comment">//            调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2复制单级文件夹【应用】"><a href="#1-2复制单级文件夹【应用】" class="headerlink" title="1.2复制单级文件夹【应用】"></a>1.2复制单级文件夹【应用】</h3><h4 id="1-2-1案例需求"><a href="#1-2-1案例需求" class="headerlink" title="1.2.1案例需求"></a>1.2.1案例需求</h4><ul><li>把“E:\itcast”这个文件夹复制到模块目录下</li></ul><h4 id="1-2-2分析步骤"><a href="#1-2-2分析步骤" class="headerlink" title="1.2.2分析步骤"></a>1.2.2分析步骤</h4><ol><li><p>创建数据源目录File对象，路径是E:\itcast</p></li><li><p>获取数据源目录File对象的名称</p></li><li><p>创建目的地目录File对象，路径由(模块名+第2步获取的名称)组成</p></li><li><p>判断第3步创建的File是否存在，如果不存在，就创建</p></li><li><p>获取数据源目录下所有文件的File数组</p></li><li><p>遍历File数组，得到每一个File对象，该File对象，其实就是数据源文件</p></li><li><p>获取数据源文件File对象的名称</p></li><li><p>创建目的地文件File对象，路径由(目的地目录+第7步获取的名称)组成</p></li><li><p>复制文件</p><p>​    由于不清楚数据源目录下的文件都是什么类型的，所以采用字节流复制文件</p><p>​    采用参数为File的构造方法</p></li></ol><h4 id="1-2-3代码实现"><a href="#1-2-3代码实现" class="headerlink" title="1.2.3代码实现"></a>1.2.3代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFolderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源目录File对象，路径是E:\\itcast</span></span><br><span class="line">        File srcFolder = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录File对象的名称(itcast)</span></span><br><span class="line">        String srcFolderName = srcFolder.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地目录File对象，路径名是模块名+itcast组成(myCharStream\\itcast)</span></span><br><span class="line">        File destFolder = <span class="keyword">new</span> File(<span class="string">&quot;myCharStream&quot;</span>,srcFolderName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断目的地目录对应的File是否存在，如果不存在，就创建</span></span><br><span class="line">        <span class="keyword">if</span>(!destFolder.exists()) &#123;</span><br><span class="line">            destFolder.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录下所有文件的File数组</span></span><br><span class="line">        File[] listFiles = srcFolder.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历File数组，得到每一个File对象，该File对象，其实就是数据源文件</span></span><br><span class="line">        <span class="keyword">for</span>(File srcFile : listFiles) &#123;</span><br><span class="line">            <span class="comment">//数据源文件：E:\\itcast\\mn.jpg</span></span><br><span class="line">            <span class="comment">//获取数据源文件File对象的名称(mn.jpg)</span></span><br><span class="line">            String srcFileName = srcFile.getName();</span><br><span class="line">            <span class="comment">//创建目的地文件File对象，路径名是目的地目录+mn.jpg组成(myCharStream\\itcast\\mn.jpg)</span></span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destFolder,srcFileName);</span><br><span class="line">            <span class="comment">//复制文件</span></span><br><span class="line">            copyFile(srcFile,destFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3复制多级文件夹【应用】"><a href="#1-3复制多级文件夹【应用】" class="headerlink" title="1.3复制多级文件夹【应用】"></a>1.3复制多级文件夹【应用】</h3><h4 id="1-3-1案例需求"><a href="#1-3-1案例需求" class="headerlink" title="1.3.1案例需求"></a>1.3.1案例需求</h4><ul><li>把“E:\itcast”这个文件夹复制到 F盘目录下</li></ul><h4 id="1-3-2分析步骤"><a href="#1-3-2分析步骤" class="headerlink" title="1.3.2分析步骤"></a>1.3.2分析步骤</h4><ol><li><p>创建数据源File对象，路径是E:\itcast</p></li><li><p>创建目的地File对象，路径是F:\</p></li><li><p>写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</p></li><li><p>判断数据源File是否是文件</p><p>​    是文件：直接复制，用字节流</p><p>​    不是文件：</p><pre><code>      在目的地下创建该目录      遍历获取该目录下的所有文件的File数组，得到每一个File对象      回到3继续(递归)</code></pre></li></ol><h4 id="1-3-3代码实现"><a href="#1-3-3代码实现" class="headerlink" title="1.3.3代码实现"></a>1.3.3代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFoldersDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源File对象，路径是E:\\itcast</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//创建目的地File对象，路径是F:\\</span></span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">&quot;F:\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</span></span><br><span class="line">        copyFolder(srcFile,destFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFolder</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//判断数据源File是否是目录</span></span><br><span class="line">        <span class="keyword">if</span>(srcFile.isDirectory()) &#123;</span><br><span class="line">            <span class="comment">//在目的地下创建和数据源File名称一样的目录</span></span><br><span class="line">            String srcFileName = srcFile.getName();</span><br><span class="line">            File newFolder = <span class="keyword">new</span> File(destFile,srcFileName); <span class="comment">//F:\\itcast</span></span><br><span class="line">            <span class="keyword">if</span>(!newFolder.exists()) &#123;</span><br><span class="line">                newFolder.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取数据源File下所有文件或者目录的File数组</span></span><br><span class="line">            File[] fileArray = srcFile.listFiles();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历该File数组，得到每一个File对象</span></span><br><span class="line">            <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line">                <span class="comment">//把该File作为数据源File对象，递归调用复制文件夹的方法</span></span><br><span class="line">                copyFolder(file,newFolder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//说明是文件，直接复制，用字节流</span></span><br><span class="line">            File newFile = <span class="keyword">new</span> File(destFile,srcFile.getName());</span><br><span class="line">            copyFile(srcFile,newFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流复制文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bys)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4复制文件的异常处理【应用】"><a href="#1-4复制文件的异常处理【应用】" class="headerlink" title="1.4复制文件的异常处理【应用】"></a>1.4复制文件的异常处理【应用】</h3><h4 id="1-4-1基本做法"><a href="#1-4-1基本做法" class="headerlink" title="1.4.1基本做法"></a>1.4.1基本做法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//try...catch...finally</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fw!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fr!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛出处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2JDK7版本改进"><a href="#1-4-2JDK7版本改进" class="headerlink" title="1.4.2JDK7版本改进"></a>1.4.2JDK7版本改进</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK7的改进方案</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-3JDK9版本改进"><a href="#1-4-3JDK9版本改进" class="headerlink" title="1.4.3JDK9版本改进"></a>1.4.3JDK9版本改进</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK9的改进方案</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>(fr;fw)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-IO特殊操作流"><a href="#2-IO特殊操作流" class="headerlink" title="2.IO特殊操作流"></a>2.IO特殊操作流</h2><h3 id="2-1标准输入流【应用】"><a href="#2-1标准输入流【应用】" class="headerlink" title="2.1标准输入流【应用】"></a>2.1标准输入流【应用】</h3><ul><li><p>System类中有两个静态的成员变量</p><ul><li>public static final InputStream in：标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</li><li>public static final PrintStream out：标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</li></ul></li><li><p>自己实现键盘录入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//public static final InputStream in：标准输入流</span></span><br><span class="line"><span class="comment">//        InputStream is = System.in;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        int by;</span></span><br><span class="line"><span class="comment">//        while ((by=is.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)by);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何把字节流转换为字符流？用转换流</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">//        //使用字符流能不能够实现一次读取一行数据呢？可以</span></span><br><span class="line"><span class="comment">//        //但是，一次读取一行数据的方法是字符缓冲输入流的特有方法</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的字符串是：&quot;</span> + line);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = Integer.parseInt(br.readLine());</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的整数是：&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己实现键盘录入数据太麻烦了，所以Java就提供了一个类供我们使用</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2标准输出流【应用】"><a href="#2-2标准输出流【应用】" class="headerlink" title="2.2标准输出流【应用】"></a>2.2标准输出流【应用】</h3><ul><li><p>System类中有两个静态的成员变量</p><ul><li>public static final InputStream in：标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</li><li>public static final PrintStream out：标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</li></ul></li><li><p>输出语句的本质：是一个标准的输出流</p><ul><li>PrintStream ps = System.out;</li><li>PrintStream类有的方法，System.out都可以使用</li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemOutDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public static final PrintStream out：标准输出流</span></span><br><span class="line">        PrintStream ps = System.out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//能够方便地打印各种数据值</span></span><br><span class="line"><span class="comment">//        ps.print(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        ps.print(100);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        ps.println(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        ps.println(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out的本质是一个字节输出流</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        System.out.print();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3字节打印流【应用】"><a href="#2-3字节打印流【应用】" class="headerlink" title="2.3字节打印流【应用】"></a>2.3字节打印流【应用】</h3><ul><li><p>打印流分类</p><ul><li>字节打印流：PrintStream</li><li>字符打印流：PrintWriter</li></ul></li><li><p>打印流的特点</p><ul><li>只负责输出数据，不负责读取数据</li><li>永远不会抛出IOException</li><li>有自己的特有方法</li></ul></li><li><p>字节打印流</p><ul><li><p>PrintStream(String fileName)：使用指定的文件名创建新的打印流</p></li><li><p>使用继承父类的方法写数据，查看的时候会转码；使用自己的特有方法写数据，查看的数据原样输出</p></li><li><p>可以改变输出语句的目的地</p><p>​    public static void setOut(PrintStream out)：重新分配“标准”输出流</p></li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//PrintStream(String fileName)：使用指定的文件名创建新的打印流</span></span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;myOtherStream\\ps.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="comment">//字节输出流有的方法</span></span><br><span class="line"><span class="comment">//        ps.write(97);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用特有方法写数据</span></span><br><span class="line"><span class="comment">//        ps.print(97);</span></span><br><span class="line"><span class="comment">//        ps.println();</span></span><br><span class="line"><span class="comment">//        ps.print(98);</span></span><br><span class="line">        ps.println(<span class="number">97</span>);</span><br><span class="line">        ps.println(<span class="number">98</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4字符打印流【应用】"><a href="#2-4字符打印流【应用】" class="headerlink" title="2.4字符打印流【应用】"></a>2.4字符打印流【应用】</h3><ul><li><p>字符打印流构造房方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>PrintWriter(String   fileName)</td><td>使用指定的文件名创建一个新的PrintWriter，而不需要自动执行刷新</td></tr><tr><td>PrintWriter(Writer   out, boolean autoFlush)</td><td>创建一个新的PrintWriter    out：字符输出流    autoFlush： 一个布尔值，如果为真，则println ， printf ，或format方法将刷新输出缓冲区</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//PrintWriter(String fileName) ：使用指定的文件名创建一个新的PrintWriter，而不需要自动执行行刷新</span></span><br><span class="line"><span class="comment">//        PrintWriter pw = new PrintWriter(&quot;myOtherStream\\pw.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pw.println(&quot;hello&quot;);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">            pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//        pw.println(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//PrintWriter(Writer out, boolean autoFlush)：创建一个新的PrintWriter</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\pw.txt&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        PrintWriter pw = new PrintWriter(new FileWriter(&quot;myOtherStream\\pw.txt&quot;),false);</span></span><br><span class="line"></span><br><span class="line">        pw.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">            pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">            pw.flush();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pw.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5复制Java文件打印流改进版【应用】"><a href="#2-5复制Java文件打印流改进版【应用】" class="headerlink" title="2.5复制Java文件打印流改进版【应用】"></a>2.5复制Java文件打印流改进版【应用】</h3><ul><li><p>案例需求</p><ul><li>把模块目录下的PrintStreamDemo.java 复制到模块目录下的 Copy.java</li></ul></li><li><p>分析步骤</p><ul><li>根据数据源创建字符输入流对象</li><li>根据目的地创建字符输出流对象</li><li>读写数据，复制文件</li><li>释放资源</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //根据数据源创建字符输入流对象</span></span><br><span class="line"><span class="comment">        BufferedReader br = new BufferedReader(new FileReader(&quot;myOtherStream\\PrintStreamDemo.java&quot;));</span></span><br><span class="line"><span class="comment">        //根据目的地创建字符输出流对象</span></span><br><span class="line"><span class="comment">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;myOtherStream\\Copy.java&quot;));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //读写数据，复制文件</span></span><br><span class="line"><span class="comment">        String line;</span></span><br><span class="line"><span class="comment">        while ((line=br.readLine())!=null) &#123;</span></span><br><span class="line"><span class="comment">            bw.write(line);</span></span><br><span class="line"><span class="comment">            bw.newLine();</span></span><br><span class="line"><span class="comment">            bw.flush();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //释放资源</span></span><br><span class="line"><span class="comment">        bw.close();</span></span><br><span class="line"><span class="comment">        br.close();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\PrintStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\Copy.java&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            pw.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        pw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6对象序列化流【应用】"><a href="#2-6对象序列化流【应用】" class="headerlink" title="2.6对象序列化流【应用】"></a>2.6对象序列化流【应用】</h3><ul><li><p>对象序列化介绍</p><ul><li>对象序列化：就是将对象保存到磁盘中，或者在网络中传输对象</li><li>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据和对象中存储的属性等信息</li><li>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</li><li>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</li></ul></li><li><p>对象序列化流： ObjectOutputStream</p><ul><li>将Java对象的原始数据类型和图形写入OutputStream。 可以使用ObjectInputStream读取（重构）对象。 可以通过使用流的文件来实现对象的持久存储。 如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象 </li></ul></li><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>ObjectOutputStream(OutputStream out)</td><td>创建一个写入指定的OutputStream的ObjectOutputStream</td></tr></tbody></table></li><li><p>序列化对象的方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void writeObject(Object obj)</td><td>将指定的对象写入ObjectOutputStream</td></tr></tbody></table></li><li><p>示例代码</p><ul><li><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectOutputStream(OutputStream out)：创建一个写入指定的OutputStream的ObjectOutputStream</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writeObject(Object obj)：将指定的对象写入ObjectOutputStream</span></span><br><span class="line">        oos.writeObject(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意事项</p><ul><li>一个对象要想被序列化，该对象所属的类必须必须实现Serializable 接口</li><li>Serializable是一个标记接口，实现该接口，不需要重写任何方法</li></ul></li></ul><h3 id="2-7对象反序列化流【应用】"><a href="#2-7对象反序列化流【应用】" class="headerlink" title="2.7对象反序列化流【应用】"></a>2.7对象反序列化流【应用】</h3><ul><li><p>对象反序列化流： ObjectInputStream</p><ul><li>ObjectInputStream反序列化先前使用ObjectOutputStream编写的原始数据和对象</li></ul></li><li><p>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>ObjectInputStream(InputStream in)</td><td>创建从指定的InputStream读取的ObjectInputStream</td></tr></tbody></table></li><li><p>反序列化对象的方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Object readObject()</td><td>从ObjectInputStream读取一个对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectInputStream(InputStream in)：创建从指定的InputStream读取的ObjectInputStream</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object readObject()：从ObjectInputStream读取一个对象</span></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-8serialVersionUID-amp-transient【应用】"><a href="#2-8serialVersionUID-amp-transient【应用】" class="headerlink" title="2.8serialVersionUID&amp;transient【应用】"></a>2.8serialVersionUID&amp;transient【应用】</h3><ul><li><p>serialVersionUID</p><ul><li>用对象序列化流序列化了一个对象后，假如我们修改了对象所属的类文件，读取数据会不会出问题呢？<ul><li>会出问题，会抛出InvalidClassException异常</li></ul></li><li>如果出问题了，如何解决呢？<ul><li>重新序列化</li><li>给对象所属的类加一个serialVersionUID <ul><li>private static final long serialVersionUID = 42L;</li></ul></li></ul></li></ul></li><li><p>transient</p><ul><li>如果一个对象中的某个成员变量的值不想被序列化，又该如何实现呢？<ul><li>给该成员变量加transient关键字修饰，该关键字标记的成员变量不参与序列化过程</li></ul></li></ul></li><li><p>示例代码</p><ul><li><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    private int age;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return &quot;Student&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="comment">//                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        write();</span></span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        oos.writeObject(s);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-Properties集合"><a href="#3-Properties集合" class="headerlink" title="3.Properties集合"></a>3.Properties集合</h2><h3 id="3-1Properties作为Map集合的使用【应用】"><a href="#3-1Properties作为Map集合的使用【应用】" class="headerlink" title="3.1Properties作为Map集合的使用【应用】"></a>3.1Properties作为Map集合的使用【应用】</h3><ul><li><p>Properties介绍</p><ul><li>是一个Map体系的集合类</li><li>Properties可以保存到流中或从流中加载</li><li>属性列表中的每个键及其对应的值都是一个字符串</li></ul></li><li><p>Properties基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//        Properties&lt;String,String&gt; prop = new Properties&lt;String,String&gt;(); //错误</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储元素</span></span><br><span class="line">        prop.put(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Object&gt; keySet = prop.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object key : keySet) &#123;</span><br><span class="line">            Object value = prop.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2Properties作为Map集合的特有方法【应用】"><a href="#3-2Properties作为Map集合的特有方法【应用】" class="headerlink" title="3.2Properties作为Map集合的特有方法【应用】"></a>3.2Properties作为Map集合的特有方法【应用】</h3><ul><li><p>特有方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Object   setProperty(String key, String value)</td><td>设置集合的键和值，都是String类型，底层调用   Hashtable方法 put</td></tr><tr><td>String   getProperty(String key)</td><td>使用此属性列表中指定的键搜索属性</td></tr><tr><td>Set<String>   stringPropertyNames()</td><td>从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object setProperty(String key, String value)：设置集合的键和值，都是String类型，底层调用Hashtable方法put</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Object setProperty(String key, String value) &#123;</span></span><br><span class="line"><span class="comment">                return put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            Object put(Object key, Object value) &#123;</span></span><br><span class="line"><span class="comment">                return map.put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String getProperty(String key)：使用此属性列表中指定的键搜索属性</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty(&quot;itheima001&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty(&quot;itheima0011&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(prop);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; stringPropertyNames()：从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</span></span><br><span class="line">        Set&lt;String&gt; names = prop.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : names) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(key);</span></span><br><span class="line">            String value = prop.getProperty(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3Properties和IO流相结合的方法【应用】"><a href="#3-3Properties和IO流相结合的方法【应用】" class="headerlink" title="3.3Properties和IO流相结合的方法【应用】"></a>3.3Properties和IO流相结合的方法【应用】</h3><ul><li><p>和IO流结合的方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void   load(InputStream inStream)</td><td>从输入字节流读取属性列表（键和元素对）</td></tr><tr><td>void   load(Reader reader)</td><td>从输入字符流读取属性列表（键和元素对）</td></tr><tr><td>void   store(OutputStream out, String comments)</td><td>将此属性列表（键和元素对）写入此   Properties表中，以适合于使用   load(InputStream)方法的格式写入输出字节流</td></tr><tr><td>void   store(Writer writer, String comments)</td><td>将此属性列表（键和元素对）写入此   Properties表中，以适合使用   load(Reader)方法的格式写入输出字符流</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//把集合中的数据保存到文件</span></span><br><span class="line"><span class="comment">//        myStore();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把文件中的数据加载到集合</span></span><br><span class="line">        myLoad();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void load(Reader reader)：</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\fw.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima001&quot;</span>,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima002&quot;</span>,<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void store(Writer writer, String comments)：</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\fw.txt&quot;</span>);</span><br><span class="line">        prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-4游戏次数案例【应用】"><a href="#3-4游戏次数案例【应用】" class="headerlink" title="3.4游戏次数案例【应用】"></a>3.4游戏次数案例【应用】</h3><ul><li><p>案例需求</p><ul><li>实现猜数字小游戏只能试玩3次，如果还想玩，提示：游戏试玩已结束，想玩请充值(<a href="http://www.itcast.cn/">www.itcast.cn</a>)</li></ul></li><li><p>分析步骤</p><ol><li><p>写一个游戏类，里面有一个猜数字的小游戏</p></li><li><p>写一个测试类，测试类中有main()方法，main()方法中写如下代码：</p><p>​    从文件中读取数据到Properties集合，用load()方法实现</p><pre><code>      文件已经存在：game.txt        里面有一个数据值：count=0</code></pre><p>​    通过Properties集合获取到玩游戏的次数</p><p>​    判断次数是否到到3次了</p><pre><code>      如果到了，给出提示：游戏试玩已结束，想玩请充值(www.itcast.cn)        如果不到3次：            次数+1，重新写回文件，用Properties的store()方法实现玩游戏</code></pre></li></ol></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从文件中读取数据到Properties集合，用load()方法实现</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\game.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties集合获取到玩游戏的次数</span></span><br><span class="line">        String count = prop.getProperty(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> number = Integer.parseInt(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断次数是否到到3次了</span></span><br><span class="line">        <span class="keyword">if</span>(number &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">//如果到了，给出提示：游戏试玩已结束，想玩请充值(www.itcast.cn)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;游戏试玩已结束，想玩请充值(www.itcast.cn)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//玩游戏</span></span><br><span class="line">            GuessNumber.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//次数+1，重新写回文件，用Properties的store()方法实现</span></span><br><span class="line">            number++;</span><br><span class="line">            prop.setProperty(<span class="string">&quot;count&quot;</span>,String.valueOf(number));</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\game.txt&quot;</span>);</span><br><span class="line">            prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java Io流 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo报错总结</title>
      <link href="/archives/646f4601.html"/>
      <url>/archives/646f4601.html</url>
      
        <content type="html"><![CDATA[<h2 id="1hexo版本更新报错：INFO-Validating-config-WARN-Deprecated-config-detected-“external-link“-with-a-Boolean"><a href="#1hexo版本更新报错：INFO-Validating-config-WARN-Deprecated-config-detected-“external-link“-with-a-Boolean" class="headerlink" title="1hexo版本更新报错：INFO Validating config WARN Deprecated config detected: “external_link“ with a Boolean"></a>1hexo版本更新报错：INFO Validating config WARN Deprecated config detected: “external_link“ with a Boolean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">报错：</span><br><span class="line">Deprecated config detected: &quot;external_link&quot; with a Boolean value is deprecated. See https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration for more details.</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">external_link: true</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#39;&#39;</span><br></pre></td></tr></table></figure><h6 id="百度推送插件配置"><a href="#百度推送插件配置" class="headerlink" title="百度推送插件配置:"></a>百度推送插件配置:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 百度主动推送</span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 ## 提交最新的1个链接</span><br><span class="line">  host: www.runrab.com ## 百度站长平台中注册的域名</span><br><span class="line">  token: &#39;&#39; ## 准入秘钥</span><br><span class="line">  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><h6 id="deoloy配置"><a href="#deoloy配置" class="headerlink" title="deoloy配置"></a>deoloy配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">    coding: git@git.coding.net:你的coding&#x2F;你的coding.coding.me.git #coding地址</span><br><span class="line">    github: git@github.com:你的Github用户名&#x2F;你的Github用户名.github.io.git  # Github pages地址</span><br><span class="line">  branch: master</span><br><span class="line">- type: baidu_url_submitter #百度主动推送</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 ## 提交最新的一个链接</span><br><span class="line">  host: www.runrab.com ## 在百度站长平台中注册的域名</span><br><span class="line">  token: xxxxx ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</span><br><span class="line">  xz_appid: &#39;xxxxxx&#39; ## 你的熊掌号 appid</span><br><span class="line">  xz_token: &#39;xxxxxx&#39; ## 你的熊掌号 token</span><br><span class="line">  xz_count: 10 ## 从所有的提交的数据当中选取最新的10条,该数量跟你的熊掌号而定</span><br><span class="line">的话 加上</span><br></pre></td></tr></table></figure><h3 id="deploy-配置中加上"><a href="#deploy-配置中加上" class="headerlink" title="deploy 配置中加上"></a>deploy 配置中加上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- type: baidu_xz_url_submitter #百度熊掌号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA获取网络图片并保存到本地</title>
      <link href="/archives/cdcb5006.html"/>
      <url>/archives/cdcb5006.html</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA获取网络图片并保存到本地"><a href="#JAVA获取网络图片并保存到本地" class="headerlink" title="JAVA获取网络图片并保存到本地"></a>JAVA获取网络图片并保存到本地</h1><h2 id="初代代码"><a href="#初代代码" class="headerlink" title="初代代码"></a>初代代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import javax.net.ssl.HttpsURLConnection;</span><br><span class="line"></span><br><span class="line">public class FirstTest &#123;</span><br><span class="line"></span><br><span class="line">​    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">​        &#x2F;&#x2F; TODO 自动生成的方法存根</span><br><span class="line"></span><br><span class="line">​        long start&#x3D;System.currentTimeMillis();</span><br><span class="line">​        System.out.println(&quot;开始&quot;);</span><br><span class="line"></span><br><span class="line">​        for(int i&#x3D;1;i&lt;&#x3D;100;i++) &#123;</span><br><span class="line">&#x2F;&#x2F;            double r&#x3D;(0+Math.random()*10000);</span><br><span class="line">&#x2F;&#x2F;            System.out.println(r);</span><br><span class="line">​            String url&#x3D;&quot;https:&#x2F;&#x2F;source.unsplash.com&#x2F;random&quot;;&#x2F;&#x2F;一个随机图片接口</span><br><span class="line">&#x2F;&#x2F;            +(0+Math.random()*10000);可以在random后面加入一个随机数避免图片重复</span><br><span class="line">​            getImg(url,i);</span><br><span class="line">​            System.out.println(&quot;完成&quot;+i);</span><br><span class="line">​        &#125;</span><br><span class="line">​        long end&#x3D;System.currentTimeMillis();</span><br><span class="line">​        System.out.println(&quot;运行时间:&quot;+(end-start)&#x2F;1000+&quot;秒&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line">​    private static void getImg(String u,int i)&#123;</span><br><span class="line">​        URL url;</span><br><span class="line">​        try &#123;</span><br><span class="line">​            url &#x3D; new URL(u);</span><br><span class="line">​            HttpsURLConnection conn &#x3D; (HttpsURLConnection) url.openConnection();</span><br><span class="line">​            conn.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">​            conn.setConnectTimeout(5*1000);</span><br><span class="line">​            InputStream in &#x3D; conn.getInputStream();</span><br><span class="line">​            byte[] data &#x3D; readInputStream(in);</span><br><span class="line">​            File f &#x3D; new File(&quot;C:\\Users\\Administrator\\Desktop\\img\\&quot;+i+&quot;.jpg&quot;);</span><br><span class="line">​            FileOutputStream out &#x3D; new FileOutputStream(f);</span><br><span class="line">​            out.write(data);</span><br><span class="line">​            out.close();</span><br><span class="line">​        &#125; catch (IOException e) &#123;</span><br><span class="line">​            &#x2F;&#x2F; TODO 自动生成的 catch 块</span><br><span class="line">​            e.printStackTrace();</span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    private static byte[] readInputStream(InputStream ins) throws IOException &#123;</span><br><span class="line">​        &#x2F;&#x2F; TODO 自动生成的方法存根</span><br><span class="line">​        ByteArrayOutputStream out &#x3D; new ByteArrayOutputStream();</span><br><span class="line">​        byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">​        int len &#x3D; 0;</span><br><span class="line">​        while ((len &#x3D; ins.read(buffer)) !&#x3D; -1) &#123;</span><br><span class="line">​            out.write(buffer, 0, len);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line">​        ins.close();</span><br><span class="line"></span><br><span class="line">​        return out.toByteArray();</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringUtil字符格式判断</title>
      <link href="/archives/60cf224d.html"/>
      <url>/archives/60cf224d.html</url>
      
        <content type="html"><![CDATA[<h2 id="StringUtil-字符格式判断"><a href="#StringUtil-字符格式判断" class="headerlink" title="StringUtil 字符格式判断"></a>StringUtil 字符格式判断</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> java 字符串格式检验</span><br><span class="line"></span><br><span class="line">将以逗号分隔的字符串转换成字符串数组</span><br><span class="line"></span><br><span class="line">获取字符串编码</span><br><span class="line"></span><br><span class="line">判断字符串是否为数字</span><br><span class="line"></span><br><span class="line">判断是否是数字(整数)</span><br><span class="line"></span><br><span class="line">判断是否是邮箱</span><br><span class="line"></span><br><span class="line">是否是汉字</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssh.insure.utils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串相关方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将以逗号分隔的字符串转换成字符串数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] StrList(String valStr)&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    String TempStr = valStr;</span><br><span class="line">    String[] returnStr = <span class="keyword">new</span> String[valStr.length() + <span class="number">1</span> - TempStr.replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>).length()];</span><br><span class="line">    valStr = valStr + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (valStr.indexOf(<span class="string">&#x27;,&#x27;</span>) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        returnStr[i] = valStr.substring(<span class="number">0</span>, valStr.indexOf(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line">        valStr = valStr.substring(valStr.indexOf(<span class="string">&#x27;,&#x27;</span>)+<span class="number">1</span> , valStr.length());</span><br><span class="line">        </span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**获取字符串编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEncoding</span><span class="params">(String str)</span> </span>&#123;      </span><br><span class="line">       String encode = <span class="string">&quot;GB2312&quot;</span>;      </span><br><span class="line">      <span class="keyword">try</span> &#123;      </span><br><span class="line">          <span class="keyword">if</span> (str.equals(<span class="keyword">new</span> String(str.getBytes(encode), encode))) &#123;      </span><br><span class="line">               String s = encode;      </span><br><span class="line">              <span class="keyword">return</span> s;      </span><br><span class="line">           &#125;      </span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception exception) &#123;      </span><br><span class="line">       &#125;      </span><br><span class="line">       encode = <span class="string">&quot;ISO-8859-1&quot;</span>;      </span><br><span class="line">      <span class="keyword">try</span> &#123;      </span><br><span class="line">          <span class="keyword">if</span> (str.equals(<span class="keyword">new</span> String(str.getBytes(encode), encode))) &#123;      </span><br><span class="line">               String s1 = encode;      </span><br><span class="line">              <span class="keyword">return</span> s1;      </span><br><span class="line">           &#125;      </span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception exception1) &#123;      </span><br><span class="line">       &#125;      </span><br><span class="line">       encode = <span class="string">&quot;UTF-8&quot;</span>;      </span><br><span class="line">      <span class="keyword">try</span> &#123;      </span><br><span class="line">          <span class="keyword">if</span> (str.equals(<span class="keyword">new</span> String(str.getBytes(encode), encode))) &#123;      </span><br><span class="line">               String s2 = encode;      </span><br><span class="line">              <span class="keyword">return</span> s2;      </span><br><span class="line">           &#125;      </span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception exception2) &#123;      </span><br><span class="line">       &#125;      </span><br><span class="line">       encode = <span class="string">&quot;GBK&quot;</span>;      </span><br><span class="line">      <span class="keyword">try</span> &#123;      </span><br><span class="line">          <span class="keyword">if</span> (str.equals(<span class="keyword">new</span> String(str.getBytes(encode), encode))) &#123;      </span><br><span class="line">               String s3 = encode;      </span><br><span class="line">              <span class="keyword">return</span> s3;      </span><br><span class="line">           &#125;      </span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception exception3) &#123;      </span><br><span class="line">       &#125;      </span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;      </span><br><span class="line">   &#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断字符串是否为数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(<span class="string">&quot;^(([1-9]&#123;1&#125;\\d*)|([0]&#123;1&#125;))(\\.(\\d)&#123;0,2&#125;)?$&quot;</span>); <span class="comment">// 判断小数点后2位的数字的正则表达式</span></span><br><span class="line">        java.util.regex.Matcher match=pattern.matcher(str); </span><br><span class="line">        <span class="keyword">if</span>(match.matches())&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是数字(整数)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumericINT</span><span class="params">(String str)</span></span>&#123; </span><br><span class="line">   Pattern pattern = Pattern.compile(<span class="string">&quot;[0-9]*&quot;</span>); </span><br><span class="line">   Matcher isNum = pattern.matcher(str);</span><br><span class="line">   <span class="keyword">if</span>(isNum.matches())&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmail</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (string == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        String regEx1 = <span class="string">&quot;^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z0-9]&#123;2,6&#125;$&quot;</span>;</span><br><span class="line">        Pattern p;</span><br><span class="line">        Matcher m;</span><br><span class="line">        p = Pattern.compile(regEx1);</span><br><span class="line">        m = p.matcher(string);</span><br><span class="line">        <span class="keyword">if</span> (m.matches())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是汉字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChinese</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">    String regEx = <span class="string">&quot;[\u4e00-\u9fa5]&quot;</span>;</span><br><span class="line">Pattern pat = Pattern.compile(regEx);</span><br><span class="line">Matcher matcher = pat.matcher(string);</span><br><span class="line"><span class="keyword">boolean</span> flg = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (matcher.find())</span><br><span class="line">flg = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> flg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File-递归-字节流</title>
      <link href="/archives/333c0bbf.html"/>
      <url>/archives/333c0bbf.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-File类"><a href="#1-File类" class="headerlink" title="1.File类"></a>1.File类</h2><h3 id="1-1File类概述和构造方法【应用】"><a href="#1-1File类概述和构造方法【应用】" class="headerlink" title="1.1File类概述和构造方法【应用】"></a>1.1File类概述和构造方法【应用】</h3><ul><li><p>File类介绍</p><ul><li>它是文件和目录路径名的抽象表示</li><li>文件和目录是可以通过File封装成对象的</li><li>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转换为具体存在的</li></ul></li><li><p>File类的构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>File(String   pathname)</td><td>通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</td></tr><tr><td>File(String   parent, String child)</td><td>从父路径名字符串和子路径名字符串创建新的   File实例</td></tr><tr><td>File(File   parent, String child)</td><td>从父抽象路径名和子路径名字符串创建新的   File实例</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//File(String pathname)：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent, String child)：从父路径名字符串和子路径名字符串创建新的 File实例。</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent, String child)：从父抽象路径名和子路径名字符串创建新的 File实例。</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line">        File f4 = <span class="keyword">new</span> File(f3,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2File类创建功能【应用】"><a href="#1-2File类创建功能【应用】" class="headerlink" title="1.2File类创建功能【应用】"></a>1.2File类创建功能【应用】</h3><ul><li><p>方法分类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td></tr><tr><td>public boolean mkdir()</td><td>创建由此抽象路径名命名的目录</td></tr><tr><td>public boolean mkdirs()</td><td>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//需求1：我要在E:\\itcast目录下创建一个文件java.txt</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：我要在E:\\itcast目录下创建一个目录JavaSE</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\JavaSE&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：我要在E:\\itcast目录下创建一个多级目录JavaWEB\\HTML</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\JavaWEB\\HTML&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());</span></span><br><span class="line">        System.out.println(f3.mkdirs());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：我要在E:\\itcast目录下创建一个文件javase.txt</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\javase.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f4.mkdir());</span></span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3File类判断和获取功能【应用】"><a href="#1-3File类判断和获取功能【应用】" class="headerlink" title="1.3File类判断和获取功能【应用】"></a>1.3File类判断和获取功能【应用】</h3><ul><li><p>判断功能</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   boolean isDirectory()</td><td>测试此抽象路径名表示的File是否为目录</td></tr><tr><td>public   boolean isFile()</td><td>测试此抽象路径名表示的File是否为文件</td></tr><tr><td>public   boolean   exists()</td><td>测试此抽象路径名表示的File是否存在</td></tr></tbody></table></li><li><p>获取功能</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   String getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td>public   String getPath()</td><td>将此抽象路径名转换为路径名字符串</td></tr><tr><td>public   String getName()</td><td>返回由此抽象路径名表示的文件或目录的名称</td></tr><tr><td>public   String[] list()</td><td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td></tr><tr><td>public   File[] listFiles()</td><td>返回此抽象路径名表示的目录中的文件和目录的File对象数组</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\java.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public boolean isDirectory()：测试此抽象路径名表示的File是否为目录</span></span><br><span class="line"><span class="comment">//        public boolean isFile()：测试此抽象路径名表示的File是否为文件</span></span><br><span class="line"><span class="comment">//        public boolean exists()：测试此抽象路径名表示的File是否存在</span></span><br><span class="line">        System.out.println(f.isDirectory());</span><br><span class="line">        System.out.println(f.isFile());</span><br><span class="line">        System.out.println(f.exists());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public String getAbsolutePath()：返回此抽象路径名的绝对路径名字符串</span></span><br><span class="line"><span class="comment">//        public String getPath()：将此抽象路径名转换为路径名字符串</span></span><br><span class="line"><span class="comment">//        public String getName()：返回由此抽象路径名表示的文件或目录的名称</span></span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">        System.out.println(f.getPath());</span><br><span class="line">        System.out.println(f.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public String[] list()：返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</span></span><br><span class="line"><span class="comment">//        public File[] listFiles()：返回此抽象路径名表示的目录中的文件和目录的File对象数组</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] strArray = f2.list();</span><br><span class="line">        <span class="keyword">for</span>(String str : strArray) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File[] fileArray = f2.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(file);</span></span><br><span class="line"><span class="comment">//            System.out.println(file.getName());</span></span><br><span class="line">            <span class="keyword">if</span>(file.isFile()) &#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-4File类删除功能【应用】"><a href="#1-4File类删除功能【应用】" class="headerlink" title="1.4File类删除功能【应用】"></a>1.4File类删除功能【应用】</h3><ul><li><p>方法分类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean   delete()</td><td>删除由此抽象路径名表示的文件或目录</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        File f1 = new File(&quot;E:\\itcast\\java.txt&quot;);</span></span><br><span class="line">        <span class="comment">//需求1：在当前模块目录下创建java.txt文件</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f1.createNewFile());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：删除当前模块目录下的java.txt文件</span></span><br><span class="line">        System.out.println(f1.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：在当前模块目录下创建itcast目录</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f2.mkdir());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：删除当前模块目录下的itcast目录</span></span><br><span class="line">        System.out.println(f2.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：在当前模块下创建一个目录itcast,然后在该目录下创建一个文件java.txt</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f4.createNewFile());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求6：删除当前模块下的目录itcast</span></span><br><span class="line">        System.out.println(f4.delete());</span><br><span class="line">        System.out.println(f3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对路径和相对路径的区别</p><ul><li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：E:\itcast\java.txt</li><li>相对路径：必须使用取自其他路径名的信息进行解释。例如：myFile\java.txt</li></ul></li></ul><h2 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h2><h3 id="2-1递归【应用】"><a href="#2-1递归【应用】" class="headerlink" title="2.1递归【应用】"></a>2.1递归【应用】</h3><ul><li><p>递归的介绍</p><ul><li>以编程的角度来看，递归指的是方法定义中调用方法本身的现象</li><li>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</li><li>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算</li></ul></li><li><p>递归的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//回顾不死神兔问题，求第20个月兔子的对数</span></span><br><span class="line">        <span class="comment">//每个月的兔子对数：1,1,2,3,5,8，...</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr[<span class="number">19</span>]);</span><br><span class="line">        System.out.println(f(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        递归解决问题，首先就是要定义一个方法：</span></span><br><span class="line"><span class="comment">            定义一个方法f(n)：表示第n个月的兔子对数</span></span><br><span class="line"><span class="comment">            那么，第n-1个月的兔子对数该如何表示呢？f(n-1)</span></span><br><span class="line"><span class="comment">            同理，第n-2个月的兔子对数该如何表示呢？f(n-2)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        StackOverflowError:当堆栈溢出发生时抛出一个应用程序递归太深</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归的注意事项</p><ul><li>递归一定要有出口。否则内存溢出</li><li>递归虽然有出口，但是递归的次数也不宜过多。否则内存溢出</li></ul></li></ul><h3 id="2-2递归求阶乘【应用】"><a href="#2-2递归求阶乘【应用】" class="headerlink" title="2.2递归求阶乘【应用】"></a>2.2递归求阶乘【应用】</h3><ul><li><p>案例需求</p><p>​    用递归求5的阶乘，并把结果在控制台输出</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">int</span> result = jc(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;5的阶乘是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于递归求阶乘，参数为一个int类型的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法内部判断该变量的值是否是1</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//是：返回1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不是：返回n*(n-1)!</span></span><br><span class="line">            <span class="keyword">return</span> n*jc(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3递归遍历目录【应用】"><a href="#2-3递归遍历目录【应用】" class="headerlink" title="2.3递归遍历目录【应用】"></a>2.3递归遍历目录【应用】</h3><ul><li><p>案例需求</p><p>​    给定一个路径(E:\itcast)，通过递归完成遍历该目录下所有内容，并把所有文件的绝对路径输出在控制台</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据给定的路径创建一个File对象</span></span><br><span class="line"><span class="comment">//        File srcFile = new File(&quot;E:\\itcast&quot;);</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itheima&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        getAllFilePath(srcFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于获取给定目录下的所有内容，参数为第1步创建的File对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFilePath</span><span class="params">(File srcFile)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取给定的File目录下所有的文件或者目录的File数组</span></span><br><span class="line">        File[] fileArray = srcFile.listFiles();</span><br><span class="line">        <span class="comment">//遍历该File数组，得到每一个File对象</span></span><br><span class="line">        <span class="keyword">if</span>(fileArray != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line">                <span class="comment">//判断该File对象是否是目录</span></span><br><span class="line">                <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//是：递归调用</span></span><br><span class="line">                    getAllFilePath(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//不是：获取绝对路径输出在控制台</span></span><br><span class="line">                    System.out.println(file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-IO流"><a href="#3-IO流" class="headerlink" title="3.IO流"></a>3.IO流</h2><h3 id="3-1-IO流概述和分类【理解】"><a href="#3-1-IO流概述和分类【理解】" class="headerlink" title="3.1 IO流概述和分类【理解】"></a>3.1 IO流概述和分类【理解】</h3><ul><li>IO流介绍<ul><li>IO：输入/输出(Input/Output)</li><li>流：是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输</li><li>IO流就是用来处理设备间数据传输问题的。常见的应用：文件复制；文件上传；文件下载</li></ul></li><li>IO流的分类<ul><li>按照数据的流向<ul><li>输入流：读数据</li><li>输出流：写数据</li></ul></li><li>按照数据类型来分<ul><li>字节流<ul><li>字节输入流</li><li>字节输出流</li></ul></li><li>字符流<ul><li>字符输入流</li><li>字符输出流</li></ul></li></ul></li></ul></li><li>IO流的使用场景<ul><li>如果操作的是纯文本文件，优先使用字符流</li><li>如果操作的是图片、视频、音频等二进制文件。优先使用字节流</li><li>如果不确定文件类型，优先使用字节流。字节流是万能的流</li></ul></li></ul><h3 id="3-2字节流写数据【应用】"><a href="#3-2字节流写数据【应用】" class="headerlink" title="3.2字节流写数据【应用】"></a>3.2字节流写数据【应用】</h3><ul><li><p>字节流抽象基类</p><ul><li>InputStream：这个抽象类是表示字节输入流的所有类的超类</li><li>OutputStream：这个抽象类是表示字节输出流的所有类的超类</li><li>子类名特点：子类名称都是以其父类名作为子类名的后缀</li></ul></li><li><p>字节输出流</p><ul><li>FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</li></ul></li><li><p>使用字节输出流写数据的步骤</p><ul><li>创建字节输出流对象(调用系统功能创建了文件，创建字节输出流对象，让字节输出流对象指向文件)</li><li>调用字节输出流对象的写数据方法</li><li>释放资源(关闭此文件输出流并释放与此流相关联的任何系统资源)</li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流对象</span></span><br><span class="line">        <span class="comment">//FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            做了三件事情：</span></span><br><span class="line"><span class="comment">                A:调用系统功能创建了文件</span></span><br><span class="line"><span class="comment">                B:创建了字节输出流对象</span></span><br><span class="line"><span class="comment">                C:让字节输出流对象指向创建好的文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int b)：将指定的字节写入此文件输出流</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line"><span class="comment">//        fos.write(57);</span></span><br><span class="line"><span class="comment">//        fos.write(55);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后都要释放资源</span></span><br><span class="line">        <span class="comment">//void close()：关闭此文件输出流并释放与此流相关联的任何系统资源。</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3字节流写数据的三种方式【应用】"><a href="#3-3字节流写数据的三种方式【应用】" class="headerlink" title="3.3字节流写数据的三种方式【应用】"></a>3.3字节流写数据的三种方式【应用】</h3><ul><li><p>写数据的方法分类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void   write(int b)</td><td>将指定的字节写入此文件输出流   一次写一个字节数据</td></tr><tr><td>void   write(byte[] b)</td><td>将 b.length字节从指定的字节数组写入此文件输出流   一次写一个字节数组数据</td></tr><tr><td>void   write(byte[] b, int off, int len)</td><td>将 len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流   一次写一个字节数组的部分数据</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//new File(name)</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(new File(&quot;myByteStream\\fos.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//FileOutputStream(File file)：创建文件输出流以写入由指定的 File对象表示的文件</span></span><br><span class="line"><span class="comment">//        File file = new File(&quot;myByteStream\\fos.txt&quot;);</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos2 = new FileOutputStream(file);</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos2 = new FileOutputStream(new File(&quot;myByteStream\\fos.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int b)：将指定的字节写入此文件输出流</span></span><br><span class="line"><span class="comment">//        fos.write(97);</span></span><br><span class="line"><span class="comment">//        fos.write(98);</span></span><br><span class="line"><span class="comment">//        fos.write(99);</span></span><br><span class="line"><span class="comment">//        fos.write(100);</span></span><br><span class="line"><span class="comment">//        fos.write(101);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        void write(byte[] b)：将 b.length字节从指定的字节数组写入此文件输出流</span></span><br><span class="line"><span class="comment">//        byte[] bys = &#123;97, 98, 99, 100, 101&#125;;</span></span><br><span class="line">        <span class="comment">//byte[] getBytes()：返回字符串对应的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">//        fos.write(bys);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(byte[] b, int off, int len)：将 len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流</span></span><br><span class="line"><span class="comment">//        fos.write(bys,0,bys.length);</span></span><br><span class="line">        fos.write(bys,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-4字节流写数据的两个小问题【应用】"><a href="#3-4字节流写数据的两个小问题【应用】" class="headerlink" title="3.4字节流写数据的两个小问题【应用】"></a>3.4字节流写数据的两个小问题【应用】</h3><ul><li><p>字节流写数据如何实现换行</p><ul><li>windows:\r\n</li><li>linux:\n</li><li>mac:\r</li></ul></li><li><p>字节流写数据如何实现追加写入</p><ul><li>public FileOutputStream(String name,boolean append)</li><li>创建文件输出流以指定的名称写入文件。如果第二个参数为true ，则字节将写入文件的末尾而不是开头</li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流对象</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(&quot;myByteStream\\fos.txt&quot;);</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5字节流写数据加异常处理【应用】"><a href="#3-5字节流写数据加异常处理【应用】" class="headerlink" title="3.5字节流写数据加异常处理【应用】"></a>3.5字节流写数据加异常处理【应用】</h3><ul><li><p>异常处理格式</p><ul><li><p>try-catch-finally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">执行所有清除操作;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>finally特点</p><ul><li>被finally控制的语句一定会执行，除非JVM退出</li></ul></li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加入finally来实现释放资源</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-6字节流读数据-一次读一个字节数据-【应用】"><a href="#3-6字节流读数据-一次读一个字节数据-【应用】" class="headerlink" title="3.6字节流读数据(一次读一个字节数据)【应用】"></a>3.6字节流读数据(一次读一个字节数据)【应用】</h3><ul><li><p>字节输入流</p><ul><li>FileInputStream(String name)：通过打开与实际文件的连接来创建一个FileInputStream ，该文件由文件系统中的路径名name命名</li></ul></li><li><p>字节输入流读取数据的步骤</p><ul><li>创建字节输入流对象</li><li>调用字节输入流对象的读数据方法</li><li>释放资源</li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        <span class="comment">//FileInputStream(String name)</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            fis.read()：读数据</span></span><br><span class="line"><span class="comment">            by=fis.read()：把读取到的数据赋值给by</span></span><br><span class="line"><span class="comment">            by != -1：判断读取到的数据是否是-1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-7字节流复制文本文件【应用】"><a href="#3-7字节流复制文本文件【应用】" class="headerlink" title="3.7字节流复制文本文件【应用】"></a>3.7字节流复制文本文件【应用】</h3><ul><li><p>案例需求</p><p>​    把“E:\itcast\窗里窗外.txt”复制到模块目录下的“窗里窗外.txt”</p></li><li><p>实现步骤</p><ul><li><p>复制文本文件，其实就把文本文件的内容从一个文件中读取出来(数据源)，然后写入到另一个文件中(目的地)</p></li><li><p>数据源：</p><p>​    E:\itcast\窗里窗外.txt — 读数据 — InputStream — FileInputStream </p></li><li><p>目的地：</p><p>​    myByteStream\窗里窗外.txt — 写数据 — OutputStream — FileOutputStream</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\窗里窗外.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字节输出流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\窗里窗外.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文本文件(一次读取一个字节，一次写入一个字节)</span></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-8字节流读数据-一次读一个字节数组数据-【应用】"><a href="#3-8字节流读数据-一次读一个字节数组数据-【应用】" class="headerlink" title="3.8字节流读数据(一次读一个字节数组数据)【应用】"></a>3.8字节流读数据(一次读一个字节数组数据)【应用】</h3><ul><li><p>一次读一个字节数组的方法</p><ul><li>public int read(byte[] b)：从输入流读取最多b.length个字节的数据</li><li>返回的是读入缓冲区的总字节数,也就是实际的读取字节个数</li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            hello\r\n</span></span><br><span class="line"><span class="comment">            world\r\n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            第一次：hello</span></span><br><span class="line"><span class="comment">            第二次：\r\nwor</span></span><br><span class="line"><span class="comment">            第三次：ld\r\nr</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">//1024及其整数倍</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-9字节流复制图片【应用】"><a href="#3-9字节流复制图片【应用】" class="headerlink" title="3.9字节流复制图片【应用】"></a>3.9字节流复制图片【应用】</h3><ul><li><p>案例需求</p><p>​    把“E:\itcast\mn.jpg”复制到模块目录下的“mn.jpg”</p></li><li><p>实现步骤</p><ul><li>根据数据源创建字节输入流对象</li><li>根据目的地创建字节输出流对象</li><li>读写数据，复制图片(一次读取一个字节数组，一次写入一个字节数组)</li><li>释放资源</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJpgDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\mn.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字节输出流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\mn.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制图片(一次读取一个字节数组，一次写入一个字节数组)</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs笔记</title>
      <link href="/archives/fb69810e.html"/>
      <url>/archives/fb69810e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Nodejs概述"><a href="#1-Nodejs概述" class="headerlink" title="1. Nodejs概述"></a>1. Nodejs概述</h2><p><strong>目标</strong>：Node.js用途；安装Node.js</p><p><strong>小结</strong>：</p><p>Node.js是一个可以在js中接收和处理web请求的应用平台。</p><h2 id="2-Nodejs模块化编程"><a href="#2-Nodejs模块化编程" class="headerlink" title="2. Nodejs模块化编程"></a>2. Nodejs模块化编程</h2><p><strong>目标</strong>：编写模块文件使用require引入模块后使用node.js执行</p><p><strong>小结</strong>：</p><p>可以使用exports将js方法导出，并使用require引入对应的js模块，然后再引入之后可以使用对应的方法。</p><h2 id="3-创建Nodejs-Web服务器"><a href="#3-创建Nodejs-Web服务器" class="headerlink" title="3. 创建Nodejs Web服务器"></a>3. 创建Nodejs Web服务器</h2><p><strong>目标</strong>：引入http模块监听8888端口实现输出字符</p><p><strong>小结</strong>：</p><p>可以利用node.js创建web服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入node.js内置http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并监听web服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="comment">//参数1：响应状态码，200表示成功</span></span><br><span class="line">    <span class="comment">//参数2：响应头部信息，Content-Type内容类型：纯文本</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end(<span class="string">&quot;Hello World \n&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器运行在 http://127.0.0.1:8888 &quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4-处理Nodejs-Web请求参数"><a href="#4-处理Nodejs-Web请求参数" class="headerlink" title="4. 处理Nodejs Web请求参数"></a>4. 处理Nodejs Web请求参数</h2><p><strong>目标</strong>：引入http和url模块创建web容器并使用url解析请求路径中参数且输出</p><p><strong>分析</strong>：</p><p>需求：<a href="http://127.0.0.1:8888/?id=123&amp;name=heima">http://127.0.0.1:8888?id=123&amp;name=heima</a> 获取到请求路径中参数及值并输出</p><p>实现步骤：</p><ol><li>创建web服务器；</li><li>引入url模块；</li><li>利用url解析请求地址中的参数和值并输出</li><li>启动测试；</li></ol><p><strong>小结</strong>：</p><p>在node.js中可以引入url内置模块对请求地址进行处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入node.js内置http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并监听web服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="comment">//参数1：响应状态码，200表示成功</span></span><br><span class="line">    <span class="comment">//参数2：响应头部信息，Content-Type内容类型：纯文本</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求地址</span></span><br><span class="line">    <span class="comment">//参数1：请求地址</span></span><br><span class="line">    <span class="comment">//参数2：true的话使用query解析参数到一个对象，默认false</span></span><br><span class="line">    <span class="keyword">var</span> params = url.parse(request.url, <span class="literal">true</span>).query;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> params)&#123;</span><br><span class="line">        response.write( key + <span class="string">&quot; = &quot;</span> + params[key]);</span><br><span class="line">        response.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器运行在 http://127.0.0.1:8888 &quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5-包资源管理器NPM"><a href="#5-包资源管理器NPM" class="headerlink" title="5. 包资源管理器NPM"></a>5. 包资源管理器NPM</h2><p><strong>目标</strong>：说出npm的作用；区别本地安装和全局安装</p><p><strong>小结</strong>：</p><p>npm是一个node.js的管理和分发工具，可以根据配置package.json下载js库。</p><ul><li>本地安装：将下载的模块安装到当前目录（项目）；</li><li>全局安装：将下载的模块安装到全局的目录（ <code>npm root -g</code> ）</li></ul><h2 id="6-切换NPM镜像"><a href="#6-切换NPM镜像" class="headerlink" title="6. 切换NPM镜像"></a>6. 切换NPM镜像</h2><p><strong>目标</strong>：安装nrm组件将npm的镜像切换为淘宝镜像</p><p><strong>小结</strong>：</p><ul><li>使用nrm 切换镜像源</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install nrm -g</span><br><span class="line"></span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><ul><li>使用cnpm下载</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install **</span><br></pre></td></tr></table></figure><h2 id="7-webpack概述"><a href="#7-webpack概述" class="headerlink" title="7. webpack概述"></a>7. webpack概述</h2><p><strong>目标</strong>：webpack的作用是什么并安装webpack</p><p><strong>小结</strong>：</p><p>webpack作用：可以将多个静态资源js、css等打包成一个js文件。</p><p>安装命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure><h2 id="8-webpack打包js"><a href="#8-webpack打包js" class="headerlink" title="8. webpack打包js"></a>8. webpack打包js</h2><p><strong>目标</strong>：创建2个js文件，使用webpack命令打包js文件到 <code>dist/bundle.js</code> 文件中并测试。</p><p><strong>分析</strong>：</p><p>实现步骤：</p><ol><li>创建2个js文件；</li><li>创建入口文件main.js；</li><li>创建webpack的配置文件；</li><li>运行webpack命令；</li><li>创建index.html页面进行测试</li></ol><p><strong>小结</strong>：</p><p>webpack打包js的配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//路径</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>webpack可以将多个js文件打包成一个js</p></blockquote><h2 id="9-webpack打包css"><a href="#9-webpack打包css" class="headerlink" title="9. webpack打包css"></a>9. webpack打包css</h2><p><strong>目标</strong>：安装style-loader css-loader组件，创建并使用css文件，使用webpack命令打包js文件到 <code>dist/bundle.js</code> 文件中并测试。</p><p><strong>分析</strong>：</p><p>实现步骤：</p><ol><li>安装转换css的组件；</li><li>修改配置文件；</li><li>创建css文件；</li><li>修改入口文件，加载css文件；</li><li>打包并测试</li></ol><p><strong>小结</strong>：</p><p>webpack打包css文件需要安装转换的组件，并修改配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//路径</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-ES6概述-amp-创建测试工程"><a href="#10-ES6概述-amp-创建测试工程" class="headerlink" title="10. ES6概述&amp;创建测试工程"></a>10. ES6概述&amp;创建测试工程</h2><p><strong>目标</strong>：了解es6应用场景；创建测试工程</p><p><strong>小结</strong>：</p><p>ECMAScript是前端js的语法规范；可以应用在各种js环境中。如：浏览器或者node.js环境。</p><p>它有很多版本：es1/2/3/5/6，很多新特性，可以在js环境中使用这些新特性。</p><h2 id="11-let和const命令及模板字符串"><a href="#11-let和const命令及模板字符串" class="headerlink" title="11. let和const命令及模板字符串"></a>11. let和const命令及模板字符串</h2><p><strong>目标</strong>：使用let和const定义变量说出区别；模板字符串的好处以及对象初始化简写</p><p><strong>小结</strong>：</p><ul><li>let所声明的变量只能在let命令所在的代码块中使用</li><li>const声明的变量是常量，也就是值不可以改变</li><li>模板字符串：可以不用通过反斜杠拼接多行字符，直接使用`</li><li>对象初始化简化：可以在返回的对象时，不用指定属性名。</li></ul><h2 id="12-解构表达式"><a href="#12-解构表达式" class="headerlink" title="12. 解构表达式"></a>12. 解构表达式</h2><p><strong>目标</strong>：将数组、对象中的值或属性使用解构表达式设置到对应变量</p><p><strong>小结</strong>：</p><p>解构表达式：可以对数组、对象的元素或者属性按顺序、名称的方式进行赋值到对应变量中。</p><h2 id="13-函数优化"><a href="#13-函数优化" class="headerlink" title="13. 函数优化"></a>13. 函数优化</h2><p><strong>目标</strong>：箭头函数的好处；对象的函数属性简写，箭头函数与解构表达式的应用</p><p><strong>小结</strong>：</p><p>箭头函数：可以不用编写基础函数的解构（如：function），直接使用 <code>=&gt;</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;;</span><br><span class="line">print(<span class="string">&quot;print&quot;</span>);</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">var</span> print2 = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br><span class="line">print2(<span class="string">&quot;print2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+b);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum3(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;heima&quot;</span>,</span><br><span class="line">    learn1: <span class="function"><span class="keyword">function</span> (<span class="params">course=<span class="string">&quot;java&quot;</span></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; 在学习 &quot;</span> + course);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//箭头函数；不能使用this</span></span><br><span class="line">    learn2: <span class="function">(<span class="params">course</span>) =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">&quot; 在学习 &quot;</span> + course),</span><br><span class="line">    <span class="comment">//简写</span></span><br><span class="line">    <span class="function"><span class="title">learn3</span>(<span class="params">course</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; 在学习 &quot;</span> + course);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.learn1(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">person.learn2(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">person.learn3(<span class="string">&quot;css&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">&quot;heima&quot;</span>,</span><br><span class="line">    age:<span class="number">13</span>,</span><br><span class="line">    language:[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;js&quot;</span>,<span class="string">&quot;css&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + person.name);</span><br><span class="line"> &#125;</span><br><span class="line"> hello(person);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//箭头函数、解构表达式</span></span><br><span class="line"><span class="keyword">var</span> hello2 = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello2 &quot;</span> + name);</span><br><span class="line">hello2(person);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14-map方法使用"><a href="#14-map方法使用" class="headerlink" title="14. map方法使用"></a>14. map方法使用</h2><p><strong>目标</strong>：数组中map方法的应用场景</p><p><strong>小结</strong>：</p><p>map方法可以将原数组中的所有元素通过一个函数进行处理并放入到一个新数组中并返回该新数组。</p><h2 id="15-reduce方法使用"><a href="#15-reduce方法使用" class="headerlink" title="15. reduce方法使用"></a>15. reduce方法使用</h2><p><strong>目标</strong>：数组中reduce方法的应用场景</p><p><strong>小结</strong>：</p><p>reduce方法会从左到右依次把数组中的元素用函数处理（reduce方法的第一个参数），会返回一个执行结果。</p><blockquote><p>let arr = [1, 2, 3]</p><p>arr.reduce((a,b)=&gt;a+b)</p><p>第1次：(1,2) =&gt; 1+2</p><p>第2次：(3, 3) =&gt; 3+3  ——–》 6</p></blockquote><h2 id="16-promise应用示例"><a href="#16-promise应用示例" class="headerlink" title="16. promise应用示例"></a>16. promise应用示例</h2><p><strong>目标</strong>：promise的应用场景及示例</p><p><strong>小结</strong>：</p><p>promise是一个对象，保存着预期事件执行的结果；可以应用在异步操作时候，指定异步操作的成功与失败的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">Math</span>.random();</span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">0.5</span>)&#123;</span><br><span class="line">            resolve(<span class="string">&quot;操作成功！num=&quot;</span> + num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">&quot;操作失败！num=&quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="17-对象的扩展方法使用"><a href="#17-对象的扩展方法使用" class="headerlink" title="17. 对象的扩展方法使用"></a>17. 对象的扩展方法使用</h2><p><strong>目标</strong>：Object对象中的keys/values/assign的作用</p><p><strong>小结</strong>：</p><p>Object的方法：</p><ul><li>keys：获取对象的属性名</li><li>values：获取对象的属性值</li><li>entries：获取对象的属性和属性值</li><li>assign：可以将对象进行拷贝</li></ul><h2 id="18-数组的扩展方法使用"><a href="#18-数组的扩展方法使用" class="headerlink" title="18. 数组的扩展方法使用"></a>18. 数组的扩展方法使用</h2><p><strong>目标</strong>：数组中的find/findIndex/includes的作用</p><p><strong>小结</strong>：</p><p>数组的扩展方法：</p><ul><li>find：根据函数条件查找数组中符合条件的元素</li><li>findIndex：与find类似，返回的不是元素而是元素对应的索引号</li><li>includes：判断指定的元素是否存在</li></ul><h2 id="19-安装babel"><a href="#19-安装babel" class="headerlink" title="19. 安装babel"></a>19. 安装babel</h2><p><strong>目标</strong>：安装babel及了解babel的作用</p><p><strong>小结</strong>：</p><p>babel是一个javaScript语法编译器，可以将es6的语法进行转换并执行。</p><p>需要安装babel：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-preset-es2015 --save-dev </span><br><span class="line">cnpm install babel-cli -g</span><br></pre></td></tr></table></figure><p>编写.babelrc文件，指定es的版本</p><p>可以通过命令去执行对应的js文件：babel-node</p><h2 id="20-export和import联合应用"><a href="#20-export和import联合应用" class="headerlink" title="20. export和import联合应用"></a>20. export和import联合应用</h2><p><strong>目标</strong>：export和import的联合应用场景；使用export导出模板文件，import引入模板文件</p><p><strong>小结</strong>：</p><p>可以通过export导出模块，通过import导入模块并使用其内容。</p><p>导出有两种方式：命名导出和默认导出。</p><p>因为浏览器默认不支持export和import命令，所以需要安装babel对export和import进行解析和执行。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker教程</title>
      <link href="/archives/3d1d688c.html"/>
      <url>/archives/3d1d688c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Docker概述"><a href="#1-Docker概述" class="headerlink" title="1. Docker概述"></a>1. Docker概述</h2><p><strong>目标</strong>：了解Docker是什么、应用场景及其组成部分</p><p><strong>小结</strong>：</p><ul><li>Docker是一个应用容器引起；</li><li>应用场景：web的自动化打包发布，自动化测试、可持续集成，安装各种组件；</li><li>与传统虚拟机比较：docker启动速度比较快，占用体积较小；</li><li>组成：docker守护进程，仓库，镜像，容器，docker客户端</li></ul><h2 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2. Docker安装与启动"></a>2. Docker安装与启动</h2><p><strong>目标</strong>：在线安装docker并使用命令启动、停止docker</p><p><strong>分析</strong>：</p><ol><li>更新yum源为ustc；</li><li>安装docker;</li><li>更新docker的镜像源为ustc；</li><li>使用docker命令操作docker</li></ol><p><strong>小结</strong>：</p><p>需求更新yum源和镜像源安装docker；安装之后可以使用 <code>docker -v</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker启动状态</span></span><br><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h2 id="3-镜像相关命令"><a href="#3-镜像相关命令" class="headerlink" title="3. 镜像相关命令"></a>3. 镜像相关命令</h2><p><strong>目标</strong>：能够使用镜像的查看、搜索、拉取、删除命令</p><p><strong>小结</strong>：</p><blockquote><p>拉取：docker pull 镜像名称:版本号（若不指定则会拉取最新的版本）</p><p>删除全部镜像：docker rmi ` docker images -q ` （慎用）</p></blockquote><h2 id="4-查看-amp-创建并启动交互式容器"><a href="#4-查看-amp-创建并启动交互式容器" class="headerlink" title="4. 查看&amp;创建并启动交互式容器"></a>4. 查看&amp;创建并启动交互式容器</h2><p><strong>目标</strong>：使用查看容器命令；拉取centos:7的镜像之后结合容器启动命令和选项 -it 启动交互式容器</p><p><strong>分析</strong>：</p><ol><li>拉取镜像（容器是基于镜像运行）；</li><li>创建并启动交互式容器，docker交互式容器（启动容器之后会直接进入容器的命令行终端，如果退出则容器停止运行）</li></ol><p><strong>小结</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动交互式容器</span></span><br><span class="line">docker run -it --name=mycentos7 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>启动交互式容器之后是直接进入容器终端；可以查看容器的文件结构；使用exit命令则会退出终端并且停止容器。</p></blockquote><h2 id="5-创建并启动守护式容器"><a href="#5-创建并启动守护式容器" class="headerlink" title="5. 创建并启动守护式容器"></a>5. 创建并启动守护式容器</h2><p><strong>目标</strong>：结合容器启动命令和选项 -di 启动守护式容器</p><p><strong>分析</strong>：</p><p>创建并启动docker容器，可以在后台运行；</p><p>在创建交互式容器之后如果退出的话，容器处于停止状态，可以使用命令再次启动容器，使用命令进入容器并操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并启动守护式容器</span></span><br><span class="line">docker run -di --name=mycentos2 centos:7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器后再进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycentos2 /bin/bash</span><br></pre></td></tr></table></figure><p><strong>小结</strong>：</p><blockquote><p>守护式容器在启动之后会一直在后台运行，即使进入容器之后执行exit命令也不会停止容器；</p><p>适用于需要长期运行容器的情况</p></blockquote><h2 id="6-停止-amp-拷贝-amp-挂载-amp-查看ip-amp-删除容器"><a href="#6-停止-amp-拷贝-amp-挂载-amp-查看ip-amp-删除容器" class="headerlink" title="6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器"></a>6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器</h2><p><strong>目标</strong>：能够使用容器的停止、拷贝文件、目录挂载、查看IP、删除命令</p><p><strong>小结</strong>：</p><ul><li><p>容器停止、启动</p></li><li><p>拷贝文件：容器与宿主机之间的文件互拷</p></li><li><p>目录挂载：将宿主机的目录映射到容器对于目录</p></li><li><p>查看容器IP</p><p><img src="https://p.pstatp.com/origin/137790000e94c44c55e60" alt="1559728403934.png"></p></li><li><p>容器删除：只能删除停止状态的容器；docker rm `docker ps -a -q`</p></li></ul><h2 id="7-MySQL容器部署"><a href="#7-MySQL容器部署" class="headerlink" title="7. MySQL容器部署"></a>7. MySQL容器部署</h2><p><strong>目标</strong>：拉取mysql镜像，启动容器，操作容器中的mysql</p><p><strong>分析</strong>：</p><ol><li><p>拉取mysql镜像；</p></li><li><p>创建并启动守护式容器；</p></li><li><p>在容器中操作mysql；</p></li><li><p>使用图形界面工具（windows）操作在docker中安装的mysql；在创建mysql容器的时候使用-p指定端口映射实现连接</p><p>在创建容器的时候mysql的root用户可以指定远程访问的密码。</p></li></ol><p><strong>小结</strong>：</p><blockquote><p>在创建容器的时候指定环境变量MYSQL_ROOT_PASSWORD表示使用root进行远程连接时候的密码。如果需要进行远程连接的话可以使用-p进行端口映射。</p></blockquote><h2 id="8-Tomcat容器部署"><a href="#8-Tomcat容器部署" class="headerlink" title="8. Tomcat容器部署"></a>8. Tomcat容器部署</h2><p><strong>目标</strong>：拉取tomcat镜像，启动容器，操作容器中的tomcat</p><p><strong>分析</strong>：</p><ul><li><p>将项目文件上传到容器中的tomcat目录（webapps）</p><p>创建容器的时候可以指定-v进行目录挂载，tomcat在容器中的目录（/usr/local/tomcat/webapps）</p></li><li><p>可以通过外部浏览器访问容器中的项目</p><p>创建容器的时候可以指定-p进行端口映射</p></li></ul><ol><li>拉取tomcat镜像；<code>docker pull tomcat</code></li><li>创建并启动tomcat容器；</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=mytomcat -p 9000:8080 -v /usr/<span class="built_in">local</span>/tomcat/webapps:/usr/<span class="built_in">local</span>/tomcat/webapps tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li><p>访问容器中tomcat</p><p><a href="http://192.168.76.128:9000/">http://192.168.76.128:9000</a></p></li></ol><p><strong>小结</strong>：</p><blockquote><p>上传项目文件可以使用容器的目录挂载功能，外部访问可以使用端口映射</p></blockquote><h2 id="9-Nginx容器部署"><a href="#9-Nginx容器部署" class="headerlink" title="9. Nginx容器部署"></a>9. Nginx容器部署</h2><p><strong>目标</strong>：拉取nginx镜像，启动容器，访问nginx</p><p><strong>分析</strong>：</p><p>nginx的默认访问端口是：80</p><p>在创建容器的时候需要进行端口映射，指定-p，映射的端口80</p><ol><li>拉取nginx镜像；</li><li>创建并启动nginx容器；</li><li>在浏览器上访问容器中nginx，<a href="http://192.168.76.128/">http://192.168.76.128</a></li></ol><p><strong>小结</strong>：</p><blockquote><p>如果被占用了80端口，那么在指定映射的时候可以改变宿主机的端口映射，在访问时也需要带上端口号。</p></blockquote><h2 id="10-Redis容器部署"><a href="#10-Redis容器部署" class="headerlink" title="10. Redis容器部署"></a>10. Redis容器部署</h2><p><strong>目标</strong>：拉取redis镜像，启动容器，操作容器中的redis</p><p><strong>分析</strong>：</p><ol><li>拉取redis镜像；</li><li>创建并启动redis容器；默认端口是6379，如果需要外部访问则可以使用端口映射；</li><li>连接redis: ①使用命令行客户端 ②使用图形界面工具</li></ol><p><strong>小结</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker run -di --name=myredis -p 6379:6379 redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it myredis /bin/bash</span><br></pre></td></tr></table></figure><h2 id="11-docker-compose简介-amp-安装"><a href="#11-docker-compose简介-amp-安装" class="headerlink" title="11. docker-compose简介&amp;安装"></a>11. docker-compose简介&amp;安装</h2><p><strong>目标</strong>：docker-compose的作用；能够安装docker-compose</p><p><strong>小结</strong>：</p><p>docker-compose是一个应用工具；可以通过配置docker-compose.yml文件同时启动多个容器。</p><blockquote><p>部署项目时可以编写一个docker-compose.yml文件作为启动项目单位，同时启动项目相关的那些容器。</p></blockquote><h2 id="12-docker-compose应用"><a href="#12-docker-compose应用" class="headerlink" title="12. docker-compose应用"></a>12. docker-compose应用</h2><p><strong>目标</strong>：编写模版文件同时启动docker容器</p><p><strong>分析</strong>：</p><p>docker-compose可以实现一次启动多个容器；通过配置docker-compose模板文件（docker-compose.yml）,在这个配置文件中去配置各个容器及其相关的依赖。</p><ol><li>编写模板文件；</li><li>创建并启动docker-compose项目（模板文件所在的目录，docker-compose.yml）</li><li>测试</li></ol><p><strong>小结</strong>：</p><p>docker-compose可以配置一个模板文件实现一次可以启动多个容器，运行时候可以执行一个up则会创建并启动模板文件中的各个服务。</p><blockquote><p>模板文件是yml格式的；编写的时候需要注意其格式。</p></blockquote><h2 id="13-迁移与备份"><a href="#13-迁移与备份" class="headerlink" title="13. 迁移与备份"></a>13. 迁移与备份</h2><p><strong>目标</strong>：能够将容器保存为镜像，备份，恢复镜像再启动以恢复的镜像作为基础的容器</p><p><strong>分析</strong>：</p><p>在当前的容器中安装了各种组件；期望在其他服务器上也能快速拥有该容器的一切环境；可以将当前的容器制作为一个镜像，再将该奖项复制到其他服务器，其他服务器再基于镜像运行容器。</p><ol><li>将容器保存为一个镜像；</li><li>备份镜像；</li><li>恢复镜像；</li><li>基于镜像运行容器</li></ol><p><strong>小结</strong>：</p><p>docker容器可以保存为一个镜像；备份为一个镜像包（*.tar）可以复制迁移到其他服务器，再恢复该tar包中的镜像，基于镜像运行容器实现环境的一致。</p><h2 id="14-使用Dockerfile创建镜像"><a href="#14-使用Dockerfile创建镜像" class="headerlink" title="14. 使用Dockerfile创建镜像"></a>14. 使用Dockerfile创建镜像</h2><p><strong>目标</strong>：使用Dockerfile创建一个自定义jdk1.8的镜像</p><p><strong>分析</strong>：</p><p>假设在centos7作为基础镜像上；添加jdk1.8并构建一个包含jdk1.8的centos7新镜像。</p><p>– Dockerfile可以实现；Dockerfile是由一系列命令和参数构成的文本文件，在文件中可以指定各个组件资源和运行命令等。</p><p>实现步骤：</p><ol><li>拉取centos7镜像；</li><li>上传jdk1.8；</li><li>编写Dockerfile文件；</li><li>构建镜像；</li><li>测试（基于新镜像创建并运行容器，运行java -version）</li></ol><p><strong>小结</strong>：</p><p>Dockerfile可以基于镜像制作镜像；<code>docker build -t=&#39;jdk1.8&#39; . </code></p><h2 id="15-私有仓库搭建与配置"><a href="#15-私有仓库搭建与配置" class="headerlink" title="15. 私有仓库搭建与配置"></a>15. 私有仓库搭建与配置</h2><p><strong>目标</strong>：拉取、启动私有仓库镜像并可以访问私有仓库</p><p><strong>小结</strong>：</p><p>拉取registry镜像；基于镜像创建私有仓库容器；需要去修改docker的一个配置文件指定私有仓库地址；再访问私有仓库：<a href="http://ip:5000/v2/_catalog">http://ip:5000/v2/_catalog</a></p><h2 id="16-将镜像上传至私有仓库"><a href="#16-将镜像上传至私有仓库" class="headerlink" title="16. 将镜像上传至私有仓库"></a>16. 将镜像上传至私有仓库</h2><p><strong>目标</strong>：将制作的jdk1.8的镜像上传到私有仓库</p><p><strong>小结</strong>：</p><p>将本地镜像打标签（标记本地镜像为一个私有仓库中的镜像）；将打了标签的镜像推送到私有仓库。</p><h2 id="17-从私有仓库拉取镜像"><a href="#17-从私有仓库拉取镜像" class="headerlink" title="17. 从私有仓库拉取镜像"></a>17. 从私有仓库拉取镜像</h2><p><strong>目标</strong>：将私有仓库中的jdk1.8镜像拉取到本地</p><p><strong>小结</strong>：</p><ul><li>私有仓库与拉取镜像的服务器是在同一台机器上：直接拉取镜像； <code>docker pull 私有仓库地址/镜像名称</code></li><li>私有仓库与拉取镜像的服务器是不在同一台机器上：需要去修改docker的配置文件，指定私有仓库地址；再执行拉取镜像的命令。</li></ul><blockquote><p>如果本地存在同名的镜像需要先删除镜像后拉取</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java虚拟机</title>
      <link href="/archives/e2233340.html"/>
      <url>/archives/e2233340.html</url>
      
        <content type="html"><![CDATA[<p>1、java中会存在内存泄漏吗，请简单描述。<br>会。自己实现堆载的数据结构时有可能会出现内存泄露，可参看effective java.<br>2、64 位 JVM 中，int 的长度是多数？<br>Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位<br>的 Java 虚拟机中，int 类型的长度是相同的。<br>3、Serial 与 Parallel GC 之间的不同之处？<br>Serial 与 Parallel 在 GC 执行的时候都会引起 stop-the-world。它们之间主要不同 serial 收集器是默认<br>的复制收集器，执行 GC 的时候只有一个线程，而parallel 收集器使用多个 GC 线程来执行。<br>4、32 位和 64 位的 JVM，int 类型变量的长度是多数？<br>32 位和 64 位的 JVM 中，int 类型变量的长度是相同的，都是 32 位或者 4个字节。<br>5、Java 中 WeakReference 与 SoftReference 的区别？<br>虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一<br>旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不<br>足的时候。<br>6、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要<br>使用<br>当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从32 位增加到了 64 位，因此<br>堆内存会突然增加，差不多要翻倍。这也会对 CPU缓存（容量比内存小很多）的数据产生不利的影响。<br>因为，迁移到 64 位的 JVM主要动机在于可以指定最大堆大小，通过压缩 OOP 可以节省一定的内存。<br>通过-XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。<br>7、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？<br>你可以检查某些系统属性如 sun.arch.data.model 或 os.arch 来获取该信息。<br>8、32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？<br>理论上说上 32 位的 JVM 堆内存可以到达 2^32，即 4GB，但实际上会比这个小很多。不同操作系统之<br>间不同，如 Windows 系统大约 1.5 GB，Solaris 大约3GB。64 位 JVM 允许指定最大的堆内存，理论上<br>可以达到 2^64，这是一个非常大的数字，实际上你可以指定堆内存大小到 100GB。甚至有的 JVM，如<br>Azul，堆内存到 1000G 都是可能的。<br>9、JRE、JDK、JVM 及 JIT 之间有什么不同？<br>JRE 代表 Java 运行时（Java run-time），是运行 Java 引用所必须的。JDK 代表 Java 开发工具（Java<br>development kit），是 Java 程序的开发工具，如 Java编译器，它也包含 JRE。JVM 代表 Java 虚拟机<br>（Java virtual machine），它的责任是运行 Java 应用。JIT 代表即时编译（Just In Time<br>compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的<br>热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。<br>10、解释 Java 堆空间及 GC？<br>当通过 Java 命令启动 Java 进程的时候，会为它分配内存。内存的一部分用于创建堆空间，当程序中创<br>建对象的时候，就从对空间中分配内存。GC 是 JVM 内部的一个进程，回收无效对象的内存用于将来的<br>分配。<br>11、JVM 内存区域</p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/images@master/img/2021/07/0120210701090518.png" alt="image-20210701090518391"></p><p>JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区域【JAVA<br>堆、方法区】、直接内存。<br>线程私有数据区域生命周期与线程相同, 依赖用户线程的启动/结束 而 创建/销毁(在 Hotspot VM 内, 每<br>个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的生/死对应)。<br>线程共享区域随虚拟机的启动/关闭而创建/销毁。<br>直接内存并不是 JVM 运行时数据区的一部分, 但也会被频繁的使用: 在 JDK 1.4 引入的 NIO 提供了基于<br>Channel 与 Buffer 的 IO 方式, 它可以使用 Native 函数库直接分配堆外内存, 然后使用<br>DirectByteBuffer 对象作为这块内存的引用进行操作(详见: Java I/O 扩展), 这样就避免了在 Java堆和<br>Native 堆中来回复制数据, 因此在一些场景中可以显著提高性能。</p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/images@master/img/2021/07/0120210701090555.png" alt="image-20210701090555488"></p><p>12、程序计数器(线程私有)<br>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数<br>器，这类内存也称为“线程私有” 的内存。<br>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址） 。如果还是<br>Native 方法，则为空。<br>这个内存区域是唯一一个在虚拟机中没有规定任何 OutOfMemoryError 情况的区域。<br>13、虚拟机栈(线程私有)<br>是描述java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储<br>局部变量表、操作数栈、动态链接、方法出口等信息。 每一个方法从调用直至执行完成的过程，就对应<br>着一个栈帧在虚拟机栈中入栈到出栈的过程。<br>栈帧（ Frame）是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接(Dynamic<br>Linking)、 方法返回值和异常分派（ Dispatch Exception）。 栈帧随着方法调用而创建，随着方法结束<br>而销毁——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算作方法结束。</p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/images@master/img/2021/07/0120210701090627.png" alt="image-20210701090626960"></p><p>14、本地方法区(线程私有)<br>本地方法区和 Java Stack 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而本地方法栈则为Native 方<br>法服务, 如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个C 栈，但<br>HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一 。<br>15、你能保证 GC 执行吗？<br>不能，虽然你可以调用 System.gc() 或者 Runtime.gc()，但是没有办法保证 GC的执行。<br>16、怎么获取 Java 程序使用的内存？堆使用的百分比？<br>可以通过 java.lang.Runtime 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些<br>方法你也可以获取到堆使用的百分比及堆内存的剩余空间。Runtime.freeMemory() 方法返回剩余空间<br>的字节数，Runtime.totalMemory()方法总内存的字节数，Runtime.maxMemory() 返回最大内存的字<br>节数。<br>17、Java 中堆和栈有什么区别？</p><p>JVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在<br>堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。<br>18、描述一下 JVM 加载 class 文件的原理机制<br>JVM 中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java 中的类加载器是一个重要的<br>Java 运行时系统组件，它负责在运行时查找和装入类文件中的类。<br>由于 Java 的跨平台性，经过编译的 Java 源程序并不是一个可执行程序，而是一个或多个类文件。当<br>Java 程序需要使用某个类时，JVM 会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类<br>的加载是指把类的.class 文件中的数据读入到内存中，通常是创建一个字节数组读入.class 文件，然后<br>产生与所加载类对应<br>的 Class 对象。<br>加载完成后，Class 对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段<br>包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三<br>个步骤。最后 JVM 对<br>类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)<br>如果类中存在初始化语句，就依次执行这些初始化语句。<br>类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、<br>系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader 的子类）。<br>从 Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM 更好的保证了 Java 平台<br>的安全性，在该机制中，JVM 自带的 Bootstrap 是根加载器，其他的加载器都有且仅有一个父类加载<br>器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM 不会<br>向 Java 程序提供对 Bootstrap 的引用。下面是关于几个类<br>加载器的说明：</p><ol><li><p>Bootstrap：一般用本地代码实现，负责加载 JVM 基础核心类库（rt.jar）；</p></li><li><p>Extension：从 java.ext.dirs 系统属性所指定的目录中加载类库，它的父加载器是 Bootstrap；</p></li><li><p>System：又叫应用类加载器，其父类是 Extension。它是应用最广泛的类加载器。它从环境变量<br>classpath 或者系统属性 java.class.path 所指定的目录中记载类，是用户自定义加载器的默认父加<br>  载器。<br>  19、GC 是什么？为什么要有 GC？<br>  GC 是垃 圾收 集的 意思 ，内存 处理 是编 程人 员容 易出 现问 题的 地方 ，忘记 或者 错误的内 存回 收<br>  会 导致 程序 或系 统的 不稳 定甚 至崩 溃， Java 提供 的 GC 功能 可以 自动监测 对象 是否 超过 作用<br>  域从 而达 到自 动回 收内 存的 目的 ，Java 语言 没有 提供 释放已分 配内 存的 显示 操作 方法 。Java<br>  程序 员不 用担 心内 存管 理， 因为 垃圾 收集 器会自动 进行 管理 。要 请求 垃圾 收集 ，可 以调 用下<br>  面的 方法 之一 ：System.gc() 或Runtime.getRuntime().gc() ，但 JVM 可以 屏蔽 掉显 示的 垃圾 回收<br>  调用 。<br>  垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低<br>  优先级的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回<br>  收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。在 Java 诞生初期，垃圾<br>  回收是 Java最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过境迁，如今</p></li></ol><p>  Java 的垃圾回收机制已经成为被诟病的东。移动智能终端用户通常觉得 iOS 的系统比 Android 系统有<br>  更好的用户体验，其中一个深层次的原因就在于 Android 系统中垃圾回收的不可预知性。<br>  20、堆（Heap-线程共享） -运行时数据区<br>  是被线程共享的一块内存区域， 创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾<br>  收集的最重要的内存区域。 由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以细分为:<br>  新生代(Eden 区、 From Survivor 区和 To Survivor 区)和老年代。<br>  21、方法区/永久代（线程共享）<br>  即我们常说的永久代(Permanent Generation), 用于存储被 JVM 加载的类信息、 常量、 静态变量、 即<br>  时编译器编译后的代码等数据. HotSpot VM把GC分代收集扩展至方法区, 即使用Java堆的永久代来实现<br>  方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存,而不必为方法区开发专<br>  门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型的卸载, 因此收益一般很小)<br>  。<br>  运行时常量池（Runtime Constant Pool）是方法区的一部分。 Class 文件中除了有类的版本、字段、<br>  方法、接口等描述等信息外，还有一项信息是常量池 （Constant Pool Table），用于存放编译期生成<br>  的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。 Java 虚拟机对<br>  Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都<br>  必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。</p><p>  22、JVM 运行时内存<br>  Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、 From Survivor 区和 To Survivor 区)和老年代。</p><p>  23、新生代<br>  是用来存放新生的对象。一般占据堆的 1/3 空间。由于频繁创建对象，所以新生代会频繁触发MinorGC<br>  进行垃圾回收。新生代又分为 Eden 区、 ServivorFrom、 ServivorTo 三个区。<br>  Eden 区<br>  Java 新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当 Eden 区内存不够<br>  的时候就会触发 MinorGC，对新生代区进行一次垃圾回收。</p><p>ServivorFrom<br>上一次 GC 的幸存者，作为这一次 GC 的被扫描者。<br>ServivorTo<br>保留了一次 MinorGC 过程中的幸存者。<br>MinorGC 的过程（复制-&gt;清空-&gt;互换）<br>MinorGC 采用复制算法。<br>1： eden、 servicorFrom 复制到 ServicorTo，年龄+1<br>首先，把 Eden 和 ServivorFrom 区域中存活的对象复制到 ServicorTo 区域（如果有对象的年龄以及达<br>到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1（如果 ServicorTo 不够位置了就放<br>到老年区）；<br>2： 清空 eden、 servicorFrom<br>然后，清空 Eden 和 ServicorFrom 中的对象；<br>3： ServicorTo 和 ServicorFrom 互换<br>最后， ServicorTo 和 ServicorFrom 互换，原 ServicorTo 成为下一次 GC 时的 ServicorFrom区。<br>24、老年代<br>主要存放应用程序中生命周期长的内存对象。<br>老年代的对象比较稳定，所以 MajorGC 不会频繁执行。在进行 MajorGC 前一般都先进行了一次<br>MinorGC，使得有新生代的对象晋身入老年代，导致空间不够用时才触发。当无法找到足够大的连续空<br>间分配给新创建的较大对象时也会提前触发一次 MajorGC 进行垃圾回收腾出空间。<br>MajorGC 采用标记清除算法：首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对<br>象。 ajorGC 的耗时比较长，因为要扫描再回收。 MajorGC 会产生内存碎片，为了减少内存损耗，我们<br>一般需要进行合并或者标记出来方便下次直接分配。当老年代也满了装不下的时候，就会抛出<br>OOM（Out of Memory）异常。<br>25、永久代<br>指内存的永久保存区域，主要存放 Class 和 Meta（元数据）的信息,Class 在被加载的时候被放入永久<br>区域， 它和和存放实例的区域不同,GC 不会在主程序运行期对永久区域进行清理。所以这也导致了永久<br>代的区域会随着加载的 Class 的增多而胀满，最终抛出 OOM 异常。<br>26、JAVA8 与元数据<br>在 Java8 中， 永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代。元空间的本质和永<br>久代类似，元空间与永久代之间最大的区别在于： 元空间并不在虚拟机中，而是使用本地内存。因此，<br>默认情况下，元空间的大小仅受本地内存限制。 类的元数据放入 nativememory, 字符串池和类的静态<br>变量放入 java 堆中， 这样可以加载多少类的元数据就不再由MaxPermSize 控制, 而由系统的实际可用<br>空间来控制。<br>27、引用计数法</p><p>在 Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。因此，很显然一个简单的办<br>法是通过引用计数来判断一个对象是否可以回收。简单说，即一个对象如果没有任何与之关联的引用，<br>即他们的引用计数都不为 0， 则说明对象不太可能再被用到，那么这个对象就是可回收对象。<br>28、可达性分析<br>为了解决引用计数法的循环引用问题， Java 使用了可达性分析的方法。通过一系列的“GC roots”对象作<br>为起点搜索。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的。要注意的是，<br>不可达对象不等价于可回收对象， 不可达对象变为可回收对象至少要经过两次标记过程。两次标记后仍<br>然是可回收对象，则将面临回收。<br>29、标记清除算法（ Mark-Sweep）<br>最基础的垃圾回收算法，分为两个阶段，标注和清除。标记阶段标记出所有需要回收的对象，清除阶段<br>回收被标记的对象所占用的空间。如图</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java常见小问题总结</title>
      <link href="/archives/e2e7f88.html"/>
      <url>/archives/e2e7f88.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h3 id="Stringbuffer"><a href="#Stringbuffer" class="headerlink" title="Stringbuffer"></a>Stringbuffer</h3><p>demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> runrab</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer a = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        StringBuffer b = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        operator(a,b);</span><br><span class="line">        System.out.println(a+<span class="string">&quot;,&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">(StringBuffer x,StringBuffer y)</span></span>&#123;</span><br><span class="line">        x.append(y);</span><br><span class="line">        y=x;</span><br><span class="line">       <span class="comment">// x的值分配给&#x27;y&#x27;是从未使用过</span></span><br><span class="line">        <span class="comment">//&#x27;x&#x27; 可能不应分配给 &#x27;y&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是说这y=x;根本就没起作用。</p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/images@master/img/2021/06/2720210627162151.png" alt="Snipaste_2021-06-27_16-19-44"></p><h3 id="2：java中-String-a-new-String-“1”-”2”-创建了几个对象"><a href="#2：java中-String-a-new-String-“1”-”2”-创建了几个对象" class="headerlink" title="2：java中 String a=new String(“1”+”2”)创建了几个对象"></a>2：java中 String a=new String(“1”+”2”)创建了几个对象</h3><p>2个：a值和a引用地址，也叫引用对象。<strong>一个是”1”+”2” 创建后就会放入常量池中，一个是new String()。</strong></p><p>引用变量和对象，对象一般通过new在堆中创建，s只是一个引用变量。</p><p>所有的字符串都是String对象，由于字符串文字的大量使用，java中为了节省时间，在编译阶段，会把字符串文字放在文字池中，文字池的一个好处就是可以把相同的字符串合并，占用一个空间，我们可以用==判断一下两个引用变量是否指向了一个地址即一个对象。</p><h3 id="3String-str-”aaa”-与String-str-new-String-“aaa”-一样吗？"><a href="#3String-str-”aaa”-与String-str-new-String-“aaa”-一样吗？" class="headerlink" title="3String str=”aaa”,与String str=new String(“aaa”)一样吗？"></a>3String str=”aaa”,与String str=new String(“aaa”)一样吗？</h3><p>一共有两个引用，三个对象。因为”aa”与”bb”都是常量，常量的值不能改变，当执行字符串拼接时候，<br>会创建一个新的常量是” aabbb”,有将其存到常量池中。</p><h3 id="4StringString-StringBuffffer-和-StringBuilder-的区别是什"><a href="#4StringString-StringBuffffer-和-StringBuilder-的区别是什" class="headerlink" title="4StringString StringBuffffer 和 StringBuilder 的区别是什"></a>4StringString StringBuffffer 和 StringBuilder 的区别是什</h3><p>么？<br>String是只读字符串，它并不是基本数据类型，而是一个对象。从底层源码来看是一个fifinal类型的字<br>符<br>数组，所引用的字符串不能被改变，一经定义，无法再增删改。每次对String的操作都会生成新的<br>String对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private final char value[];</span><br></pre></td></tr></table></figure><p><strong>每次+操作 ： 隐式在堆上new了一个跟原字符串相同的StringBuilder对象，再调用append方法 拼接</strong><br><strong>+后面的字符。</strong><br>StringBuffer与StringBuilder都继承了AbstractStringBulder类，而AbtractStringBuilder又实现了<br>CharSequence接口，两个类都是用来进行字符串操作的。<br>在做字符串拼接修改删除替换时，效率比string更高。<br>StringBuffer是线程安全的，Stringbuilder是非线程安全的。所以Stringbuilder比stringbuffer效率更<br>高，StringBuffer的方法大多都加了synchronized关键字</p><h3 id="5Hashcode的作用"><a href="#5Hashcode的作用" class="headerlink" title="5Hashcode的作用"></a>5Hashcode的作用</h3><p>java的集合有两类，一类是List，还有一类是Set。<strong>前者有序可重复，后者无序不重复。</strong>当我们在set中<br>插入的时候怎么判断是否已经存在该元素呢，可以通过<strong>equals方法</strong>。但是如果元素太多，用这样的方法<br>就会比较满。<br>于是有人发明了<strong>哈希算法来提高集合中查找元素的效率</strong>。 这种方式将集合分成若干个存储区域，每个对<br>象可以计算出一个<strong>哈希码</strong>，可以将<strong>哈希码分组</strong>，每组分别对应某个存储区域，根据一个对象的哈希码就<br>可以确定该对象应该存储的那个区域。<br>hashCode方法可以这样理解：<strong>它返回的就是根据对象的内存地址换算出的一个值</strong>。这样一来，当集合<br>要添加新的元素时，<strong>先调用这个元素的hashCode方法</strong>，就一下子能定位到它应该放置的物理位置上。<br>如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了<strong>；如果这个位置上</strong><br><strong>已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地</strong><br><strong>址。</strong>这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。</p><h3 id="6Java创建对象有几种方式？"><a href="#6Java创建对象有几种方式？" class="headerlink" title="6Java创建对象有几种方式？"></a>6Java创建对象有几种方式？</h3><p>java中提供了以下四种创建对象的方式:</p><ol><li><strong>new</strong>创建新对象</li><li>通过<strong>反射</strong>机制</li><li>采用<strong>clone</strong>机制</li><li>通过<strong>序列化</strong>机制</li></ol><h3 id="7有没有可能两个不相等的对象有相同的hashcode"><a href="#7有没有可能两个不相等的对象有相同的hashcode" class="headerlink" title="7有没有可能两个不相等的对象有相同的hashcode"></a>7有没有可能两个不相等的对象有相同的hashcode</h3><p>有可能.在产生hash冲突时,两个不相等的对象就会有相同的 hashcode 值.当hash冲突产生时,一般有以<br>下几种方式来处理:</p><ol><li><strong>拉链法</strong>:每个哈希表节点都有一个next指针,多个哈希表节点可以用next指针构成一个单向链表，被<br>分配到同一个索引上的多个节点可以用这个单向链表进行存储.</li><li><strong>开放定址法</strong>:一旦发生了冲突,就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找<br>到,并将记录存入</li><li><strong>再哈希</strong>:又叫双哈希法,有多个不同的Hash函数.当发生冲突时,使用第二个,第三个….等哈希函数计算<br>地址,直到无冲突.</li></ol><h3 id="8拷贝和浅拷贝的区别是什么"><a href="#8拷贝和浅拷贝的区别是什么" class="headerlink" title="8拷贝和浅拷贝的区别是什么?"></a>8拷贝和浅拷贝的区别是什么?</h3><p><strong>浅拷贝</strong>:</p><p>​        被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向原来的对象.<br>​    换言之,<strong>浅拷贝仅仅复制所考虑的对象,而不复制它所引用的对象.</strong><br><strong>深拷贝:</strong><br>​        被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被复制过的新对<br>​    象.而不再是原有的那些被引用的对象.换言之.<strong>深拷贝把要复制的对象所引用的对象都复制了一遍.</strong></p><h3 id="9static都有哪些用法"><a href="#9static都有哪些用法" class="headerlink" title="9static都有哪些用法?"></a>9static都有哪些用法?</h3><p><strong>静态变量</strong>和<strong>静态方法</strong>.也就是被static所修饰的变量/方法<br>都属于类的静态资源,<strong>类实例所共享</strong>.<br>除了静态变量和静态方法之外,static也用于<strong>静态块</strong>,<strong>多用于初始化操作</strong></p><p>最后一种用法就是<strong>静态导包</strong>,即 import static .import static是在JDK 1.5之后引入的新特性,可以用来指<br>定导入某个类中的静态资源,并且不需要使用类名,可以直接使用资源名</p><p>demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import static java.lang.Math.*;</span><br></pre></td></tr></table></figure><h3 id="10a-a-b与a-b有什么区别吗"><a href="#10a-a-b与a-b有什么区别吗" class="headerlink" title="10a=a+b与a+=b有什么区别吗?"></a>10a=a+b与a+=b有什么区别吗?</h3><p>+= 操作符会进行<strong>隐式自动类型转换</strong>,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型,<br>而a=a+b则<strong>不会自动进行类型转换</strong>.</p><p>+=操作符会对右边的表达式结果<strong>强转匹配左边</strong>的数据类型</p><h3 id="11final、finalize-、finally"><a href="#11final、finalize-、finally" class="headerlink" title="11final、finalize()、finally"></a>11final、finalize()、finally</h3><p><strong>性质不同</strong></p><ol><li><p>final为关键字；</p></li><li><p><strong>finalize()为方法</strong>；</p></li><li><p>finally为区块标志，用于try语句中；<br>作用</p></li><li><p>final为用于<strong>标识常量的关键字</strong>，final标识的关键字存储在<strong>常量池</strong>中</p></li><li><p>finalize()方法<strong>在Object中进行了定义</strong>，用于在对象“消失”时，<strong>由JVM进行调用用于对对象进行垃圾</strong><br><strong>回收</strong>，类似于C++中的析构函数；用户自定义时，用于释放对象占用的资源（比如进行I/0操作）；</p></li><li><p>finally{}用于标识代码块，与try{}进行配合，不论try中的代码执行完或没有执行完（这里指有异<br>常），该代码块之中的程序必定会进行；</p></li><li><p><strong>Java 中的 final 关键字用法</strong><br>(1)修饰类：表示该类不能被继承；<br>  (2)修饰方法：表示方法不能被重写；<br>  (3)修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</p></li><li><h3 id="12JDBC操作的步骤"><a href="#12JDBC操作的步骤" class="headerlink" title="12JDBC操作的步骤"></a>12JDBC操作的步骤</h3></li></ol><p>  加载数据库驱动类 打开数据库连接 执行sql语句 处理返回结果 关闭资源</p><h3 id="13在使用jdbc的时候，如何防止出现sql注入的问题。"><a href="#13在使用jdbc的时候，如何防止出现sql注入的问题。" class="headerlink" title="13在使用jdbc的时候，如何防止出现sql注入的问题。"></a>13在使用jdbc的时候，如何防止出现sql注入的问题。</h3><p>使用<strong>PreparedStatement</strong>类，而不是使用Statement类</p><h3 id="14连接池，使用连接池有什么好处？"><a href="#14连接池，使用连接池有什么好处？" class="headerlink" title="14连接池，使用连接池有什么好处？"></a>14连接池，使用连接池有什么好处？</h3><p>数据库连接是非常消耗资源的，影响到程序的性能指标。<strong>连接池是用来分配、管理、释放数据库连接</strong><br><strong>的</strong>，可以使应用程序重复使用同一个数据库连接，而不是每次都创建一个新的数据库连接。通过释放空<br>闲时间较长的数据库连接避免数据库因为创建太多的连接而造成的连接遗漏问题，提高了程序性能</p><p>Spring 推荐使用dbcp；<br>Hibernate 推荐使用<strong>c3p0</strong>和proxool</p><p>还有阿里巴巴的<strong>Druid</strong>也很不错</p><h3 id="15-amp-和-amp-amp-的区别"><a href="#15-amp-和-amp-amp-的区别" class="headerlink" title="15&amp;和&amp;&amp;的区别"></a>15&amp;和&amp;&amp;的区别</h3><p><strong>&amp;是位运算符</strong>。**&amp;&amp;是布尔逻辑运算符<strong>，在进行逻辑判断时用</strong>&amp;处理的前面为false后面的内容仍需处理**，<br><strong>用&amp;&amp;处理的前面为false不再处理后面的内容</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastApi快速做api接口</title>
      <link href="/archives/24208287.html"/>
      <url>/archives/24208287.html</url>
      
        <content type="html"><![CDATA[<h1 id="python-FastApi-快速做api接口"><a href="#python-FastApi-快速做api接口" class="headerlink" title="python FastApi 快速做api接口"></a>python FastApi 快速做api接口</h1><p>首先需要安装模块如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn</span><br><span class="line">运行代码</span><br><span class="line"></span><br><span class="line">import uvicorn as uvicorn</span><br><span class="line">from fastapi import FastAPI</span><br><span class="line">from pydantic import BaseModel</span><br><span class="line">app &#x3D; FastAPI()  # 必须实例化该类，启动的时候调用</span><br><span class="line">class People(BaseModel):  # 必须继承</span><br><span class="line">    name: str</span><br><span class="line">    age: int</span><br><span class="line">    address: str</span><br><span class="line">    salary: float</span><br></pre></td></tr></table></figure><h1 id="请求根目录"><a href="#请求根目录" class="headerlink" title="请求根目录"></a>请求根目录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.get(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return &#123;&#39;message&#39;: &#39;欢迎来到FastApi 服务！&#39;&#125;</span><br></pre></td></tr></table></figure><h1 id="get请求带参数数据"><a href="#get请求带参数数据" class="headerlink" title="get请求带参数数据"></a>get请求带参数数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.get(&#39;&#x2F;items&#x2F;&#123;item_id&#125;&#39;)</span><br><span class="line">def items(item_id: int):</span><br><span class="line">    return &#123;&#39;message&#39;: &#39;欢迎来到接口页面&#39;&#125;</span><br></pre></td></tr></table></figure><h1 id="post请求带参数数据"><a href="#post请求带参数数据" class="headerlink" title="post请求带参数数据"></a>post请求带参数数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@app.post(&#39;&#x2F;people&#39;)</span><br><span class="line">def insert(people: People):</span><br><span class="line">    age &#x3D; people.age</span><br><span class="line">    msg &#x3D; f&#39;名字：&#123;people.name&#125;，年龄：&#123;age&#125;&#39;</span><br><span class="line">    return &#123;&#39;success&#39;: True, &#39;msg&#39;: msg&#125;</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    uvicorn.run(app&#x3D;app, host&#x3D;&quot;127.0.0.1&quot;, port&#x3D;8080)</span><br></pre></td></tr></table></figure><p>运行命令</p><p>uvicorn main:app –reload<br>快速文档</p><p><a href="http://127.0.0.1:8000/docs">http://127.0.0.1:8000/docs</a><br><a href="http://127.0.0.1:8000/redoc">http://127.0.0.1:8000/redoc</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>better-sqlite3</title>
      <link href="/archives/be3b9b7b.html"/>
      <url>/archives/be3b9b7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="better-sqlite3"><a href="#better-sqlite3" class="headerlink" title="better-sqlite3"></a>better-sqlite3</h1><h3 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h3><p>Node.js 中最快、最简单的 SQLite3 库。</p><ul><li><p>全面的交易支持</p></li><li><p>高性能、高效率和安全</p></li><li><p>易于使用的同步 API <em>（比异步 API 更好的并发性……是的，你没看错）</em></p></li><li><p>支持用户定义的函数、聚合、虚拟表和扩展</p></li><li><p>64 位整数<em>（在需要之前不可见）</em></p></li><li><p>工作线程支持<em>（用于大/慢查询）</em></p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>不要升级npm7.x(虽然不影响 注意npm i 和 npm install 的区别)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install better-sqlite3</span><br></pre></td></tr></table></figure><p>注意 全局安装命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install better-sqlite3</span><br></pre></td></tr></table></figure><p>项目中安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install better-sqlite3 --save</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const db &#x3D; require(&#39;better-sqlite3&#39;)(&#39;foobar.db&#39;, options);</span><br><span class="line">const row &#x3D; db.prepare(&#39;SELECT * FROM users WHERE id &#x3D; ?&#39;).get(userId);</span><br><span class="line">console.log(row.firstName, row.lastName, row.email);</span><br></pre></td></tr></table></figure><p>官网给的例子并不好懂</p><p>官方github <a href="https://github.com/JoshuaWise/better-sqlite3">https://github.com/JoshuaWise/better-sqlite3</a></p><p>api文档：<a href="https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md">https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md</a></p><h3 id="来点机器中文翻译"><a href="#来点机器中文翻译" class="headerlink" title="来点机器中文翻译"></a>来点机器中文翻译</h3><p>没找到中文文档:看着不是特别方便，就自己留一份吧</p><h3 id="new-Database-path-options"><a href="#new-Database-path-options" class="headerlink" title="new Database(path, [options])"></a>new Database(<em>path</em>, [<em>options</em>])</h3><p>创建新的数据库连接。如果数据库文件不存在，则创建该文件。这是同步发生的，这意味着您可以立即开始执行查询。你可以通过传递: memory: 作为第一个参数来创建一个内存数据库。您可以通过传递一个空字符串(或者省略所有参数)来创建临时数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">内存中的数据库也可以通过传递 .Serialize () ，而不是将字符串作为第一个参数传递。</span><br></pre></td></tr></table></figure><ul><li><p><code>options.readonly</code>: </p><p>Readonly: 以 readonly 模式打开数据库连接(默认值: false)。</p></li><li><p><code>options.fileMustExist</code>:</p><p>如果数据库不存在，将抛出一个 Error，而不是创建一个新文件。对于内存中、临时或只读数据库连接，忽略此选项(默认值为 false)。</p></li><li><p><code>options.timeout</code>: </p><p>Timeout: 在抛出 SQLITE _ busy 错误(默认值: 5000)之前，在锁定的数据库上执行查询时等待的毫秒数。</p></li><li><p><code>options.verbose</code>:</p><p>Verbose: 提供一个函数，该函数在数据库连接执行每个 SQL 字符串时调用(默认值: null)。</p></li></ul><h4 id="不用翻译了，太难受还是直接看英文文档合适"><a href="#不用翻译了，太难受还是直接看英文文档合适" class="headerlink" title="不用翻译了，太难受还是直接看英文文档合适"></a>不用翻译了，太难受还是直接看英文文档合适</h4>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-：关于网站"><a href="#一-：关于网站" class="headerlink" title="一 ：关于网站"></a>一 ：关于网站</h1><h1 id="二：我搭建的"><a href="#二：我搭建的" class="headerlink" title="二：我搭建的"></a>二：我搭建的</h1><h2 id="github代理"><a href="#github代理" class="headerlink" title="github代理"></a>github代理</h2><p>地址：<a href="https://gh.runrab.workers.dev/">https://gh.runrab.workers.dev</a></p><h4 id="使用方法：git-或者直接网页下载"><a href="#使用方法：git-或者直接网页下载" class="headerlink" title="使用方法：git 或者直接网页下载"></a>使用方法：git 或者直接网页下载</h4><p>git clone <a href="https://gh.runrab.workers.dev/%E4%BD%A0%E8%A6%81%E5%85%8B%E9%9A%86%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0%E4%B8%8D%E5%8A%A0.git">https://gh.runrab.workers.dev/你要克隆的仓库名称不加.git</a></p><p>demo :  <a href="https://github.com/runrab/python-get-images-url.git">https://github.com/runrab/python-get-images-url.git</a></p><p>git clone <a href="https://gh.runrab.workers.dev/https://github.com/runrab/python-get-images-url">https://gh.runrab.workers.dev/https://github.com/runrab/python-get-images-url</a></p><h2 id="1-onedrive网盘"><a href="#1-onedrive网盘" class="headerlink" title="1.onedrive网盘"></a>1.onedrive网盘</h2><h4 id="推荐：-https-pan-runrab-com-基于阿里云函数计算FC"><a href="#推荐：-https-pan-runrab-com-基于阿里云函数计算FC" class="headerlink" title="推荐： https://pan.runrab.com/  基于阿里云函数计算FC"></a>推荐： <a href="https://pan.runrab.com/">https://pan.runrab.com/</a>  基于阿里云函数计算FC</h4><h4 id="不推荐："><a href="#不推荐：" class="headerlink" title="不推荐："></a>不推荐：</h4><p>直连地址：<a href="https://runrab.herokuapp.com/">https://runrab.herokuapp.com</a></p><p>cf代理地址：<a href="https://pan.runrab.workers.dev/">https://pan.runrab.workers.dev</a></p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>图片：<a href="https://pan.runrab.com/images/meizi/btstu/1.jpg">https://pan.runrab.com/images/meizi/btstu/1.jpg</a></p><p><img src="https://pan.runrab.com/images/meizi/btstu/1.jpg"></p><p>视频 <a href="https://pan.runrab.com/video/%E5%A4%A9%E6%B0%94%E4%B9%8B%E5%AD%90.mp4">https://pan.runrab.com/video/%E5%A4%A9%E6%B0%94%E4%B9%8B%E5%AD%90.mp4</a></p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://pan.runrab.com/video/%E5%A4%A9%E6%B0%94%E4%B9%8B%E5%AD%90.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <h2 id="2：api"><a href="#2：api" class="headerlink" title="2：api"></a>2：api</h2><h4 id="1-图片api"><a href="#1-图片api" class="headerlink" title="1.图片api"></a>1.图片api</h4><p>地址： <a href="https://api.runrab.com/">https://api.runrab.com</a></p><p><a href="https://api-runrab.vercel.app/">https://api-runrab.vercel.app</a></p><p>demo:  <a href="https://api.runrab.com/img/pic">https://api.runrab.com/img/pic</a></p><p>或者 <a href="https://api.runrab.com/img/pic">https://api.runrab.com/img/pic</a></p><p>使用 sqlite3存储数据 内存模式比较复杂,暂时移除，暂时不将不用将文件加载到内存中</p><p>demo: <a href="https://api-runrab.vercel.app/img/pic">https://api-runrab.vercel.app/img/pic</a></p><p>json格式： <a href="https://api.runrab.com/img/json">https://api.runrab.com/img/json</a></p><h3 id="3图床"><a href="#3图床" class="headerlink" title="3图床"></a>3图床</h3><p>地址： <a href="https://pic.runrab.com/">https://pic.runrab.com/</a></p><p>demo:  <a href="https://cdn.jsdelivr.net/gh/hs-p/pic@main/003.35h6t10ff980.jpg">https://cdn.jsdelivr.net/gh/hs-p/pic@main/003.35h6t10ff980.jpg</a></p><p><img src="https://cdn.jsdelivr.net/gh/hs-p/pic@main/003.35h6t10ff980.jpg"></p><p>vercel代理 <a href="https://img-plus.vercel.app/003.35h6t10ff980.jpg">https://img-plus.vercel.app/003.35h6t10ff980.jpg</a></p><p><img src="https://img-plus.vercel.app/003.35h6t10ff980.jpg"></p><h2 id="4：pixiv代理"><a href="#4：pixiv代理" class="headerlink" title="4：pixiv代理"></a>4：pixiv代理</h2><h3 id="cloudfare-代理"><a href="#cloudfare-代理" class="headerlink" title="cloudfare 代理"></a>cloudfare 代理</h3><p>地址：https://<strong>i.pximg.net</strong>替换为 <a href="https://pixiv.runrab.workers.dev/">https://pixiv.runrab.workers.dev</a></p><p>例如 https://<strong>i.pximg.net</strong>/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg</p><p>换成  <a href="https://pixiv.runrab.workers.dev/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg">https://pixiv.runrab.workers.dev/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg</a></p><p><img src="https://pixiv.runrab.workers.dev/img-original/img/2020/06/05/00/00/07/82092623_p0.jpg"></p><h3 id="5视频播放器"><a href="#5视频播放器" class="headerlink" title="5视频播放器"></a>5视频播放器</h3><p><a href="https://v.mikuo.top/bliplayer/">https://v.mikuo.top/bliplayer/</a></p><p>demo: 视频来自抖音 @四宫辉夜</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","loop":true,"video":{"url":"https://pan.runrab.com/e5/video/douyin/%E7%A2%A7%E8%93%9D%E6%A1%A3%E6%A1%88.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>demo: <a href="https://v.mikuo.top/bliplayer/?url=https://pan.runrab.com/video/%25E5%25A4%25A9%25E6%25B0%2594%25E4%25B9%258B%25E5%25AD%2590.mp4">demo</a></p><h3 id="6壁纸"><a href="#6壁纸" class="headerlink" title="6壁纸"></a>6壁纸</h3><p>demo：</p><p><a href="https://v.mikuo.top/wallpaper">点我前往</a></p>]]></content>
      
      
      <categories>
          
          <category> me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> me </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
